<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello-World</title>
    <url>/2021/06/08/Hello-World/</url>
    <content><![CDATA[
        <h2 id="Quick-Start"   >
          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>
      
        <h3 id="创建一个文档"   >
          <a href="#创建一个文档" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建一个文档" class="headerlink" title="创建一个文档"></a>创建一个文档</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="创建一个页面"   >
          <a href="#创建一个页面" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建一个页面" class="headerlink" title="创建一个页面"></a>创建一个页面</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">&quot;new my pageName&quot;</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="生成静态页面至public目录"   >
          <a href="#生成静态页面至public目录" class="heading-link"><i class="fas fa-link"></i></a><a href="#生成静态页面至public目录" class="headerlink" title="生成静态页面至public目录"></a>生成静态页面至public目录</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure>


        <h3 id="部署到GitHub"   >
          <a href="#部署到GitHub" class="heading-link"><i class="fas fa-link"></i></a><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure>

<span id="more"></span>


        <h3 id="清理public目录的内容"   >
          <a href="#清理public目录的内容" class="heading-link"><i class="fas fa-link"></i></a><a href="#清理public目录的内容" class="headerlink" title="清理public目录的内容"></a>清理public目录的内容</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></div></figure>


        <h3 id="指令缩写"   >
          <a href="#指令缩写" class="heading-link"><i class="fas fa-link"></i></a><a href="#指令缩写" class="headerlink" title="指令缩写"></a>指令缩写</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo n    （hexo new）</span><br><span class="line">$ hexo g    （hexo generate）</span><br><span class="line">$ hexo d    （hexo deploy）</span><br></pre></td></tr></table></div></figure>


        <h3 id="组合指令"   >
          <a href="#组合指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合指令" class="headerlink" title="组合指令"></a>组合指令</h3>
      <figure class="highlight bash"><div class="table-container"><table><tr><td class="code"><pre><span class="line">$ hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">$ hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>Hexo常用指令</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Top</title>
    <url>/2021/06/08/Linux-Top/</url>
    <content><![CDATA[
        <h1 id="Linux命令之Top"   >
          <a href="#Linux命令之Top" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linux命令之Top" class="headerlink" title="Linux命令之Top"></a>Linux命令之Top</h1>
      <p><img src="/mdimages/image-20210527113329108.png" alt="image-20210527113329108"></p>

        <h3 id="第一行，任务队列信息，同uptime命令的执行结果"   >
          <a href="#第一行，任务队列信息，同uptime命令的执行结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一行，任务队列信息，同uptime命令的执行结果" class="headerlink" title="第一行，任务队列信息，同uptime命令的执行结果"></a>第一行，任务队列信息，同uptime命令的执行结果</h3>
      <p>系统时间：11:32:32</p>
<p>运行时间：up 61 days, 23:26</p>
<p>当前登录用户：1 user</p>
<p>负载均衡（uptime）：load average:  1.35, 1.25, 1.29</p>
<p>​                                  average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p>
<p>（load average数据是每隔5秒检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5，就表明系统在超负荷运转）</p>
<span id="more"></span>


        <h3 id="第二行，Tasks-任务（进程）"   >
          <a href="#第二行，Tasks-任务（进程）" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二行，Tasks-任务（进程）" class="headerlink" title="第二行，Tasks - 任务（进程）"></a>第二行，Tasks - 任务（进程）</h3>
      <p>总进程：231total，运行：2 running，休眠：229 sleeping，停止：0 stopped，僵尸进程：0 zombie</p>

        <h3 id="第三行，cpu状态信息"   >
          <a href="#第三行，cpu状态信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三行，cpu状态信息" class="headerlink" title="第三行，cpu状态信息"></a>第三行，cpu状态信息</h3>
      <p>15.2%us【user space】— 用户空间占用CPU的百分比。</p>
<p>4.9%sy 【sysctl】— 内核空间占用CPU的百分比。</p>
<p>0.0%ni  — 改变过优先级的进程占用CPU的百分比。</p>
<p>79.8%id 【idolt】 — 空闲CPU百分比。</p>
<p>0.0%wa 【wait】 — IO等待占用CPU的百分比。</p>
<p>0.0%hi 【Hardware IRQ】— 硬中断占用CPU的百分比。</p>
<p>0.2%si 【Software Interrupts】— 软中断占用CPU的百分比。</p>
<p>0.0%st 【】</p>

        <h3 id="第四行，内存状态-Mem"   >
          <a href="#第四行，内存状态-Mem" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四行，内存状态-Mem" class="headerlink" title="第四行，内存状态 Mem"></a>第四行，内存状态 Mem</h3>
      <p>8060540k total  总内存大小, 6989544k used 已使用内存大小, 1070996k free 空闲内存大小, 1143720k buffers 【缓存的内存量】</p>

        <h3 id="第五行，swap交换分区信息"   >
          <a href="#第五行，swap交换分区信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#第五行，swap交换分区信息" class="headerlink" title="第五行，swap交换分区信息"></a>第五行，swap交换分区信息</h3>
      <p>8208380k total 总内存大小, 942352k used 已使用内存大小,  7266028k free 空闲内存大小, 3101300k cached 【缓冲的交换区总量】</p>
<p>补充说明：可用内存 =  free + buffer + cached</p>
<p>在对内存监控中，时刻注意swap 交换区的 used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，表明真正的内存不够用了。</p>

        <h3 id="第六行，空行"   >
          <a href="#第六行，空行" class="heading-link"><i class="fas fa-link"></i></a><a href="#第六行，空行" class="headerlink" title="第六行，空行"></a>第六行，空行</h3>
      
        <h3 id="第七行以下：各进程（任务）的状态监控"   >
          <a href="#第七行以下：各进程（任务）的状态监控" class="heading-link"><i class="fas fa-link"></i></a><a href="#第七行以下：各进程（任务）的状态监控" class="headerlink" title="第七行以下：各进程（任务）的状态监控"></a>第七行以下：各进程（任务）的状态监控</h3>
      <p>PID —- 进程id</p>
<p>USER — 进程所有者。</p>
<p>PR — 进程优先级。</p>
<p>NI — nice值，负值表示高优先级，正值表示低优先级。</p>
<p>VIRT — 进程使用的虚拟内存总量，单位kb。VIRT = SWAP + RES。</p>
<p>RES — 进程使用的、未被换出的物理内存大小，单位kb。RES = CODE + DATA。</p>
<p>SHR — 共享内存大小，单位kb。</p>
<p>S — 进程状态。D代表不可中断的睡眠状态；R代表运行；S代表睡眠；T代表跟踪/停止；Z代表僵尸进程。</p>
<p>%CPU — 上次更新到现在CPU时间占用百分比。</p>
<p>%MEM — 进程使用的物理内存百分比。</p>
<p>TIME+ — 进程使用的CPU时间总计，单位1/100 秒。</p>
<p>COMMAND — 进程名称（命令名/命令行）。</p>
<p>以下信息默认没展示:</p>
<p>DATA  —  可执行代码以外的部分（数据段+栈）占用的物理内存大小，单位kb。【简单理解，数据占用的内存，真正的该程序要求的数据空间，是真正在运行中要使用的】。</p>
<p>CODE — 可执行代码占用的物理内存大小，单位kb。</p>
<p>可以通过指令f进入 编排基本视图，这里列出了所有可在top基本视图中显示的进程字段，有带 “ * “ 的并且标注为大写字母的字段是可显示的，没有带 “ * “ 并且是小写字母的字段是不显示的。如果要在基本视图中显示CODE和DATA两个字段，可以移动上下键到这两个字段，然后按d键选择这两个字段，然后按q退出就可以。【提示：按f进入编排基本视图后，如果想进行进程字段显示顺序做修改，使用上下键移动到该字段，然后按右键（即选中该字段），然后上下键移动到需要的位置即可】</p>
<p><img src="/mdimages/image-20210527204228170.png" alt="image-20210527204228170"></p>
<hr>

        <h3 id="VIRT-virtual-memory-usage-虚拟内存"   >
          <a href="#VIRT-virtual-memory-usage-虚拟内存" class="heading-link"><i class="fas fa-link"></i></a><a href="#VIRT-virtual-memory-usage-虚拟内存" class="headerlink" title="VIRT :  virtual memory usage 虚拟内存"></a>VIRT :  virtual memory usage 虚拟内存</h3>
      <p>1、进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等</p>
<p>注意：假如进程申请100m的内存，但实际只使用了10m,那么它会申请100m，而不是实际的使用量10m.</p>

        <h3 id="RES-resident-memory-usage-常驻内存（单位kb）"   >
          <a href="#RES-resident-memory-usage-常驻内存（单位kb）" class="heading-link"><i class="fas fa-link"></i></a><a href="#RES-resident-memory-usage-常驻内存（单位kb）" class="headerlink" title="RES  :  resident memory usage 常驻内存（单位kb）"></a>RES  :  resident memory usage 常驻内存（单位kb）</h3>
      <p>1、进程当前使用的内存大小，但不包括swap out</p>
<p>2、包含其他进程的共享</p>
<p>3、如果申请100m的内存，实际使用10m，它只增长10m，与VIRT相反</p>
<p>补充说明：<strong>当某进程向OS请求内存发现不足时，OS会把内存中暂时不用的数据交换出去，放在SWAP分区中，这个过程称为SWAP OUT</strong></p>

        <h3 id="SHR-shared-memory-共享内存"   >
          <a href="#SHR-shared-memory-共享内存" class="heading-link"><i class="fas fa-link"></i></a><a href="#SHR-shared-memory-共享内存" class="headerlink" title="SHR : shared memory 共享内存"></a>SHR : shared memory 共享内存</h3>
      <p>1、除了自身进程的共享内存，也包括其他进行的共享内存</p>
<p>2、虽然进程只使用了几个共享库的函数，但它包含了整个共享库的大小</p>
<p>3、计算某个进程所占物理内存大小公式：RES - SHR</p>
<p>4、swap out后，它将会降下来</p>

        <h3 id="top运行中可以通过内部命令对进程的显示方式进行控制：内部命令如下"   >
          <a href="#top运行中可以通过内部命令对进程的显示方式进行控制：内部命令如下" class="heading-link"><i class="fas fa-link"></i></a><a href="#top运行中可以通过内部命令对进程的显示方式进行控制：内部命令如下" class="headerlink" title="top运行中可以通过内部命令对进程的显示方式进行控制：内部命令如下"></a>top运行中可以通过内部命令对进程的显示方式进行控制：内部命令如下</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">s ：改变画面更新频率。</span><br><span class="line"></span><br><span class="line">l ：关闭或开启第一行top信息。</span><br><span class="line"></span><br><span class="line">t ：关闭或开启第二行Tasks和第三行Cpus信息（需要连按3次才可以关闭）。</span><br><span class="line"></span><br><span class="line">m ：关闭或开启第四行Mem和第五行Swap信息（需要连按3次才可以关闭）。</span><br><span class="line"></span><br><span class="line">N ：以PID的大小进行降序排序。</span><br><span class="line"></span><br><span class="line">P：以CPU占用率大小进行降序排序。</span><br><span class="line"></span><br><span class="line">M：以内存占用率大小进行降序排序。</span><br><span class="line"></span><br><span class="line">h：显示帮助</span><br><span class="line"></span><br><span class="line">n：设置在进程列表所显示进程的数量</span><br><span class="line"></span><br><span class="line">q：退出top</span><br></pre></td></tr></table></div></figure>




        <h3 id="top命令的使用方法"   >
          <a href="#top命令的使用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#top命令的使用方法" class="headerlink" title="top命令的使用方法"></a>top命令的使用方法</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">使用格式：top [-] [p] [S] [s] [i] [c]</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">p：通过指定监控进程ID来显示某个进程的状态。top -p 进程ID</span><br><span class="line"></span><br><span class="line">S：指定累计模式。</span><br><span class="line"></span><br><span class="line">s：使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</span><br><span class="line"></span><br><span class="line">i：使top不显示任何闲置或者僵尸进程。</span><br><span class="line"></span><br><span class="line">c：显示整个命令行而不只是显示命令名称。</span><br></pre></td></tr></table></div></figure>




        <h3 id="Linux查看物理CPU个数、核数、逻辑CPU个数"   >
          <a href="#Linux查看物理CPU个数、核数、逻辑CPU个数" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linux查看物理CPU个数、核数、逻辑CPU个数" class="headerlink" title="Linux查看物理CPU个数、核数、逻辑CPU个数"></a><strong>Linux查看物理CPU个数、核数、逻辑CPU个数</strong></h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line"># 总核数 = 物理CPU个数 X 每颗物理CPU的核数 </span><br><span class="line"># 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</span><br><span class="line"></span><br><span class="line"># 查看物理CPU个数</span><br><span class="line">cat /proc/cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l</span><br><span class="line"></span><br><span class="line"># 查看每个物理CPU中core的个数(即核数)</span><br><span class="line">cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</span><br><span class="line"></span><br><span class="line"># 查看逻辑CPU的个数</span><br><span class="line">cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</span><br><span class="line"># 查看CPU信息（型号）</span><br><span class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>栈上分配和TLAB</title>
    <url>/2021/06/09/%E6%A0%88%E4%B8%8A%E5%88%86%E9%85%8D%E5%92%8CTLAB/</url>
    <content><![CDATA[
        <h2 id="关于栈上分配和TLAB的理解"   >
          <a href="#关于栈上分配和TLAB的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于栈上分配和TLAB的理解" class="headerlink" title="关于栈上分配和TLAB的理解"></a><strong>关于栈上分配和TLAB的理解</strong></h2>
      
        <h4 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h4>
      <p>在java程序中，new出来的对象时分配在堆空间中的，但是实际的情况是，大部分new出来的对象会进入堆空间中，而并非是全部的对象，其实还有另外两个地方可以存储new的对象，我们称之为栈上分配以及TLAB。</p>

        <h2 id="栈上分配"   >
          <a href="#栈上分配" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h2>
      
        <h4 id="栈上分配是什么？"   >
          <a href="#栈上分配是什么？" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈上分配是什么？" class="headerlink" title="栈上分配是什么？"></a>栈上分配是什么？</h4>
      <p>JVM提供了一种叫做栈上分配的概念，针对那些作用域不会逃逸出方法的对象，在分配内存时不在将对象分配在堆内存中，而是将对象属性打散后分配在栈上（线程私有，属于栈内存），这样随着方法的调用结束，栈空间的回收就会随着栈上分配的打散后的对象回收掉，不再给GC增加额外的无用负担，从而提升应用程序整体的性能。</p>
<span id="more"></span>


        <h4 id="为什么需要栈上分配？"   >
          <a href="#为什么需要栈上分配？" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么需要栈上分配？" class="headerlink" title="为什么需要栈上分配？"></a>为什么需要栈上分配？</h4>
      <p>在应用程序中，其实有很多的对象的作用域都不会逃逸出方法外，也就是说该对象的生命周期会随着方法的调用而开始，方法的调用结束而结束，对于这种对象，就应该考虑将该对象不分配在堆空间中。因为一旦分配在堆空间中，当方法调用结束，没有了引用指向该对象，该对象就需要被GC回收，而如果存在大量的这种情况，对GC来说无疑时一种负担。</p>

        <h4 id="如何开启栈上分配？"   >
          <a href="#如何开启栈上分配？" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何开启栈上分配？" class="headerlink" title="如何开启栈上分配？"></a>如何开启栈上分配？</h4>
      <p>栈上分配需要的前提：</p>
<p>（1）开启逃逸分析（-XX:+DoEscapeAnalysis）</p>
<p>逃逸分析的作用就是分析对象的作用域是否会逃逸出方法之外，在Server虚拟机模式下才可以开启（jdk1.6默认开启）</p>
<p>（2）开启标量替换（-XX:+EliminateAllocations）</p>
<p>标量替换的作用是允许将对象根据属性打散后分配在栈上，默认该配置为开启</p>

        <h4 id="如何查看逃逸分析的筛选结果？"   >
          <a href="#如何查看逃逸分析的筛选结果？" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何查看逃逸分析的筛选结果？" class="headerlink" title="如何查看逃逸分析的筛选结果？"></a>如何查看逃逸分析的筛选结果？</h4>
      <p>配置 -XX:+PrintEscapeAnalysis 开启打印逃逸分析筛选结果</p>

        <h2 id="TLAB"   >
          <a href="#TLAB" class="heading-link"><i class="fas fa-link"></i></a><a href="#TLAB" class="headerlink" title="TLAB"></a>TLAB</h2>
      
        <h4 id="TLAB是什么？"   >
          <a href="#TLAB是什么？" class="heading-link"><i class="fas fa-link"></i></a><a href="#TLAB是什么？" class="headerlink" title="TLAB是什么？"></a>TLAB是什么？</h4>
      <p>全程叫做：Thread Local Allocation Buffer 即线程本地分配缓存</p>
<p>就是给每个线程分配一小块私有的堆空间，即TLAB是一块线程私有的堆空间（实际上是Eden区中划出的）。</p>

        <h4 id="为什么需要TLAB？"   >
          <a href="#为什么需要TLAB？" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么需要TLAB？" class="headerlink" title="为什么需要TLAB？"></a>为什么需要TLAB？</h4>
      <p>一般来说，对象分配在堆上，而堆是一个全局共享的区域，当多个线程同一时刻操作堆内存分配对象空间时，就需要进行同步，而同步带来的效果就是对象分配效率变差（尽管JVM采用了CAS的形式处理分配失败的情况），但是对于存在竞争激烈的分配场合仍然会导致效率变差。（简而言之：需要TLAB的原因就是提高对象在堆上的分配效率）</p>

        <h4 id="如何开启TLAB？"   >
          <a href="#如何开启TLAB？" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何开启TLAB？" class="headerlink" title="如何开启TLAB？"></a>如何开启TLAB？</h4>
      <p>JVM默认开启了TLAB功能，可以使用-XX:+UseTLAB 显示是否开启。</p>

        <h4 id="如何观察TLAB使用情况？"   >
          <a href="#如何观察TLAB使用情况？" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何观察TLAB使用情况？" class="headerlink" title="如何观察TLAB使用情况？"></a>如何观察TLAB使用情况？</h4>
      <p>JVM提供了-XX:+PrintTLAB，可以打开跟踪TLAB的使用情况。</p>

        <h4 id="如何调整TLAB默认大小？"   >
          <a href="#如何调整TLAB默认大小？" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何调整TLAB默认大小？" class="headerlink" title="如何调整TLAB默认大小？"></a>如何调整TLAB默认大小？</h4>
      <p>-XX:TLABSize 通过该参数指定分配给每一个线程的TLAB空间的大小。</p>

        <h2 id="栈上分配和TLAB的对比"   >
          <a href="#栈上分配和TLAB的对比" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈上分配和TLAB的对比" class="headerlink" title="栈上分配和TLAB的对比"></a>栈上分配和TLAB的对比</h2>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">针对点</th>
<th align="center">处于对象分配流程的位置</th>
</tr>
</thead>
<tbody><tr>
<td align="center">栈上分配</td>
<td align="center">避免GC无畏负担</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">TLAB</td>
<td align="center">加速堆上对象的分配</td>
<td align="center">2</td>
</tr>
</tbody></table></div>

        <h2 id="对象分配流程图"   >
          <a href="#对象分配流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象分配流程图" class="headerlink" title="对象分配流程图"></a>对象分配流程图</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://processon.com/diagraming/609de1d91e08533129c22d0f" >对象分配流程图 - ProcessOn</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><img src="/mdimages/image-20210514104238560.png" alt="image-20210514104238560"></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java对象的强、软、弱、虚引用</title>
    <url>/2021/06/09/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%BA%E3%80%81%E8%BD%AF%E3%80%81%E5%BC%B1%E3%80%81%E8%99%9A%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[
        <h1 id="Java对象的强引用、软引用、弱引用、虚引用"   >
          <a href="#Java对象的强引用、软引用、弱引用、虚引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java对象的强引用、软引用、弱引用、虚引用" class="headerlink" title="Java对象的强引用、软引用、弱引用、虚引用"></a>Java对象的强引用、软引用、弱引用、虚引用</h1>
      
        <h3 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h3>
      <p>在Java中，除了基本数据类型外，还有引用数据类型；Java根据其生命周期的长短，将引用分为以下4类：强引用、软引用、弱引用和虚引用。</p>

        <h3 id="基本数据类型"   >
          <a href="#基本数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3>
      <ul>
<li>整数类型(byte、short、int、long)</li>
<li>浮点类型(float、double)</li>
<li>字符型(char)</li>
<li>布尔型(boolean)</li>
</ul>

        <h3 id="引用数据类型"   >
          <a href="#引用数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3>
      <ul>
<li>类(class)</li>
<li>接口(interface)</li>
<li>数组([])</li>
</ul>
<span id="more"></span>


        <h3 id="基本数据类型图"   >
          <a href="#基本数据类型图" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本数据类型图" class="headerlink" title="基本数据类型图"></a>基本数据类型图</h3>
      <p><img src="/mdimages/image-20210609235746769.png" alt="image-20210609235746769"></p>

        <h3 id="引用类图"   >
          <a href="#引用类图" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用类图" class="headerlink" title="引用类图"></a>引用类图</h3>
      <p><img src="/mdimages/image-20210610000110261.png" alt="image-20210610000110261"></p>

        <h3 id="一、强引用（默认支持模式）"   >
          <a href="#一、强引用（默认支持模式）" class="heading-link"><i class="fas fa-link"></i></a><a href="#一、强引用（默认支持模式）" class="headerlink" title="一、强引用（默认支持模式）"></a>一、强引用（默认支持模式）</h3>
      <p>把一个对象赋给一个引用变量，这个引用变量就是一个强引用。(如：Object obj = new Object()中的obj就是强引用)。</p>
<p>即通过关键字new创建的对象所关联的引用就是强引用，此时它处于可达状态（如果不懂可达状态的概念，可参阅GCRoots相关知识），当JVM内存空间不足时，JVM宁愿抛出OOM运行时错误使程序终止，也不会回收“存活”对象来解决内存不足的问题。因此强引用是造成java内存泄漏的主要原因之一。</p>
<p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显示地将相应引用赋值为Null，一般认为就是可以被垃圾收集的了（具体回收时机要看垃圾收集策略）。</p>
<p>知识补充：当一个对象处于可达状态时，jvm会对其标记为存活对象。</p>

        <h3 id="二、软引用"   >
          <a href="#二、软引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#二、软引用" class="headerlink" title="二、软引用"></a>二、软引用</h3>
      <p>软引用是一种相对于强引用弱化一些的引用，需要用java.lang.ref.SoftReference类来实现。</p>
<p>对于只要软引用的对象来说，当系统内存充足时，它不会被回收，当系统内存不足时，它会被回收。</p>
<p>软引用可以和一个引用队列(ReferenceQueue)联合使用，如果软引用所引用的对象被垃圾回收器回收，JVM就会把这个软引用加入到与之关联的引用队列中，后续可以调用ReferenceQueue的poll()方法来检查是否有它所关联的对象被回收。如果队列为空，将返回一个null，否则返回队列中前面的一个Reference对象。</p>

        <h4 id="应用场景："   >
          <a href="#应用场景：" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4>
      <p>  软引用通常用在对内存敏感的程序中，比如高速缓存就使用了软引用，内存足够时就保留，不足够时就回收。如MyBatis中就用到。</p>

        <h4 id="代码演示："   >
          <a href="#代码演示：" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        SoftReference&lt;Object&gt; reference = <span class="keyword">new</span> SoftReference&lt;&gt;(obj);</span><br><span class="line">        <span class="comment">//这里将obj赋值为null，让其不存在强引用</span></span><br><span class="line">        obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建大对象数组30M</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">30</span> * <span class="number">1024</span> *<span class="number">1024</span>];</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;软引用==&gt;&quot;</span>+reference.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210611004111118.png" alt="image-20210611004111118"></p>
<p>设置JVM参数：-Xms10m -Xmx10m -XX:+PrintGCDetails（初始化堆内存大小，堆内存最大大小，开启GC回收日志）</p>
<p><img src="/mdimages/image-20210611004543872.png" alt="image-20210611004543872"></p>
<p>运行结果：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: 2048K-&gt;504K(2560K)] 2048K-&gt;956K(9728K), <span class="number">0.0008888</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 1372K-&gt;504K(2560K)] 1825K-&gt;1044K(9728K), <span class="number">0.0010868</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 504K-&gt;488K(2560K)] 1044K-&gt;1068K(9728K), <span class="number">0.0009916</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 488K-&gt;0<span class="title">K</span><span class="params">(2560K)</span>] [ParOldGen: 580K-&gt;976<span class="title">K</span><span class="params">(7168K)</span>] 1068K-&gt;976<span class="title">K</span><span class="params">(9728K)</span>, [Metaspace: 3520K-&gt;3520<span class="title">K</span><span class="params">(1056768K)</span>], 0.0093101 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 976K-&gt;976K(9728K), <span class="number">0.0004390</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 0K-&gt;0<span class="title">K</span><span class="params">(2560K)</span>] [ParOldGen: 976K-&gt;958<span class="title">K</span><span class="params">(7168K)</span>] 976K-&gt;958<span class="title">K</span><span class="params">(9728K)</span>, [Metaspace: 3520K-&gt;3520<span class="title">K</span><span class="params">(1056768K)</span>], 0.0095406 secs] [Times: user</span>=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">软引用==&gt;<span class="keyword">null</span></span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 2560K, used 61K [<span class="number">0x00000000ffd00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 2048K, <span class="number">3</span>% used [<span class="number">0x00000000ffd00000</span>,<span class="number">0x00000000ffd0f700</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">  from space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff80000</span>,<span class="number">0x00000000fff80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line">  to   space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff80000</span>)</span><br><span class="line"> ParOldGen       total 7168K, used 958K [<span class="number">0x00000000ff600000</span>, <span class="number">0x00000000ffd00000</span>, <span class="number">0x00000000ffd00000</span>)</span><br><span class="line">  object space 7168K, <span class="number">13</span>% used [<span class="number">0x00000000ff600000</span>,<span class="number">0x00000000ff6efa08</span>,<span class="number">0x00000000ffd00000</span>)</span><br><span class="line"> Metaspace       used 3554K, capacity 4502K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 391<span class="title">K</span>, <span class="title">capacity</span> 394<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class"><span class="title">Exception</span> <span class="title">in</span> <span class="title">thread</span> &quot;<span class="title">main</span>&quot; <span class="title">java</span>.<span class="title">lang</span>.<span class="title">OutOfMemoryError</span>: <span class="title">Java</span> <span class="title">heap</span> <span class="title">space</span></span></span><br><span class="line"><span class="class">	<span class="title">at</span> <span class="title">com</span>.<span class="title">test</span>.<span class="title">mybatis</span>.<span class="title">Main</span>.<span class="title">main</span>(<span class="title">Main</span>.<span class="title">java</span>:12)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 1</span></span><br></pre></td></tr></table></div></figure>

<p>发现当内存不够的时候软引用对象就会被回收。</p>

        <h3 id="三、弱引用"   >
          <a href="#三、弱引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#三、弱引用" class="headerlink" title="三、弱引用"></a>三、弱引用</h3>
      <p>弱引用需要通过java.lang.ref.WeakReference类实现。生命周期比软引用更短。</p>
<p>对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管JVM的内存空间是否足够，都将回收该对象占用的内存。</p>
<p>弱引用还可以和一个引用队列(ReferenceQueue)联合使用，如果弱引用所引用的对象被垃圾回收，JVM就会把这个弱引用加入与之关联的引用队列中。</p>

        <h4 id="应用场景：-1"   >
          <a href="#应用场景：-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用场景：-1" class="headerlink" title="应用场景："></a>应用场景：</h4>
      <p>弱引用同样可用于内存敏感的缓存。</p>
<p>弱引用适合解决某些地方的内存泄露问题，比如ThreadLocal，ThreadLocal静态内部类ThreadLocalMap中的Entiry中的key就是一个虚引用。</p>

        <h4 id="代码演示：-1"   >
          <a href="#代码演示：-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码演示：-1" class="headerlink" title="代码演示："></a>代码演示：</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        WeakReference&lt;Object&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;强引用对象====&gt;&quot;</span>+obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;弱引用对象====&gt;&quot;</span>+weakReference.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将obj赋值为null，让其不存在强引用</span></span><br><span class="line">        obj = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();<span class="comment">//手动触发垃圾回收</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==========GC回收后的结果==========&quot;</span>);</span><br><span class="line">        System.out.println(weakReference.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">强引用对象====&gt;java.lang.Object@3b07d329</span><br><span class="line">弱引用对象====&gt;java.lang.Object@3b07d329</span><br><span class="line">==========GC回收后的结果==========</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="补充WeakHashMap"   >
          <a href="#补充WeakHashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#补充WeakHashMap" class="headerlink" title="补充WeakHashMap"></a>补充WeakHashMap</h4>
      <p>WeakHashMap的键是”弱键”，也就是键的引用是一个弱引用。</p>
<p>代码演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WeakHashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> WeakHashMap&lt;&gt;();</span><br><span class="line">        Integer key = <span class="keyword">new</span> Integer(<span class="number">7</span>);</span><br><span class="line">        String value = <span class="string">&quot;WeakHashMap&quot;</span>;</span><br><span class="line"></span><br><span class="line">        map.put(key,value);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        key = <span class="keyword">null</span>;<span class="comment">//这里将key置为null，让其不存在强引用</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(map+<span class="string">&quot;===&gt;&quot;</span>+map.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">7</span>=WeakHashMap&#125;</span><br><span class="line">&#123;<span class="number">7</span>=WeakHashMap&#125;</span><br><span class="line">&#123;&#125;===&gt;<span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="四、虚引用"   >
          <a href="#四、虚引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#四、虚引用" class="headerlink" title="四、虚引用"></a>四、虚引用</h3>
      <p>虚引用需要java.lang.ref.PhantomReference类实现。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收，它不能单独使用，也不能通过它访问对象，必须和引用队列(ReferenceQueue)联合使用。</p>
<p>主要作用是跟踪对象被垃圾回收的状态，仅仅是提供了一种确保对象被finalize以后，做某些事情的机制。PhantomReference的get方法总是返回null,无论在GC前还是GC后，PhantomReference在GC前poll方法是null，GC后poll方法是获取被回收的对象，设置虚引用关联的唯一目的就是在这个对象被垃圾收集器回收的时候收到一个系统通知或者后续添加进一步的处理（类似SpringAop的后置通知）。其意义在于说明一个对象已经进入finalization阶段，可以被GC回收，用来实现比finalization机制更灵活的回收操作。</p>
<p>Java允许使用finalize()方法在垃圾回收器将对象从内存中清除出去之前做必要的清理工作。</p>

        <h4 id="应用场景：-2"   >
          <a href="#应用场景：-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用场景：-2" class="headerlink" title="应用场景："></a>应用场景：</h4>
      <p>可用来跟踪对象被垃圾回收器回收的时候添加一些处理。</p>

        <h4 id="代码演示：-2"   >
          <a href="#代码演示：-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码演示：-2" class="headerlink" title="代码演示："></a>代码演示：</h4>
      <p>对象无重写finalize()方法</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        ReferenceQueue&lt;User&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;User&gt; phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(user, queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将强引用去掉</span></span><br><span class="line">        user = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;GC回收前&quot;</span>+queue.poll());</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);<span class="comment">//这里睡0.1秒确保GC线程执行完再打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第一次GC之后&quot;</span>+queue.poll());</span><br><span class="line">        System.out.println(<span class="string">&quot;在打印看看&quot;</span>+queue.poll());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">GC回收前<span class="keyword">null</span></span><br><span class="line">第一次GC之后java.lang.ref.PhantomReference@3b07d329</span><br><span class="line">在打印看看<span class="keyword">null</span></span><br></pre></td></tr></table></div></figure>

<p>注意：</p>
<p>ReferenceQueue.poll()方法调用拿到对象后，再调用就无该对象了。</p>
<p>代码演示：</p>
<p>对象重写finalize()方法</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        ReferenceQueue&lt;User&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;User&gt; phantomReference = <span class="keyword">new</span> PhantomReference&lt;&gt;(user, queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将强引用去掉</span></span><br><span class="line">        user = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;GC回收前&quot;</span>+queue.poll());</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);<span class="comment">//等待GC线程执行完毕再输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第一次GC之后&quot;</span>+queue.poll());</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);<span class="comment">//等待GC线程执行完毕再输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二次GC之后&quot;</span>+queue.poll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;GC要把我清除了/(ㄒoㄒ)/~~......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">GC回收前<span class="keyword">null</span></span><br><span class="line">GC要把我清除了/(ㄒoㄒ)/~~......</span><br><span class="line">第一次GC之后<span class="keyword">null</span></span><br><span class="line">第二次GC之后java.lang.ref.PhantomReference@3b07d329</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="结论"   >
          <a href="#结论" class="heading-link"><i class="fas fa-link"></i></a><a href="#结论" class="headerlink" title="结论"></a>结论</h4>
      <p>对于虚引用，如果被引用的对象没有重写finalize方法，那么在第一次垃圾回收将该对象销毁之后，就会将虚引用对象添加到引用队列中。如果被引用的对象重写了finalize方法，那么则是在执行完第二次垃圾回收后，才将虚引用对象添加到其关联的引用队列中。</p>

        <h4 id="ReferenceQueue引用队列"   >
          <a href="#ReferenceQueue引用队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#ReferenceQueue引用队列" class="headerlink" title="ReferenceQueue引用队列"></a>ReferenceQueue引用队列</h4>
      <p>对象在被回收之前要被引用队列保存一下。GC之前对象不放在队列中，GC之后对象才放入队列中。</p>

        <h3 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>
      <ul>
<li>强引用是不会被垃圾回收器随意回收的，也是造成java内存溢出的主要原因之一。</li>
<li>软引用是通过java.lang.ref.SoftReference类来实现，当JVM内存不足时，便会回收软引用所引用的对象。</li>
<li>弱引用是通过java.lang.ref.WeakReference类来实现，只要垃圾回收器回收垃圾时，无论内存足不足够都会把弱引用回收掉。</li>
<li>虚引用是通过java.lang.ref.PhantomReference类来实现，若一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadPool线程池</title>
    <url>/2021/06/11/ThreadPool%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[
        <h1 id="ThreadPool线程池"   >
          <a href="#ThreadPool线程池" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadPool线程池" class="headerlink" title="ThreadPool线程池"></a>ThreadPool线程池</h1>
      
        <h3 id="线程池是什么"   >
          <a href="#线程池是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池是什么" class="headerlink" title="线程池是什么"></a>线程池是什么</h3>
      <p>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后再创建线程后自动启动这些任务。</p>

        <h3 id="为什么用线程池"   >
          <a href="#为什么用线程池" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么用线程池" class="headerlink" title="为什么用线程池"></a>为什么用线程池</h3>
      <p>线程池的工作主要是控制运行的线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量，超出数量的线程排队等候，等其它线程执行完毕，再从队列中取出任务执行。</p>
<p>主要的特点是：线程复用；控制最大并发数；管理线程。</p>
<p>好处：</p>
<ol>
<li><p>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p>
</li>
<li><p>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</p>
</li>
<li><p>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</p>
<span id="more"></span></li>
</ol>

        <h3 id="线程池如何使用"   >
          <a href="#线程池如何使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池如何使用" class="headerlink" title="线程池如何使用"></a>线程池如何使用</h3>
      <p>Java中的线程池是通过Executor框架实现的，该框架中用到了Executor,Executors,ExecutorService,ThreadPoolExecutor这几个类。</p>
<p>类图：</p>
<p><img src="/mdimages/image-20210611153209223.png" alt="image-20210611153209223"></p>
<p>Java通过Executors提供了以下几种线程池：</p>
<ul>
<li><p>Executors.newScheduledThreadPool(int corePoolSize);创建一个支持定时以及周期性执行任务的线程池。</p>
</li>
<li><p>Executors.newWorkStealingPool(int);JDK8新增，使用目前机器上可用的处理器作为它的并行级别。</p>
</li>
<li><p>Executors.newFixedThreadPool(int);创建一个定长的线程池，可控制线程最大并发数，超过的线程会在队列中等待。</p>
</li>
<li><p>Executors.newSingleThreadExecutor();创建只有一个线程的线程池，保证所有任务按照FIFO执行；</p>
</li>
<li><p>Executors.newCachedThreadPool();创建一个可缓存线程池；</p>
<p>以上线程池除了newWorkStealingPool底层是使用ForkJoinPool创建外，其它线程池都是使用ThreadPoolExecutor创建的。</p>
</li>
</ul>

        <h4 id="重点介绍："   >
          <a href="#重点介绍：" class="heading-link"><i class="fas fa-link"></i></a><a href="#重点介绍：" class="headerlink" title="重点介绍："></a>重点介绍：</h4>
      <ol>
<li><p>newFixedThreadPool(int)</p>
<p>底层代码：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>

<p>特点：</p>
<ul>
<li>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li>
<li>newFixedThreadPool创建的线程池corePoolSize和maximumPoolSize值是相等的，它使用的阻塞队列是LinkedBlockingQueue。</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;====&gt;&quot;</span>+finalI);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>====&gt;<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>====&gt;<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>====&gt;<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>====&gt;<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>====&gt;<span class="number">4</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>====&gt;<span class="number">5</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line">因为线程池大小为<span class="number">3</span>，每个任务输出finalI后sleep2秒，可以看到每两秒打印<span class="number">3</span>个数字，并且每两秒始终打印的都是三个线程轮流工作。</span><br></pre></td></tr></table></div></figure></li>
<li><p>newSingleThreadExecutor()</p>
<p>底层代码：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>

<p>特点：</p>
<ul>
<li>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO【先进先出】,LIFO【后进先出】,优先级)执行。</li>
<li>newSingleThreadExecutor创建的线程池corePoolSize和maximimPoolSize都设置为1,它使用的阻塞队列是LinkedBlockingQueue。</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line">因为newSingleThreadExecutor线程池中始终只有一个工作线程工作，所以可以看到工作的线程始终是同一个。</span><br></pre></td></tr></table></div></figure></li>
<li><p>newCachedThreadPool()</p>
<p>底层代码：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                     <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>

<p>特点：</p>
<ul>
<li>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li>
<li>newCachedThreadPool将corePooleSize设置为0，maximumPoolSize设置为Integer.MAX_VALUE，使用的阻塞队列是SynchronousQueue，也即是任务来了就创建线程运行，当线程空闲超过60秒就销毁线程。</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//始终保持执行第二个任务的时候第一个任务已经完成</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>* finalI);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            cachedThreadPool.execute(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        cachedThreadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line">从底层可以看出newCachedThreadPool创建的线程池为无线大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</span><br></pre></td></tr></table></div></figure></li>
<li><p>newScheduledThreadPool(int corePoolSize)</p>
<p>底层代码：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executors</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPoolExecutor</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">ThreadPoolExecutor</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ScheduledExecutorService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">              <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></div></figure>

<p>特点：</p>
<p>创建一个周期线程池，支持定时及周期性任务执行。</p>
<p>代码演示1：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">        scheduledThreadPool.schedule(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;delay.....延迟3秒&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//等待任务执行完再关闭</span></span><br><span class="line">        scheduledThreadPool.shutdown();</span><br><span class="line">        <span class="comment">//无论任务是否执行完都立马关闭</span></span><br><span class="line">        <span class="comment">//scheduledThreadPool.shutdownNow();</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程执行..........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果1：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">main线程执行..........</span><br><span class="line">delay.....延迟<span class="number">3</span>秒</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></div></figure>

<p>代码演示2：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">        scheduledThreadPool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date(System.currentTimeMillis()));</span><br><span class="line">        &#125;, <span class="number">3</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果2：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">Fri Jun <span class="number">11</span> <span class="number">23</span>:<span class="number">34</span>:<span class="number">04</span> CST <span class="number">2021</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">Fri Jun <span class="number">11</span> <span class="number">23</span>:<span class="number">34</span>:<span class="number">07</span> CST <span class="number">2021</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br><span class="line">Fri Jun <span class="number">11</span> <span class="number">23</span>:<span class="number">34</span>:<span class="number">10</span> CST <span class="number">2021</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">Fri Jun <span class="number">11</span> <span class="number">23</span>:<span class="number">34</span>:<span class="number">13</span> CST <span class="number">2021</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span></span><br><span class="line">Fri Jun <span class="number">11</span> <span class="number">23</span>:<span class="number">34</span>:<span class="number">16</span> CST <span class="number">2021</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span></span><br><span class="line">Fri Jun <span class="number">11</span> <span class="number">23</span>:<span class="number">34</span>:<span class="number">19</span> CST <span class="number">2021</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code -<span class="number">1</span></span><br><span class="line">表示延迟<span class="number">3</span>秒后每<span class="number">3</span>秒执行一次任务。</span><br></pre></td></tr></table></div></figure></li>
</ol>

        <h3 id="ThreadPoolExecutor"   >
          <a href="#ThreadPoolExecutor" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3>
      
        <h4 id="构造方法"   >
          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="七大参数说明"   >
          <a href="#七大参数说明" class="heading-link"><i class="fas fa-link"></i></a><a href="#七大参数说明" class="headerlink" title="七大参数说明"></a>七大参数说明</h4>
      <ol>
<li>corePoolSize：线程池中的常驻核心线程数。</li>
<li>maximumPoolSize：线程池能够容纳同时执行的最大线程数量，此值必须大于1。</li>
<li>keepAliveTime：多余的空闲线程的存活时间。当前线程池数量超过corePoolSize时，当空闲时间达到keepAliveTime值时，多余空闲线程会被销毁直到只剩下corePoolSize个线程为止。</li>
<li>unit：keepAliveTime的单位。</li>
<li>workQueue：任务队列，被提交但尚未被执行的任务。</li>
<li>threadFactory：表示生成线程池中工作线程的线程工厂，用于创建线程一般用默认的即可。</li>
<li>handler：拒接策略，表示当队列满了并且工作线程大于等于线程池的最大线程数(maximumPoolSize)时如何来拒接。</li>
</ol>

        <h4 id="线程池的工作原理"   >
          <a href="#线程池的工作原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池的工作原理" class="headerlink" title="线程池的工作原理"></a>线程池的工作原理</h4>
      <ol>
<li>在创建了线程池后，等待提交过来的任务请求。</li>
<li>当调用execute()方法添加一个请求任务时，线程池会做如下判断：</li>
</ol>
<p>​      2.1.如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</p>
<p>​      2.2.如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；</p>
<p>​      2.3.如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</p>
<p>​      2.4.如果队列满了且正在运行的线程数大于或等于mamimumPoolSize，那么线程池会启动饱和拒接策略来执行；</p>
<p>  3.当一个线程完成任务时，它会从队列中取下一个任务来执行。</p>
<p>  4.当一个线程无事可做超过一定时间(keepAliveTime)时，线程池会判断：</p>
<p>​     如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。最后线程池的所有任务完成后它最终会收缩到corePoolSize的大小。</p>

        <h4 id="线程池的拒接策略"   >
          <a href="#线程池的拒接策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池的拒接策略" class="headerlink" title="线程池的拒接策略"></a>线程池的拒接策略</h4>
      
        <h5 id="线程池的拒接策略是什么"   >
          <a href="#线程池的拒接策略是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池的拒接策略是什么" class="headerlink" title="线程池的拒接策略是什么"></a>线程池的拒接策略是什么</h5>
      <p>等待队列已经排满了，再也塞不进新任务，同时线程池中的maximumPoolSize也达到了，无法进行为新任务服务，这个时候就需要拒接策略机制合理的处理这个问题。</p>

        <h5 id="JDK内置的拒接策略"   >
          <a href="#JDK内置的拒接策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#JDK内置的拒接策略" class="headerlink" title="JDK内置的拒接策略"></a>JDK内置的拒接策略</h5>
      <ul>
<li><p>AbortPolicy（默认）：直接抛出RejectedExecutionException异常阻止系统正常运行。</p>
</li>
<li><p>CallerRunsPolicy：”调用者运行”一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量。</p>
</li>
<li><p>DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列尝试再次提交当前任务。</p>
</li>
<li><p>DiscardPolicy：直接丢弃任务，不予任何处理也不抛异常。如果允许任务丢失，这是最好的一种方案。</p>
<p> 以上内置拒接策略均实现了RejectedExecutionHandler接口。</p>
</li>
</ul>
<p><img src="/mdimages/image-20210612141336672.png" alt="image-20210612141336672"></p>

        <h3 id="注意事项"   >
          <a href="#注意事项" class="heading-link"><i class="fas fa-link"></i></a><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3>
      <p>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式。</p>
<p>Executors返回的线程池对象的弊端如下：</p>
<ol>
<li><p>newFixedThreadPool和newSingleThreadPool：</p>
<p>允许的请求队列长度为Integer.MAX_VALUE,长度约为21亿左右，可能会堆积大量的请求，从而导致OOM。</p>
</li>
<li><p>newCachedThreadPool和newScheduledThreadPool:</p>
<p>允许的创建最大线程数量为Integer.MAX_VALUE,长度约为21亿左右，可能会创建大量的线程，从而导致OOM。</p>
</li>
</ol>

        <h3 id="自定义线程池核心线程数的考量"   >
          <a href="#自定义线程池核心线程数的考量" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义线程池核心线程数的考量" class="headerlink" title="自定义线程池核心线程数的考量"></a>自定义线程池核心线程数的考量</h3>
      <ul>
<li><p>CPU密集型</p>
<p>任务需要大量的运算，而没有阻塞，CPU一直全速运行，尽可能少的线程数量。</p>
<p>参考公式：CPU核数+1个线程</p>
</li>
<li><p>IO密集型</p>
<p>任务需要大量的IO，即大量的阻塞。在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力，浪费在等待。</p>
<p>所以在IO密集型任务中使用多线程可以大大的加速程序运行，即使在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。</p>
<p>参考公式：CPU核数/1-阻塞系数      阻塞系数在0.8~0.9之间</p>
<p>比如8核CPU：8/1-0.9=80个线程数</p>
</li>
<li><p>CPU核数计算</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> processors = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        System.out.println(processors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></div></figure></li>
</ul>

        <h2 id="知识补充"   >
          <a href="#知识补充" class="heading-link"><i class="fas fa-link"></i></a><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2>
      
        <h3 id="阻塞队列"   >
          <a href="#阻塞队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3>
      
        <h4 id="阻塞队列的概念"   >
          <a href="#阻塞队列的概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#阻塞队列的概念" class="headerlink" title="阻塞队列的概念"></a>阻塞队列的概念</h4>
      <p>阻塞队列它是一种队列，是一种数据结构，阻塞队列在数据结构中所起的作用如下图所示：</p>
<p><img src="/mdimages/image-20210613135406120.png" alt="image-20210613135406120"></p>
<ul>
<li>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞。</li>
<li>当阻塞队列时满时，往队列里添加元素的操作将会被阻塞。</li>
<li>试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其它的线程往空的队列插入新的元素。</li>
<li>视图往已满的阻塞队列中添加元素的线程同样也会被阻塞，直到其它线程从队列中移除一个或者多个元素或者完全清空队列后使队列重新变得空闲起来后才继续新增。</li>
</ul>

        <h4 id="使用阻塞队列的好处"   >
          <a href="#使用阻塞队列的好处" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用阻塞队列的好处" class="headerlink" title="使用阻塞队列的好处"></a>使用阻塞队列的好处</h4>
      <p>在多线程环境下，所谓阻塞，在某些情况下会挂起线程(即阻塞)，一旦条件满足，被挂起的线程又会自动被唤醒。</p>
<p>而使用阻塞队列(BlockingQueue)，不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，这些操作都交给阻塞队列处理。</p>
<p>在JDK1.5前，在多线程环境下，我们都必须自己去控制这些细节，尤其还要兼顾效率和线程安全，会给我们的程序带来不小的复杂度。</p>

        <h4 id="BlockingQueue的核心方法"   >
          <a href="#BlockingQueue的核心方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#BlockingQueue的核心方法" class="headerlink" title="BlockingQueue的核心方法"></a>BlockingQueue的核心方法</h4>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">方法类型</th>
<th align="center">抛出异常</th>
<th align="center">特殊值</th>
<th align="center">阻塞</th>
<th align="center">超时</th>
</tr>
</thead>
<tbody><tr>
<td align="center">插入</td>
<td align="center">add(e)</td>
<td align="center">offer(e)</td>
<td align="center">put(e)</td>
<td align="center">offer(e,time,unit)</td>
</tr>
<tr>
<td align="center">移除</td>
<td align="center">remove()</td>
<td align="center">poll()</td>
<td align="center">take()</td>
<td align="center">pull(time,unit)</td>
</tr>
<tr>
<td align="center">检查</td>
<td align="center">element()</td>
<td align="center">peek()</td>
<td align="center">不可用</td>
<td align="center">不可用</td>
</tr>
</tbody></table></div>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">方法类型</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">抛出异常</td>
<td align="left">当阻塞队列满时，再往队列里add插入元素会抛出java.lang.IllegalStateException: Queue full；<br />当阻塞队列空时，在往队列里remove移除元素会抛出NoSuchElementException;</td>
</tr>
<tr>
<td align="center">特殊值</td>
<td align="left">插入方法offer(e)，成功返回true，失败返回false；<br />移除方法poll()，成功返回出队列的元素，队列里面没有就返回null;</td>
</tr>
<tr>
<td align="center">一直阻塞</td>
<td align="left">当阻塞队列满时，生产者线程继续往队列里put元素，队列会一直阻塞生产者线程直到put数据或者响应中断退出；<br />当阻塞队列空时，消费者线程试图从队列里take元素，队列会一直阻塞消费者线程直到队列可用；</td>
</tr>
<tr>
<td align="center">超时退出</td>
<td align="left">当阻塞队列满时，队列会阻塞生产者线程一定时间，超过限时后生产者线程会退出；<br />当阻塞队列空时，队列会阻塞消费者线程一定时间，超过限时后消费者线程会退出；</td>
</tr>
</tbody></table></div>
<p><img src="/mdimages/image-20210613144430983.png" alt="image-20210613144430983"></p>
<p>其中SynchronousQueue没有容量，与其他BlockingQueue不同，SynchronousQueue是一个不存储元素的BlockingQueue。每一个put操作必须要等待一个take操作，否则不能继续添加元素，反之亦然.</p>

        <h4 id="应用场景"   >
          <a href="#应用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4>
      <ul>
<li>生产者消费者模式</li>
<li>线程池</li>
<li>消息中间件</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal</title>
    <url>/2021/06/14/ThreadLocal/</url>
    <content><![CDATA[
        <h3 id="ThreadLocal"   >
          <a href="#ThreadLocal" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3>
      
        <h4 id="前言"   >
          <a href="#前言" class="heading-link"><i class="fas fa-link"></i></a><a href="#前言" class="headerlink" title="前言"></a>前言</h4>
      <p>多线程访问同一个共享变量容易出现并发问题，特别是多个线程需要对一个共享变量进行写入的时候，为了保证线程安全，一般需要在访问共享变量的时候进行适当的同步(加锁)。</p>

        <h4 id="ThreadLocal是什么"   >
          <a href="#ThreadLocal是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal是什么" class="headerlink" title="ThreadLocal是什么"></a>ThreadLocal是什么</h4>
      <p>从JDK1.2的版本开始就提供了java.lang.ThreadLocal，ThreadLocal为解决多线程程序的并发问题提供了一种新的思路。ThreadLocal一般称为线程本地变量，它是一种特殊的线程绑定机制，将变量与线程绑定在一起，为每一个线程维护一个独立的变量副本。也就是如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量副本，从而避免了线程安全问题。</p>
<span id="more"></span>


        <h4 id="ThreadLocal代码演示"   >
          <a href="#ThreadLocal代码演示" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal代码演示" class="headerlink" title="ThreadLocal代码演示"></a>ThreadLocal代码演示</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//资源类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; num = ThreadLocal.withInitial(()-&gt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num.set(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Resource resource = <span class="keyword">new</span> Resource();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        resource.setNum();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程：&quot;</span>+resource.getNum());</span><br><span class="line">    &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程：&quot;</span>+resource.getNum());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">A线程：<span class="number">1</span></span><br><span class="line">main线程：<span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></div></figure>

<p>结论</p>
<p>多个线程操作共享变量互不干扰。</p>

        <h4 id="ThreadLocal的数据结构"   >
          <a href="#ThreadLocal的数据结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal的数据结构" class="headerlink" title="ThreadLocal的数据结构"></a>ThreadLocal的数据结构</h4>
      <p><img src="/mdimages/image-20210614234128613.png" alt="image-20210614234128613"></p>
<p>Thread类中有一个类型为ThreadLocal.ThreadLocalMap的成员变量（实例变量）threadLocals，也就是说每个线程都有一个自己的ThreadLocalMap.</p>
<p>ThreadLocalMap是ThreadLocal类中的一个静态内部类，内部维护着一个Entry[] table，可以简单地认为key是ThreadLocal，value就是set方法放入的值(而实际上key并不是ThreadLocal本身，而是它的一个弱引用)。</p>
<p>每个线程在往ThreadLocal放值的时候，都会往自己的ThreadLocalMap里存放值，读数据的时候也是以ThreadLocal作为key，在ThreadLocalMap里找对应的值，从而实现线程隔离。</p>
<p>ThreadLocalMap有点类似HashMap的结构，只是HashMap是由数组+链表(或红黑树)实现的，而ThreadLocalMap中没有链表结构。</p>

        <h4 id="ThreadLocal-set-方法原理"   >
          <a href="#ThreadLocal-set-方法原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal-set-方法原理" class="headerlink" title="ThreadLocal.set()方法原理"></a>ThreadLocal.set()方法原理</h4>
      <p>源码：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line">      ......</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">            threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">            table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">            <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">            table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            setThreshold(INITIAL_CAPACITY);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//从当前线程中获取ThreadLocalMap</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="comment">//如果ThreadLocalMap为null则创建，否则进行ThreadLocalMap的set方法</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">      t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>重点在ThreadLocalMap的set方法</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Entry[] tab = table;</span><br><span class="line">     <span class="keyword">int</span> len = tab.length;</span><br><span class="line">     <span class="comment">//通过key计算在散列表中的对应位置</span></span><br><span class="line">     <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);  </span><br><span class="line">     <span class="comment">//遍历当前key值对应的槽中Entry数据为空，则说明散列数组这里没有数据冲突，跳出for循环，直接set数据到对应的槽中</span></span><br><span class="line">     <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">          e != <span class="keyword">null</span>;</span><br><span class="line">          e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">         ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">       <span class="comment">//进入循环体，说明key值对应的槽中Entry数据不为空</span></span><br><span class="line">         <span class="comment">//如果槽中已存在的Entry的key值即k == key(也即是说是同个ThreadLocal)，那么set操作就是一个替换操作，做替换逻辑，直接返回</span></span><br><span class="line">         <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">             e.value = value;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">//如果槽中已存在的Entry的key值即k == null,说明当前槽位的Entry是过期数据，执行replaceStaleEntry()替换过期数据方法，然后返回</span></span><br><span class="line">         <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">             replaceStaleEntry(key, value, i);</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//来到这里，说明key值对应的槽中Entry数据为null，那么直接创建一个新的Entry对象指向对应的槽位</span></span><br><span class="line">     tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">     <span class="comment">//执行++size操作，设置ThreadLocalMap的长度</span></span><br><span class="line">     <span class="keyword">int</span> sz = ++size;</span><br><span class="line">     <span class="comment">//调用cleanSomeSlots做一次启发式清理工作，清理散列数组中Entry的key过期的数据</span></span><br><span class="line">     <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">         <span class="comment">//如果清理完成，未清理任何数据，且size大于等于阈值（数组长度的2/3，一开始是16*2/3等于10），则进行rehash()操作</span></span><br><span class="line">         <span class="comment">//rehash中会先进行一轮探测式清理，清理过期key，清理完成后如果size &gt;= threshold - threshold / 4,就会执行扩容resize()。</span></span><br><span class="line">         rehash();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用expungeStaleEntries做一次探测式清理工作</span></span><br><span class="line">     expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Use lower threshold for doubling to avoid hysteresis</span></span><br><span class="line">     <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">         resize();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>总结：ThreadLocal的set方法，重点在ThreadLocalMap的set方法。</p>
<ol>
<li>首先计算当前set进来的threadLocal（key）在散列表中的对应位置，然后判断该槽位的Entry数据是否为空，如果为空说明散列数组没有数据冲突，跳出循环，直接set数据到对应的槽位中；</li>
<li>如果该槽位Entry数据不为空，那么首先判断该槽位的key值和set进来的key值是否相同，如果相同说明是一个替换操作，做替换逻辑然后直接返回；</li>
<li>如果不相同，接下来先判断该槽位的key是否为null，如果等于null，说明该槽位的Entry是过期数据，则执行替换过期数据逻辑，然后返回；</li>
<li>整个循环执行完毕后，继续往下执行说明向后迭代的过程中遇到了Entry为null的情况，那么直接新建一个Entry指向该槽位，然后设置threadLocalMap的长度加1；</li>
<li>然后做一次cleanSomeSlots启发式清理工作，清理散列数组中Entry的key过期的数据；</li>
<li>如果清理工作完成后，未清理到任何数据，且threadLocalMap的长度size超过了阈值(数组长度的2/3)，则进行rehash（）操作；</li>
<li>rehash（）中会先进行一轮探测式清理，清理过期key的数据，清理完成后如果threadLocalMap的长度size &gt;= threshold - threshold / 4(即大于等于3/4*threshold),那么就执行真正的扩容逻辑resize();</li>
</ol>

        <h4 id="ThreadLocal-get-方法原理"   >
          <a href="#ThreadLocal-get-方法原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal-get-方法原理" class="headerlink" title="ThreadLocal.get()方法原理"></a>ThreadLocal.get()方法原理</h4>
      <p>源码：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//获取当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">       <span class="comment">//从当前线程中获取ThreadLocalMap</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根据当前ThreadLocal实例查询其对应的Entry</span></span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//如果map为null，则执行setInitialValue()方法</span></span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">           <span class="comment">//通过key计算在散列表中的对应位置（即索引）</span></span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">            Entry e = table[i];</span><br><span class="line">            <span class="comment">//如果槽位Entry不为null并且该Entry.key和查找的key一致，则直接返回；</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">           <span class="comment">//如果槽位Entry不为null，但该Entry.key和查找的key不一致</span></span><br><span class="line">            <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//先获取当前槽位的key值；</span></span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">                <span class="comment">//如果当前槽位key值（k） 和 查找的key值一致，则返回</span></span><br><span class="line">                <span class="keyword">if</span> (k == key)</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">                <span class="comment">//如果当前的槽位key值（k）为null，则进行一次探测式数据清理</span></span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">                    expungeStaleEntry(i);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//如果当前的槽位key值（k）不为null，则获取下一槽位的索引</span></span><br><span class="line">                    i = nextIndex(i, len);</span><br><span class="line">                <span class="comment">//根据获取到的下一槽位的索引，查询对应的槽位Entry</span></span><br><span class="line">                e = tab[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果当前key对应的槽位Entry为null，那么直接返回null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没重写initialValue方法那么直接返回null</span></span><br><span class="line">        T value = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>总结：ThreadLocal的get方法，重点在ThreadLocalMap的getEntry方法。</p>
<ol>
<li><p>首先通过查找key值（threadLocal）计算出散列表中的槽位，如果槽位的Entry为null，那么直接返回null；</p>
</li>
<li><p>如果不为null，那么判断该槽位的Entry的key和查找的key是否一致，如果一致则直接返回；</p>
</li>
<li><p>如果该槽位key值为null，那么进行一次探测式数据清理；</p>
</li>
<li><p>如果不为null，则获取下一槽位的Entry继续对比；</p>
</li>
<li><p>直到整个散列表数组对比完都没匹配上，那么同样返回null；</p>
</li>
</ol>

        <h4 id="ThreadLocalMap的Hash算法"   >
          <a href="#ThreadLocalMap的Hash算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocalMap的Hash算法" class="headerlink" title="ThreadLocalMap的Hash算法"></a>ThreadLocalMap的Hash算法</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =</span><br><span class="line">        <span class="keyword">new</span> AtomicInteger();</span><br></pre></td></tr></table></div></figure>

<p>ThreadLocalMap中的hash算法很简单，最关键的就是threadLocalHashCode 值的计算，ThreadLocal中有一个属性HASH_INCREMENT = 0x61c88647，这个值很特殊，它是斐波那契数也叫黄金分割数。每当创建一个ThreadLocal对象，这个ThreadLocal.nextHashCode这个值就会增长 0x61c88647。</p>

        <h4 id="ThreadLocalMap如何处理Hash冲突"   >
          <a href="#ThreadLocalMap如何处理Hash冲突" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocalMap如何处理Hash冲突" class="headerlink" title="ThreadLocalMap如何处理Hash冲突"></a>ThreadLocalMap如何处理Hash冲突</h4>
      <p>虽然ThreadLocalMap中使用了黄金分割数来作为hash计算因子，大大减少了Hash冲突的概率，但是仍然会存在冲突。当遇到冲突的时候，ThreadLocalMap就会线性向后查找，一直找到Entry为null的槽位才会停止查找，将当前元素放入此槽位中。当在迭代过程中遇到Entry不为null且key值相等的情况，那么直接替换，如果Entry中的key为null，那么就会执行一次探测式清理数据操作。</p>

        <h4 id="ThreadLocalMap过期key的启发式清理和探测式清理"   >
          <a href="#ThreadLocalMap过期key的启发式清理和探测式清理" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocalMap过期key的启发式清理和探测式清理" class="headerlink" title="ThreadLocalMap过期key的启发式清理和探测式清理"></a>ThreadLocalMap过期key的启发式清理和探测式清理</h4>
      <ul>
<li><p>启发式清理，也就是cleanSomeSlots方法，是以当前Entry往后清理，遇到值为null则结束清理，属于线性探测清理。</p>
</li>
<li><p>探测式清理，也就是expungeStaleEntry方法，遍历散列数组，从开始位置向后探测清理过期数据，将过期数据的Entry设置为null，沿途中碰到未过期的数据则将此数据rehash后重新在table数组中定位，如果定位的位置已经有了数据，则会将未过期的数据放在最靠近此位置的Entry=null的桶中，使rehash后Entry数据距离正确的桶的位置更近一些。</p>
</li>
</ul>

        <h4 id="ThreadLocalMap扩容机制"   >
          <a href="#ThreadLocalMap扩容机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocalMap扩容机制" class="headerlink" title="ThreadLocalMap扩容机制"></a>ThreadLocalMap扩容机制</h4>
      <p>在ThreadLocalMap的set()方法最后，如果执行完启发式清理工作后，未清理到任何数据，且当前散列数组中Entry的数量已经达到了列表的扩容阈值(len*2/3)，就开始执行rehash（）方法。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">    rehash();</span><br></pre></td></tr></table></div></figure>

<p>接下来看rehash()的实现：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use lower threshold for doubling to avoid hysteresis</span></span><br><span class="line">    <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">        resize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>rehash方法首先会进行探测式清理工作，从数组table的起始位置往后清理，清理完成之后，table中可能有一些key为null的Entry数据被清理掉，所以此时通过判断 size &gt;= threshold - threshold / 4 也就是 size &gt;= threshold * 3/4 来决定是否扩容。</p>
<p>所以要清楚，执行rehash()的阈值是 sz &gt;= threshold ，执行真正扩容resize()的阈值是 size &gt;= threshold - threshold / 4。</p>
<p>接着看 resize()方法的实现：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Double the capacity of the table.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Entry[] oldTab = table;</span><br><span class="line">     <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">     <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</span><br><span class="line">     Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</span><br><span class="line">     <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">         Entry e = oldTab[j];</span><br><span class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">             ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">             <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">                 <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</span><br><span class="line">                     h = nextIndex(h, newLen);</span><br><span class="line">                 newTab[h] = e;</span><br><span class="line">                 count++;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     setThreshold(newLen);</span><br><span class="line">     size = count;</span><br><span class="line">     table = newTab;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure>

<p>从源码中可以看出，每次扩容后的容量为原来的2倍，扩容后的table的大小为 oldLen * 2，然后遍历老的散列表，重新计算hash位置，然后放到新的table数组中，如果出现hash冲突则往后找最近的entry为null的槽位，遍历完成之后，oldTab中所有的entry数据都已经放入到新的table中了。重新计算table下一次扩容的阈值。</p>

        <h4 id="ThreadLocal的注意事项"   >
          <a href="#ThreadLocal的注意事项" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal的注意事项" class="headerlink" title="ThreadLocal的注意事项"></a>ThreadLocal的注意事项</h4>
      <ul>
<li><p>读取到脏数据</p>
<p>线程复用会造成脏数据。由于线程池会复用Thread对象，因此Thread类的成员变量threadLocals也会被复用。如果在线程run()方法中不显示调用remove()清理与线程相关的ThreadLocal信息，并且下一个线程不调用set()设置初始值，就可能get()到上个线程设置的值。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            threadPool.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span>(finalI == <span class="number">0</span>) &#123;</span><br><span class="line">                    threadLocal.set(finalI);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;     &quot;</span>+threadLocal.get());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>     <span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>     <span class="keyword">null</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>     <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></div></figure></li>
<li><p>内存泄漏</p>
<p>ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有持有外部强引用，那么系统发生GC的时候，这个ThreadLocal就会被回收，导致ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，导致value永远存在无法被回收，出现内存泄漏。</p>
<p>其实，ThreadLocalMap的get、set、remove方法在执行的时候都会清除ThreadLocalMap里面所有key为null的value数据，所以每次用完ThreadLocal后，都要及时显式的调用remove方法清理。</p>
</li>
</ul>

        <h4 id="使用场景"   >
          <a href="#使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4>
      <ol>
<li>为每个线程分配一个JDBC连接Connection，这样就可以保证每个线程都在各自的Connection上进行数据库的操作，不会出现A线程关了B线程正在使用的Connection;</li>
<li>JDK1.7的SimpleDateFormat不是线程安全的，可以用ThreadLocal来解决；当然JDK1.8开始java.time.format.DateTimeFormatter是线程安全的。</li>
<li>应用于变量在线程间隔离但在方法或类间共享的场景。</li>
</ol>

        <h4 id="思考"   >
          <a href="#思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#思考" class="headerlink" title="思考"></a>思考</h4>
      <p>ThreadLocal的key是弱引用，那么在ThreadLocal.get()的时候，发生GC之后，key是否是null？</p>
<p>首先我们回忆一下，使用WeakReference修饰的对象被称为弱引用，只要发生垃圾回收，若这个对象只持有弱引用，那么就会被回收。</p>
<p>这个问题刚开始看，如果没注意，弱引用，而且还发生垃圾回收，那么肯定会觉得key是null，但是题目中说了在ThreadLocal.get()操作，从源码中可以知道ThreadLocal的get方法是一个实例方法，那么ThreadLocal.get()操作，其实还是有强引用存在的，所以key并不会被回收，也就不会为null。如果我们的强引用不存在的话，那么key就会被回收，也就是会出现value没被回收，而key被回收，导致value永远存在，出现内存泄漏。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈JDK1.6及以上版本对synchronized的优化</title>
    <url>/2021/06/21/JDK1.6%E5%BC%80%E5%A7%8Bsynchronized%E7%9A%84%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[
        <h3 id="概叙"   >
          <a href="#概叙" class="heading-link"><i class="fas fa-link"></i></a><a href="#概叙" class="headerlink" title="概叙"></a>概叙</h3>
      <p>在JDK最开始的时候synchronized属于重量级的锁，每次加锁都是通过操作系统来申请锁，所以导致效率比较低，但在JDK1.6及以上版本中对它进行了优化，为减少获得锁和释放锁带来的性能消耗引入了偏向锁和轻量级锁，以及锁的存储结构和升级过程，不再是一开始就向操作系统申请锁，而是分成偏向锁 - 轻量级锁 - 重量级锁三个过程。</p>

        <h3 id="实现同步的基础"   >
          <a href="#实现同步的基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现同步的基础" class="headerlink" title="实现同步的基础"></a>实现同步的基础</h3>
      <p>Java中的每个对象都可以作为锁。</p>
<ul>
<li>普通同步方法，锁是当前实例对象。</li>
<li>静态同步方法，锁是当前类的Class对象。</li>
<li>对于同步方法块，锁是synchronized括号里的对象。</li>
</ul>
<p>一个线程试图访问同步方法或者同步代码块时，必须获取锁，在退出或者抛出异常时，必须释放锁。</p>
<span id="more"></span>


        <h3 id="synchronized的特点"   >
          <a href="#synchronized的特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#synchronized的特点" class="headerlink" title="synchronized的特点"></a>synchronized的特点</h3>
      <ul>
<li>原子性，不可分割，要么全部执行成功，要么全部失败</li>
<li>可见性，一个线程对共享变量的修改，其他线程能够立马看见</li>
<li>有序性，代码执行的逻辑是按照编写时的顺序执行的(禁止指令重排)</li>
</ul>

        <h3 id="实现方式"   >
          <a href="#实现方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3>
      <p>synchronized的背后正是利用了Monitor锁对象来实现同步方法和同步代码块，但是两者的实现细节不一样。</p>
<ul>
<li>同步代码块：通过使用monitorenter和monitorexit指令实现。</li>
<li>同步方法：标识ACC_SYNCHRONIZED修饰。</li>
</ul>
<p>同步代码块代码演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HelloSynchronized helloSynchronized = <span class="keyword">new</span> HelloSynchronized();</span><br><span class="line">        helloSynchronized.print1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSynchronized</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;同步代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;同步方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>输入命令 javap -c D:\workproject\MyBatisProject\target\classes\com\test\mybatis\test\HelloSynchronized.class 查看编译后的字节码</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部分编译后的字节码 </span></span><br><span class="line">Compiled from <span class="string">&quot;HelloSynchronized.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">test</span>.<span class="title">mybatis</span>.<span class="title">test</span>.<span class="title">HelloSynchronized</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> com.test.mybatis.test.HelloSynchronized();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: dup</span><br><span class="line">       <span class="number">2</span>: astore_1</span><br><span class="line">       <span class="number">3</span>: monitorenter</span><br><span class="line">       <span class="number">4</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       <span class="number">7</span>: ldc           #<span class="number">3</span>                  <span class="comment">// String 同步代码块</span></span><br><span class="line">       <span class="number">9</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">12</span>: aload_1</span><br><span class="line">      <span class="number">13</span>: monitorexit</span><br><span class="line">      <span class="number">14</span>: goto          <span class="number">22</span></span><br><span class="line">      <span class="number">17</span>: astore_2</span><br><span class="line">      <span class="number">18</span>: aload_1</span><br><span class="line">      <span class="number">19</span>: monitorexit</span><br><span class="line">      <span class="number">20</span>: aload_2</span><br><span class="line">      <span class="number">21</span>: athrow</span><br><span class="line">      <span class="number">22</span>: <span class="keyword">return</span></span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">4</span>    <span class="number">14</span>    <span class="number">17</span>   any</span><br><span class="line">          <span class="number">17</span>    <span class="number">20</span>    <span class="number">17</span>   <span class="function">any</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       <span class="number">3</span>: ldc           #<span class="number">5</span>                  <span class="comment">// String 同步方法</span></span><br><span class="line">       <span class="number">5</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">       <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>同步方法代码演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HelloSynchronized helloSynchronized = <span class="keyword">new</span> HelloSynchronized();</span><br><span class="line">        helloSynchronized.print2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSynchronized</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;同步代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;同步方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>输入命令javap -verbose D:\workproject\MyBatisProject\target\classes\com\test\mybatis\test\HelloSynchronized.class查看编译后的字节码</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部分编译后的字节码  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">5</span>                  <span class="comment">// String 同步方法</span></span><br><span class="line">         <span class="number">5</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">12</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">8</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">               <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/test/mybatis/test/HelloSynchronized;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>总结：</p>
<p>同步代码块：monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit指令总共出现了2次，第一次是在编译后插入到同步代码块的结束处，第二次是同步代码块的异常处，保证无论正常或者异常退出都能释放锁。</p>
<p>同步方法：被synchronized修饰的方法会有一个ACC_SYNCHRONIZED标志。当某个线程要访问某个同步方法时，会先检查方法是否有ACC_SYNCHRONIZED标志，如果有则需要先获得monitor锁才能开始执行方法，执行完后再释放monitor锁。</p>

        <h3 id="在HotSpot虚拟机中，对象在内存中存储的布局可以分为三个区域：对象头，实例数据和对齐填充。"   >
          <a href="#在HotSpot虚拟机中，对象在内存中存储的布局可以分为三个区域：对象头，实例数据和对齐填充。" class="heading-link"><i class="fas fa-link"></i></a><a href="#在HotSpot虚拟机中，对象在内存中存储的布局可以分为三个区域：对象头，实例数据和对齐填充。" class="headerlink" title="在HotSpot虚拟机中，对象在内存中存储的布局可以分为三个区域：对象头，实例数据和对齐填充。"></a>在HotSpot虚拟机中，对象在内存中存储的布局可以分为三个区域：对象头，实例数据和对齐填充。</h3>
      <p><img src="/mdimages/image-20210622002758920.png" alt="image-20210622002758920"></p>

        <h4 id="Java对象头"   >
          <a href="#Java对象头" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h4>
      <p>对象头中包含两个部分的信息：Mark Word（运行时数据）和类型指针（Class Pointer）.</p>
<p>如果是数组对象的话，对象头就会多一部分信息是存储数组的长度（Length）.</p>
<p>重点：多线程下synchronized的加锁就是对同一个对象的对象头中的Mark Word中的变量进行CAS操作(下面会详细说明)。</p>

        <h5 id="Mark-Word"   >
          <a href="#Mark-Word" class="heading-link"><i class="fas fa-link"></i></a><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h5>
      <p>Mark Word主要存储对象自身的运行时数据，比如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等。</p>
<p><img src="/mdimages/image-20210622001658496.png" alt="image-20210622001658496"></p>

        <h5 id="类型指针-Class-Pointer"   >
          <a href="#类型指针-Class-Pointer" class="heading-link"><i class="fas fa-link"></i></a><a href="#类型指针-Class-Pointer" class="headerlink" title="类型指针(Class Pointer)"></a>类型指针(Class Pointer)</h5>
      <p>类型指针用来指向对象对应到的Class对象(其对应的元数据)内存地址，虚拟机通过这个指针确定该对象是哪个类的实例。</p>

        <h5 id="数组长度-Length-数组对象才有"   >
          <a href="#数组长度-Length-数组对象才有" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组长度-Length-数组对象才有" class="headerlink" title="数组长度(Length,数组对象才有)"></a>数组长度(Length,数组对象才有)</h5>
      
        <h4 id="实例数据"   >
          <a href="#实例数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h4>
      <p>实例数据才是存储对象真正存储的有效信息（即程序代码中定义的各种类型的字段内容）。</p>
<p>无论是父类继承下来的，还是在子类定义的，都记录下来。</p>

        <h4 id="对齐填充"   >
          <a href="#对齐填充" class="heading-link"><i class="fas fa-link"></i></a><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h4>
      <p>这部分不是必然存在的，只是位数不够拿来填充，为了整齐，仅仅起到占位符的作用，因为HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也即是说，对象的大小必须是8字节的整数倍。</p>

        <h3 id="优化后synchronized锁的分类"   >
          <a href="#优化后synchronized锁的分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#优化后synchronized锁的分类" class="headerlink" title="优化后synchronized锁的分类"></a>优化后synchronized锁的分类</h3>
      <ul>
<li>无锁状态</li>
<li>偏向锁状态</li>
<li>轻量级锁状态</li>
<li>重量级锁状态</li>
</ul>
<p>锁可以升级，但不能降级，即：无锁 - &gt; 偏向锁 - &gt; 轻量级锁 - &gt; 重量级锁 </p>
<p><img src="/mdimages/image-20210622210459247.png" alt="image-20210622210459247"></p>
<p>从上图可以看出，在对象头中的Mark Word中每个锁状态的内容</p>
<p>无锁状态：是否是偏向锁位 是 “0”，锁标志位是 “01”；</p>
<p>偏向锁状态：是否是偏向锁位 是 “1”，锁标志位是 “01”；</p>
<p>轻量级锁状态：指向线程栈中Lock Record的指针，锁标志位是 “00”；</p>
<p>重量级锁状态：指向互斥量(重量级锁)的指针，锁标志位是 “10”；</p>

        <h3 id="偏向锁"   >
          <a href="#偏向锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3>
      <p>大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低，从JDK1.6开始引入了锁优化。偏向锁是针对于一个线程而已的，就是锁偏向于第一个获取它的线程，如果在接下来的执行过程中，该锁没有被其它的线程获取，则持有偏向锁的线程将不需要再进行同步了。</p>

        <h4 id="偏向锁的加锁"   >
          <a href="#偏向锁的加锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#偏向锁的加锁" class="headerlink" title="偏向锁的加锁"></a>偏向锁的加锁</h4>
      <p>当一个线程访问同步块并获取锁时，会在锁对象的对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程进入和退出同步块时不需要进行CAS操作来加锁解锁，只需要验证一下锁对象的对象头的Mark Word里是否存储着指向当前线程的偏向锁(也既是对象头的Mark Word中的线程ID是当前线程)，如果验证成功，表示线程已经获得了锁；如果验证失败，则需要再判断MarkWord中偏向锁的标识位是否设置成1（表示当前是偏向锁），如果没有设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将锁对象的对象头的偏向锁指向当前线程。</p>

        <h4 id="偏向锁的撤销"   >
          <a href="#偏向锁的撤销" class="heading-link"><i class="fas fa-link"></i></a><a href="#偏向锁的撤销" class="headerlink" title="偏向锁的撤销"></a>偏向锁的撤销</h4>
      <p>偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，偏向锁的撤销需要等到全局安全点(在这个时间点上没有正在执行的字节码)，首先会暂停持有偏向锁的线程，然后检查持有偏向锁的线程是否存活，如果线程不处于活动状态，则将锁对象的对象头设置为无锁状态；如果线程仍然存活，则锁对象的对象头中的Mark Word和栈中的锁记录要么重新偏向于其它线程，要么恢复到无锁状态，最后唤醒暂停的线程(释放偏向锁的线程)。</p>

        <h4 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h4>
      <p>偏向锁在JDK1.6及更高版本中是默认开启的，但是它在程序启动几秒后才激活，可以使用-XX:BiasedLockingStartupDelay = 0 来关闭偏向锁的启动延迟，也可以使用-XX:-UseBiasedLocking = false 来关闭偏向锁，那么程序会直接进入轻量级锁状态。</p>

        <h3 id="轻量级锁"   >
          <a href="#轻量级锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3>
      <p>当出现有两个线程来竞争锁的时候，那么偏向锁就失效了，此时锁就会膨胀，升级为轻量级锁。</p>

        <h4 id="轻量级锁加锁"   >
          <a href="#轻量级锁加锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#轻量级锁加锁" class="headerlink" title="轻量级锁加锁"></a>轻量级锁加锁</h4>
      <p>线程在执行同步块之前，JVM会先在当前线程的栈帧中创建存储锁记录的空间（LockRecord），并将对象头中的MarkWord复制到锁记录中，然后线程尝试使用CAS将对象头中的MarkWord替换为指向锁记录的指针，如果成功，当前线程获得锁；如果失败，表示其他线程竞争锁，当前线程便尝试使用CAS自旋来获取锁，之后再来的线程，发现是轻量级锁，就开始进行自旋。</p>
<p>（JDK自旋默认最大值是10次，JDK6开始对自旋进行了优化，自旋的时间不再是固定的，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的，比如当前线程在刚刚成功获取过自旋锁，那么JVM就会认为这次自旋也可能会成功，那么循环的次数就可以多进行几次，这就是自适应自旋，有了自适应自旋就不用我们设置最大循环次数，而是让JVM监控动态设置）。</p>

        <h4 id="轻量级锁解锁"   >
          <a href="#轻量级锁解锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#轻量级锁解锁" class="headerlink" title="轻量级锁解锁"></a>轻量级锁解锁</h4>
      <p>轻量级锁解锁时，会使用原子的CAS操作将当前线程的锁记录替换到对象头，如果成功，表示没有竞争发生；如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。</p>

        <h4 id="总结-1"   >
          <a href="#总结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4>
      <p>加锁过程, 有线程A和线程B来竞争对象c的锁(如: synchronized(c){} ), 这时线程A和线程B同时将对象c的MarkWord复制到自己的锁记录中, 两者竞争去获取锁, 假设线程A成功获取锁, 并将对象c的对象头中的线程ID(MarkWord中)修改为指向自己的锁记录的指针, 这时线程B仍旧通过CAS去获取对象c的锁, 因为对象c的MarkWord中的内容已经被线程A改了, 所以获取失败. 此时为了提高获取锁的效率, 线程B会循环去获取锁, 这个循环是有次数限制的, 如果在循环结束之前CAS操作成功, 那么线程B就获取到锁, 如果循环结束依然获取不到锁, 则获取锁失败, 对象c的MarkWord中的记录会被修改为重量级锁, 然后线程B就会被挂起, 之后有线程C来获取锁时, 看到对象c的MarkWord中的是重量级锁的指针, 说明竞争激烈, 直接挂起.</p>
<p>解锁过程, 线程A尝试使用CAS将对象c的MarkWord改回自己栈中复制的那个MarkWord, 因为对象c中的MarkWord已经被指向为重量级锁了, 所以CAS失败. 线程A会释放锁并唤起等待的线程, 进行新一轮的竞争.</p>

        <h3 id="重量级锁"   >
          <a href="#重量级锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3>
      <p> 重量级锁就是最开始的线程阻塞操作，又叫悲观锁，对象头中MarkWord的锁标志位为10，它锁住的是一整段代码，当整段代码执行完后，其他线程才能获得锁，继续执行。</p>

        <h3 id="锁升级流程图"   >
          <a href="#锁升级流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁升级流程图" class="headerlink" title="锁升级流程图"></a>锁升级流程图</h3>
      <p><img src="/mdimages/image-20210622233415801.png" alt="image-20210622233415801"></p>

        <h3 id="三者的优缺点"   >
          <a href="#三者的优缺点" class="heading-link"><i class="fas fa-link"></i></a><a href="#三者的优缺点" class="headerlink" title="三者的优缺点"></a>三者的优缺点</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">锁</th>
<th align="center">优点</th>
<th align="center">缺点</th>
<th align="center">适合场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">偏向锁</td>
<td align="center">加锁和解锁不需要额外的消耗，和执行非同步代码方法的性能差不多</td>
<td align="center">如果线程间存在锁竞争，会带来额外锁撤销的消耗</td>
<td align="center">适用于只有一个线程访问的同步场景</td>
</tr>
<tr>
<td align="center">轻量级锁</td>
<td align="center">竞争锁的线程不会阻塞，提高了程序的响应速度</td>
<td align="center">如果始终获取不到锁的线程，会自旋，带来CPU的消耗</td>
<td align="center">追求响应时间，同步快执行速度非常快的场景</td>
</tr>
<tr>
<td align="center">重量级锁</td>
<td align="center">线程竞争不使用自旋，不会消耗CPU</td>
<td align="center">线程堵塞，响应时间缓慢</td>
<td align="center">追求吞吐量，同步快执行时间速度较长的场景</td>
</tr>
</tbody></table></div>

        <h3 id="锁优化之锁消除"   >
          <a href="#锁优化之锁消除" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁优化之锁消除" class="headerlink" title="锁优化之锁消除"></a>锁优化之锁消除</h3>
      <p>锁消除：锁消除是Java虚拟机在JIT编译时，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过锁消除，可以节省毫无意义的请求锁时间。</p>
<p>当一段代码中加了锁，但是通过JVM分析，他是线程安全的，那么JVM会对这些同步锁进行锁消除，也就是取消加锁操作。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(String a,String b)</span></span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">     sb.append(a);                            </span><br><span class="line">     sb.append(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//StringBuffer是线程安全的，其方法都被synchronized修饰，是同步的，JVM会分析sb引用只会在append方法中使用，不可能被其他线程引用(局部变量，属栈私有)，因此sb是不可能共享资源的，JVM会自动消除StringBuffer对象内部的锁。</span></span><br></pre></td></tr></table></div></figure>




        <h3 id="锁优化之锁粗化"   >
          <a href="#锁优化之锁粗化" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁优化之锁粗化" class="headerlink" title="锁优化之锁粗化"></a>锁优化之锁粗化</h3>
      <p>锁粗化：当JVM检测到一段连续的多次操作都在对同一个对象多次加锁，那么JVM可能会优化成对整段加一个锁，没有把加锁的操作分的那么细，所以叫锁粗化。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">append</span><span class="params">(String a)</span></span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">        sb.append(a);       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JVM检测分析这一连串的操作都是对同一个对象加锁，循环体中如果没有锁粗化的话那么就要执行100次加锁解锁操作，此时JVM就会将加锁的范围粗化到这一连串的操作的外部(比如for循环体外)，使得这一连串操作只需要加一次锁即可。</span></span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM之逃逸分析</title>
    <url>/2021/06/23/JVM%E4%B9%8B%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[
        <h3 id="逃逸"   >
          <a href="#逃逸" class="heading-link"><i class="fas fa-link"></i></a><a href="#逃逸" class="headerlink" title="逃逸"></a>逃逸</h3>
      <p>当一个对象的指针被多个方法或者线程引用时，我们称这个指针发生了逃逸，一般情况返回对象、对全局变量的赋值一般都会发生逃逸现象。</p>
<p>逃逸分为两种：</p>
<ul>
<li>方法逃逸：当一个对象在方法中被定义后，可能作为调用参数被外部方法所引用。</li>
<li>线程逃逸：通过赋值给类变量或者作为实例变量在其他线程中可以被访问到。</li>
</ul>

        <h3 id="逃逸分析"   >
          <a href="#逃逸分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3>
      <p>Java中对象的创建一般会由堆内存去分配内存空间来进行存储，在堆内存空间不足的时候，GC便会对堆内存进行垃圾回收，如果GC运行的次数过多，便会影响程序的性能，所以“逃逸分析”从<font color="red">JDK1.6开始引入</font>，在<font color="red">JDK1.7开始默认开启逃逸分析</font>，它的目的就是判断哪些对象是可以存储在栈内存中而不用存储在堆内存中的，从而让其随着线程的销毁而销毁，进而减少了GC发生的频率。</p>
<span id="more"></span>

<p>简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在Java堆上分配内存的一项技术。</p>
<p>在方法中创建对象之后，如果这个对象除了在方法体中还在其他地方被引用了，此时如果方法执行完，由于该对象有被引用，所以GC有可能是无法立即回收的，此时便成为内存逃逸现象。</p>

        <h3 id="逃逸分析参数设置"   >
          <a href="#逃逸分析参数设置" class="heading-link"><i class="fas fa-link"></i></a><a href="#逃逸分析参数设置" class="headerlink" title="逃逸分析参数设置"></a>逃逸分析参数设置</h3>
      <ul>
<li>开启逃逸分析：-XX:+DoEscapeAnalysis</li>
<li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li>
</ul>
<p>JDK1.7开始默认开启逃逸分析</p>
<p>代码演示（以主流JDK1.8为准）：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//让线程好好睡眠</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Thread.sleep(<span class="number">100000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">=======================================================================================</span><br><span class="line"><span class="comment">//使用java -version 查看当前JDK版本</span></span><br><span class="line">D:\workproject\designDemo&gt;java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_144&quot;</span></span><br><span class="line">Java(TM) <span class="function">SE Runtime <span class="title">Environment</span> <span class="params">(build <span class="number">1.8</span><span class="number">.0_144</span>-b01)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(build <span class="number">25.144</span>-b01, mixed mode)</span></span></span><br><span class="line"><span class="function"><span class="comment">//使用jps -l 命令查看java进程号</span></span></span><br><span class="line"><span class="function">D:\workproject\designDemo&gt;jps -l</span></span><br><span class="line"><span class="function">20116</span></span><br><span class="line"><span class="function">18040 sun.tools.jps.Jps</span></span><br><span class="line"><span class="function">11124 com.test.demot.Test</span></span><br><span class="line"><span class="function">2396 org.jetbrains.jps.cmdline.Launcher</span></span><br><span class="line"><span class="function"><span class="comment">//使用jinfo -flag DoEscapeAnalysis 查看是否开启了逃逸分析</span></span></span><br><span class="line"><span class="function">D:\workproject\designDemo&gt;jinfo -flag DoEscapeAnalysis 11124</span></span><br><span class="line"><span class="function">-XX:+DoEscapeAnalysis</span></span><br><span class="line"><span class="function"><span class="comment">//从结果中可以看出 -XX:+DoEscapeAnalysis 是默认开启的</span></span></span><br></pre></td></tr></table></div></figure>


        <h3 id="逃逸分析的作用"   >
          <a href="#逃逸分析的作用" class="heading-link"><i class="fas fa-link"></i></a><a href="#逃逸分析的作用" class="headerlink" title="逃逸分析的作用"></a>逃逸分析的作用</h3>
      <p>逃逸分析的作用：就是筛选出没有发生逃逸的对象，从而对它们进行三个方面的优化：（1）<font color="red">锁消除</font>、（2）<font color="red">标量替换</font>、（3）<font color="red">栈内存分配</font></p>

        <h4 id="锁消除（同步消除）"   >
          <a href="#锁消除（同步消除）" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁消除（同步消除）" class="headerlink" title="锁消除（同步消除）"></a>锁消除（同步消除）</h4>
      <p>因为同步锁是非常消耗性能的，所以当编译器确定一个对象没有发生逃逸时，它便会移除该对象的同步锁。</p>
<p>在<font color="red">JDK1.8</font>是默认开启的，但是要建立在已开启逃逸分析的基础上。</p>
<p>开启锁消除：-XX:+EliminateLocks</p>
<p>关闭锁消除：-XX:-EliminateLocks</p>

        <h4 id="标量替换"   >
          <a href="#标量替换" class="heading-link"><i class="fas fa-link"></i></a><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h4>
      <p>标量：基础类型和对象的引用可以理解为标量，它们不能被进一步分解。</p>
<p>聚合量：能被进一步分解的就是聚合量，比如：对象。</p>
<p>对象是聚合量，它可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做标量替换。</p>
<p>所以，如果一个对象没有发生逃逸，那压根就不用创建它了，只会在栈或者寄存器上创建它用到的成员变量，节省内存空间，也提升应用程序性能。</p>
<p>标量替换在<font color="red">JDK1.8</font>中也是默认开启的，但是同样也要建立在已开启逃逸分析的基础上。</p>
<p>开启标量替换：-XX:+EliminateAllocations</p>
<p>关闭标量替换：-XX:-EliminateAllocations</p>

        <h4 id="栈内存分配（专业术语：栈上分配）"   >
          <a href="#栈内存分配（专业术语：栈上分配）" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈内存分配（专业术语：栈上分配）" class="headerlink" title="栈内存分配（专业术语：栈上分配）"></a>栈内存分配（专业术语：栈上分配）</h4>
      <p>栈内存分配，就是将原本分配在堆内存中的对象转而分配在栈内存上，这样就可以减少堆内存的占用，从而减少GC的频次。</p>

        <h3 id="逃逸分析测试"   >
          <a href="#逃逸分析测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#逃逸分析测试" class="headerlink" title="逃逸分析测试"></a>逃逸分析测试</h3>
      
        <h4 id="逃逸分析开启与关闭测试"   >
          <a href="#逃逸分析开启与关闭测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#逃逸分析开启与关闭测试" class="headerlink" title="逃逸分析开启与关闭测试"></a>逃逸分析开启与关闭测试</h4>
      <p>代码演示：</p>
<p>循环200W次调用createPerson()方法，createPerson()方法的作用仅仅是简单创建一个对象，但是这个对象是属于方法内部的(局部变量)并且没有作为其他方法的调用参数，所以是未逃逸的，理论上JVM是会对其进行优化。下面是开启逃逸分析和关闭逃逸分析之后的比较：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000000</span>; i++) &#123;</span><br><span class="line">            createPerson();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//让线程好好睡眠1小时，方便对它进行分析</span></span><br><span class="line">        TimeUnit.HOURS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//getter seeter方法......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>1、使用JDK1.8环境，JDK1.8是默认开启逃逸分析</p>
<p><img src="/mdimages/image-20210624225703954.png" alt="image-20210624225703954"></p>
<p>从运行结果来看，耗时5毫秒；</p>
<p><img src="/mdimages/image-20210624225805365.png" alt="image-20210624225805365"></p>
<p>使用jmap命令打印堆内存中对象的统计信息，可以看到循环200万次，创建10W个左右的对象；</p>
<p>2、使用JDK1.8环境，JDK1.8是默认开启逃逸分析，所以需要使用命令-XX:-DoEscapeAnalysis来关闭逃逸分析；</p>
<p><img src="/mdimages/image-20210624225617447.png" alt="image-20210624225617447"></p>
<p>从运行结果来看，耗时25毫秒；</p>
<p><img src="/mdimages/image-20210624225530869.png" alt="image-20210624225530869"></p>
<p>使用jmap命令打印堆内存中对象的统计信息，可以看到循环200万次，创建200W个的对象；</p>
<p>小结：无论是从代码的执行时间或者是从堆内存中对象的统计信息来分析，在上述场景下，开启逃逸分析是有性能优化的。</p>

        <h4 id="标量替换开启与关闭测试"   >
          <a href="#标量替换开启与关闭测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#标量替换开启与关闭测试" class="headerlink" title="标量替换开启与关闭测试"></a>标量替换开启与关闭测试</h4>
      <p>代码运行同上，主要通过参数-XX:+EliminateAllocations的开启和关闭来观察效果</p>
<p>1、使用JDK1.8环境，JDK1.8是默认开启标量替换</p>
<p><img src="/mdimages/image-20210624231020275.png" alt="image-20210624231020275"></p>
<p><img src="/mdimages/image-20210624231226837.png" alt="image-20210624231226837"></p>
<p>从运行结果来看，耗时5毫秒，并且堆内存创建的person对象是9万多个；</p>
<p>2、使用JDK1.8环境，JDK1.8是默认开启标量替换，所以需要使用命令-XX:-EliminateAllocations来关闭标量替换；</p>
<p><img src="/mdimages/image-20210624230735372.png" alt="image-20210624230735372"></p>
<p><img src="/mdimages/image-20210624230910677.png" alt="image-20210624230910677"></p>
<p>从运行结果来看，耗时27毫秒，并且堆内存创建的person对象是200万个；</p>
<p>小结：从上述场景我们也可以看出，在开启逃逸分析的基础上，对于标量替换的开启和关闭对于性能的影响也是满大的。</p>

        <h4 id="锁消除开启与关闭测试"   >
          <a href="#锁消除开启与关闭测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁消除开启与关闭测试" class="headerlink" title="锁消除开启与关闭测试"></a>锁消除开启与关闭测试</h4>
      <p>演示代码：</p>
<p><img src="/mdimages/image-20210624233323546.png" alt="image-20210624233323546"></p>
<p>主要通过参数-XX:+EliminateLocks的开启和关闭来观察效果</p>
<p>1、使用JDK1.8环境，JDK1.8是默认开启锁消除</p>
<p><img src="/mdimages/image-20210624233714299.png" alt="image-20210624233714299"></p>
<p><img src="/mdimages/image-20210624234158263.png" alt="image-20210624234158263"></p>
<p>从运行结果和命令参数分析来看，耗时6毫秒，并且默认开启逃逸分析和锁消除；</p>
<p>2、使用JDK1.8环境，JDK1.8是默认开启锁消除，所以需要使用命令-XX:-EliminateLocks来关闭标量替换；</p>
<p><img src="/mdimages/image-20210624234441226.png" alt="image-20210624234441226"></p>
<p><img src="/mdimages/image-20210624234652635.png" alt="image-20210624234652635"></p>
<p>从运行结果和命令参数分析来看，关闭锁消除耗时57毫秒；</p>
<p>小结：同样从以上场景，在开启逃逸分析的前提下，对锁消除的开启和关闭对程序性能的影响也是很大的。</p>

        <h3 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>
      <p>总体上逃逸分析可以带来一定程度上的性能优化，但是同时逃逸分析自身也是需要消耗一定的性能去进行一系列复杂的分析的，这其实也是一个相对耗时的过程，所以说如果在方法中的对象全都处于逃逸状态，那么就没有起到优化的作用，从而白白消耗了这部分的性能。</p>

        <h3 id="思考"   >
          <a href="#思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#思考" class="headerlink" title="思考"></a>思考</h3>
      <p>是否所有的对象和数组都会在堆内存分配空间？</p>
<p>不一定，JVM经过逃逸分析后，可能会将原本分配在堆内存中的对象转而分配在栈内存上。</p>
<p>加了锁的代码，锁就一定会生效吗？</p>
<p>不一定，JVM经过逃逸分析后，会去除不可能存在共享资源竞争的锁。</p>

        <h3 id="知识补充"   >
          <a href="#知识补充" class="heading-link"><i class="fas fa-link"></i></a><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3>
      <p>JAVA中所有的变量分为：（1）成员变量 和（2）局部变量</p>
<p>（1）成员变量包括：</p>
<ul>
<li>实例变量</li>
<li>类变量(static修饰)</li>
</ul>
<p>区别：实例变量是通过定义类的对象来访问的；类变量一般是通过类访问的，也可以用类对象来访问。</p>
<p>生命周期：实例变量与类对象生存周期共存亡；类变量与类共存亡。</p>
<p>（2）局部变量</p>
<ul>
<li>形参（方法参数）</li>
<li>方法局部变量（在方法内定义的变量）</li>
<li>代码块局部变量（在代码块内定义的变量）</li>
</ul>
<p>注：JAVA允许局部变量和成员变量同名，如果在方法内的局部变量和成员变量名相同，局部变量会覆盖成员变量，若要在这个方法里使用成员变量，可以使用this来调用成员变量。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础篇</title>
    <url>/2021/07/02/Redis%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[
        <h3 id="redis是什么"   >
          <a href="#redis是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#redis是什么" class="headerlink" title="redis是什么"></a>redis是什么</h3>
      <p>redis是一个非关系型数据库，是一种高级的key-value的存储系统，它支持多种类型的数据结构，键key是字符串类型，值value可以有多种类型，如<font color="red">字符串(string),散列(hash),列表(list),集合(set),有序集合(sorted set)</font>  与 范围查询，biymaps,hyperloglogs和地理空间（geospatial）索引半径查询。</p>
<p>英文官网：<span class="exturl"><a class="exturl__link"   href="https://redis.io/" >https://redis.io</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>中文网址：<span class="exturl"><a class="exturl__link"   href="http://www.redis.cn/" >http://www.redis.cn</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<span id="more"></span>


        <h3 id="为什么要使用redis"   >
          <a href="#为什么要使用redis" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么要使用redis" class="headerlink" title="为什么要使用redis"></a>为什么要使用redis</h3>
      
        <h4 id="数据库高并发访问"   >
          <a href="#数据库高并发访问" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库高并发访问" class="headerlink" title="数据库高并发访问"></a>数据库高并发访问</h4>
      <p>在同一时间点，同时有海量的用户并发访问，往往要达到每秒上万次读写请求，关系型数据库应付上万次SQL查询勉强顶得住，但是应付上万次SQL写数据请求，硬盘IO就已经无法承受了。</p>

        <h4 id="海量数据存储"   >
          <a href="#海量数据存储" class="heading-link"><i class="fas fa-link"></i></a><a href="#海量数据存储" class="headerlink" title="海量数据存储"></a>海量数据存储</h4>
      <p>数据库中数量特别大，数据库表中每天产生海量的数据，在一张数据量非常大的表里面进行SQL查询，效率是及其低下的。</p>

        <h4 id="可扩展性和高可用性"   >
          <a href="#可扩展性和高可用性" class="heading-link"><i class="fas fa-link"></i></a><a href="#可扩展性和高可用性" class="headerlink" title="可扩展性和高可用性"></a>可扩展性和高可用性</h4>
      <p>对数据库系统进行升级和扩展是非常麻烦的事情，往往需要停机维护和数据迁移，而非关系型数据可以通过不断的添加服务器节点来实现扩展，而不需要对原有的数据库进行维护。</p>

        <h3 id="如何使用redis"   >
          <a href="#如何使用redis" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何使用redis" class="headerlink" title="如何使用redis"></a>如何使用redis</h3>
      <p>redis命令参照官网<span class="exturl"><a class="exturl__link"   href="http://www.redis.cn/commands.html" >http://www.redis.cn/commands.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>这里主要介绍常用的五种数据类型。</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">值value的数据类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">string</td>
<td align="center">字符串类型，常用的类型</td>
</tr>
<tr>
<td align="center">hash</td>
<td align="center">键和值组成，类型java中的Map</td>
</tr>
<tr>
<td align="center">list</td>
<td align="center">列表，元素有多个，可以重复，有序。类似于java中的List集合</td>
</tr>
<tr>
<td align="center">set</td>
<td align="center">集合,元素不可重复，无序。类似于java中的Set</td>
</tr>
<tr>
<td align="center">zset</td>
<td align="center">集合，元素无序的，可以排序。每个元素有一个分数，决定顺序。</td>
</tr>
</tbody></table></div>

        <h4 id="string字符串类型"   >
          <a href="#string字符串类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#string字符串类型" class="headerlink" title="string字符串类型"></a>string字符串类型</h4>
      <p>字符串类型是Redis中最为基础的数据存储类型，它在Redis中以二进制保存，没有字符的编码和解码过程，无论存入的是字符串、整数、浮点数类型都会以字符串写入。</p>
<p>在Redis中字符串类型的值最多可以容纳的数据长度是512M.</p>

        <h5 id="常用命令"   >
          <a href="#常用命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">set key value</td>
<td align="center">向redis数据库中添加一个键和值</td>
</tr>
<tr>
<td align="center">get key</td>
<td align="center">通过键获取值，如果没有这个键，返回nil</td>
</tr>
<tr>
<td align="center">del key</td>
<td align="center">通过键来删除键和值，返回删除的个数</td>
</tr>
</tbody></table></div>

        <h5 id="命令演示"   >
          <a href="#命令演示" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令演示" class="headerlink" title="命令演示"></a>命令演示</h5>
      <p>1.添加一个键为person,值为laowang</p>
<p>2.再设置一个键为person,值为xiaowang</p>
<p>3.获取键为person的值</p>
<p>4.删除person元素</p>
<p>5.再次删除person看返回值是什么</p>
<p>6.再获取键为person的值</p>

        <h5 id="执行结果"   >
          <a href="#执行结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h5>
      <p><img src="/mdimages/image-20210702235433823.png" alt="image-20210702235433823"></p>

        <h4 id="hash类型"   >
          <a href="#hash类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h4>
      <p>Redis中的hash类型可以看作是键和值都是String类型的Map,每一个Hash可以存储4G个键值对。如Map&lt;String,Map&lt;String,String&gt;&gt;。</p>
<p>该类型非常适合存储对象的信息，如一个人有姓名，年龄，性别等信息，则它的存储结构可以如下</p>
<p>键person 字段有username、age、sex等，值是小王，18，男。</p>
<p><img src="/mdimages/image-20210703113901463.png" alt="image-20210703113901463"></p>

        <h5 id="常用命令-1"   >
          <a href="#常用命令-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h5>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">hset  键  字段 值</td>
<td align="center">添加一个hash类型的键，字段，值</td>
</tr>
<tr>
<td align="center">hget 键 字段</td>
<td align="center">通过键和字段得到一个值</td>
</tr>
<tr>
<td align="center">hmset 键 字段 值 字段 值……</td>
<td align="center">在一个键中一次设置多个字段和值</td>
</tr>
<tr>
<td align="center">hmget 键 字段 字段……</td>
<td align="center">通过一个键一次获取多个字段的值</td>
</tr>
<tr>
<td align="center">hdel 键 字段 字段……</td>
<td align="center">通过键和字段删除一个或多个字段和值</td>
</tr>
<tr>
<td align="center">hgetall 键</td>
<td align="center">得到一个键中所有的字段和值</td>
</tr>
</tbody></table></div>

        <h5 id="命令演示-1"   >
          <a href="#命令演示-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令演示-1" class="headerlink" title="命令演示"></a>命令演示</h5>
      <p>1.创建hash类型的键为user，并且添加一个字段为username，值为laowang</p>
<p>2,向user中添加字段password,值为123456，字段为age，值为18</p>
<p>3.分别得到user中的username、password、age字段的值</p>
<p>4.同时获取username、password、age字段的值</p>
<p>5.得到user中所有的字段和值</p>
<p>6.删除user中的password、age字段和值</p>

        <h5 id="执行结果-1"   >
          <a href="#执行结果-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h5>
      <p><img src="/mdimages/image-20210703112810674.png" alt="image-20210703112810674"></p>

        <h4 id="list类型"   >
          <a href="#list类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h4>
      <p>在Redis中，List类型是按照插入顺序排序的字符串链表。可以在其左边（left）或者右边（right）添加新的元素，<font color="red">在插入时，如果该键并不存在，Redis会为该键创建一个新的链表。</font>与此相反，如果链表中所有的元素均被移除，那么该键也将会被删除。</p>
<p>List中可以包含的最大元素数量时4G个(41亿个)。</p>

        <h5 id="常用命令-2"   >
          <a href="#常用命令-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h5>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">lpush 键 元素 元素</td>
<td align="center">从左边添加1个或多个元素，返回列表的长度</td>
</tr>
<tr>
<td align="center">rpush 键 元素 元素</td>
<td align="center">从右边添加1个或多个元素，返回列表的长度</td>
</tr>
<tr>
<td align="center">lpop 键</td>
<td align="center">从左边删除1个元素，返回被删除的元素</td>
</tr>
<tr>
<td align="center">rpop 键</td>
<td align="center">从右边删除1个元素，返回被删除的元素</td>
</tr>
<tr>
<td align="center">lrange 键 开始 结束</td>
<td align="center">返回指定范围内所有的元素，从左向右索引号0<del>n-1,从右向左索引号-1</del>-n<br/>如果要取列表中所有的元素，索引号从0到-1</td>
</tr>
<tr>
<td align="center">llen 键</td>
<td align="center">取列表中元素的个数</td>
</tr>
</tbody></table></div>

        <h5 id="命令演示-2"   >
          <a href="#命令演示-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令演示-2" class="headerlink" title="命令演示"></a>命令演示</h5>
      <p>1.向demolist键的列表中，从左边添加a b d三个元素</p>
<p>2.向demolist键的列表中，从右边添加one two three 三个元素</p>
<p>3.查询所有的元素</p>
<p>4.从右边添加一个重复的元素three</p>
<p>5.删除最右边的元素three</p>
<p>6.删除最左边的元素d</p>
<p>7.获取列表中元素的个数</p>

        <h5 id="执行结果-2"   >
          <a href="#执行结果-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h5>
      <p><img src="/mdimages/image-20210703120603606.png" alt="image-20210703120603606"></p>
<p><img src="/mdimages/image-20210703115925268.png" alt="image-20210703115925268"></p>

        <h4 id="set类型"   >
          <a href="#set类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h4>
      <p>在Reids中，我们可以将Set类型看作为没有排序的字符集合，和List类型一样，可以在该类型的数据值上执行添加、删除或判断某一元素是否存在等。</p>
<p>Set可包含的最大元素数量是4G，和List类型不同的是，Set类型中不允许出现重复的元素。</p>

        <h5 id="常用命令-3"   >
          <a href="#常用命令-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h5>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sadd 键 元素 元素</td>
<td align="center">添加1个键和多个元素，返回添加成功的元素个数</td>
</tr>
<tr>
<td align="center">smembers 键</td>
<td align="center">通过键获取所有的元素</td>
</tr>
<tr>
<td align="center">sismember 键 元素</td>
<td align="center">判断指定键中元素是否存在，如果存在返回1，否则返回0</td>
</tr>
<tr>
<td align="center">srem 键 元素 元素</td>
<td align="center">删除指定键中一个或多个元素</td>
</tr>
</tbody></table></div>

        <h5 id="命令演示-3"   >
          <a href="#命令演示-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令演示-3" class="headerlink" title="命令演示"></a>命令演示</h5>
      <p>1.向demoset集合中添加 A B C 1 2 3 6个元素</p>
<p>2.再向demoset集合中添加B元素，看是否添加成功</p>
<p>3.查看键为demoset的所有元素，观察添加元素的顺序</p>
<p>4.删除键为demoset中的C这个元素，再查看结果</p>
<p>5.判断A是否在demoset集合中</p>
<p>6.判断C是否在demoset集合中</p>

        <h5 id="执行结果-3"   >
          <a href="#执行结果-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行结果-3" class="headerlink" title="执行结果"></a>执行结果</h5>
      <p><img src="/mdimages/image-20210703152627731.png" alt="image-20210703152627731"></p>

        <h4 id="zset类型"   >
          <a href="#zset类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#zset类型" class="headerlink" title="zset类型"></a>zset类型</h4>
      <p>在Redis中，Sorted Set集合元素是无序的，可以排序，每个元素有一个分数，这个分数决定该元素的顺序。</p>

        <h5 id="常用命令-4"   >
          <a href="#常用命令-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h5>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">zadd 键 分数 元素 分数 元素</td>
<td align="center">添加1个键和多个带分数的元素，如果元素存在，则更新它的分数</td>
</tr>
<tr>
<td align="center">zcount 键 开始分数 结束分数</td>
<td align="center">返回指定键分数范围内的元素数量</td>
</tr>
<tr>
<td align="center">zcard 键</td>
<td align="center">获取一个键在排序集合中的元素数量</td>
</tr>
<tr>
<td align="center">zincrby 键 分数 元素</td>
<td align="center">对指定键中的排序集合的一个元素设置分数</td>
</tr>
<tr>
<td align="center">zrank 键 元素</td>
<td align="center">确定在排序集合中元素的索引</td>
</tr>
<tr>
<td align="center">zrem 键 元素 元素</td>
<td align="center">从排序集合中删除一个或多个元素</td>
</tr>
</tbody></table></div>

        <h5 id="命令演示-4"   >
          <a href="#命令演示-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令演示-4" class="headerlink" title="命令演示"></a>命令演示</h5>
      <p>1.向键为myzset的排序集合中，添加A分数100，B分数50，C分数25</p>
<p>2.获取键为myzset的排序集合中，分数范围为25到50的元素数量</p>
<p>3.获取键为myzset的排序集合中的元素数量</p>
<p>4.在键为myzset的排序集合中，查看B元素的索引</p>
<p>5.在键为myzset的排序集合中，对C元素设置其分数为75，并查看该元素的索引</p>
<p>6.在键为myzset的排序集合中，删除B元素</p>

        <h5 id="执行结果-4"   >
          <a href="#执行结果-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行结果-4" class="headerlink" title="执行结果"></a>执行结果</h5>
      <p><img src="/mdimages/image-20210703160847244.png" alt="image-20210703160847244"></p>

        <h4 id="通用命令"   >
          <a href="#通用命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4>
      
        <h5 id="常用命令-5"   >
          <a href="#常用命令-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h5>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">keys 匹配字符</td>
<td align="center">查找当前数据库中有哪些键，可以使用通配符<br/>* 匹配多个字符<br/>? 匹配1个字符</td>
</tr>
<tr>
<td align="center">del 键1 键2</td>
<td align="center">删除一个或多个键，无论值是什么类型</td>
</tr>
<tr>
<td align="center">exists 键</td>
<td align="center">判断指定的键是否存在，存在返回1，不存在返回0</td>
</tr>
<tr>
<td align="center">type 键</td>
<td align="center">获取指定键的数据类型：string、hash、list、set、zset等</td>
</tr>
<tr>
<td align="center">select 数据库编号</td>
<td align="center">选择其他的数据库</td>
</tr>
<tr>
<td align="center">move 键 数据库编号</td>
<td align="center">将一个键和值移到其他的数据库中</td>
</tr>
</tbody></table></div>

        <h5 id="命令演示-5"   >
          <a href="#命令演示-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#命令演示-5" class="headerlink" title="命令演示"></a>命令演示</h5>
      <p><img src="/mdimages/image-20210703161336918.png" alt="image-20210703161336918"></p>

        <h3 id="redis的持久化方式"   >
          <a href="#redis的持久化方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#redis的持久化方式" class="headerlink" title="redis的持久化方式"></a>redis的持久化方式</h3>
      
        <h4 id="RDB方式"   >
          <a href="#RDB方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#RDB方式" class="headerlink" title="RDB方式"></a>RDB方式</h4>
      <p>RDB：Redis DataBase默认的存储方式，数据以二进制的方式保存，每隔一段时间将内存中数据写入到文件中。（文件名称默认是dump.rdb）</p>

        <h5 id="RBD持久化的优点"   >
          <a href="#RBD持久化的优点" class="heading-link"><i class="fas fa-link"></i></a><a href="#RBD持久化的优点" class="headerlink" title="RBD持久化的优点"></a>RBD持久化的优点</h5>
      <ul>
<li><p>方便备份与恢复</p>
<p>整个Redis数据库将只包含一个文件，默认是dump.rdb，可以非常轻松的将一个单独的文件压缩后转移到其他存储介质上，一旦系统出现灾难性故障，可以非常容易的进行恢复。</p>
</li>
<li><p>性能最大化</p>
<p>对于Redis的服务进程而言，在开始持久化时，它唯一需要做的只是分叉出子进程，由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作。</p>
</li>
<li><p>启动效率更高</p>
<p>相对于AOF持久化机制，如果数据集非常大，RDB的启动效率会更高。</p>
</li>
</ul>

        <h5 id="RBD持久化的缺点"   >
          <a href="#RBD持久化的缺点" class="heading-link"><i class="fas fa-link"></i></a><a href="#RBD持久化的缺点" class="headerlink" title="RBD持久化的缺点"></a>RBD持久化的缺点</h5>
      <ul>
<li><p>不能完全避免数据丢失</p>
<p>因为RDB是每隔一段时间写入数据，所以系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。</p>
</li>
<li><p>会导致服务器暂停的现象</p>
<p>由于RDB是通过子进程来协助完成数据持久化工作的，因此当数据集比较大时，可能会导致整个服务器停止几百毫秒，甚至1秒。</p>
</li>
</ul>

        <h5 id="RDB持久化机制的配置"   >
          <a href="#RDB持久化机制的配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#RDB持久化机制的配置" class="headerlink" title="RDB持久化机制的配置"></a>RDB持久化机制的配置</h5>
      <p>在redis的redis.conf配置文件中的SNAPSHOTTING中有如下说明：</p>
<p><img src="/mdimages/image-20210703211859687.png" alt="image-20210703211859687"></p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">save &lt;时间间隔&gt; &lt;修改键数&gt;</td>
<td align="center">设置数据自动保存的时间j间隔<br/>时间间隔：单位是秒<br/>修改键数：增删改键的个数<br/><font color="red">必须是2个条件同时满足的情况下才写入</font></td>
</tr>
</tbody></table></div>
<p>如下是redis配置文件中的RDB方式的持久化时机，<font color="red">必须两个条件都满足的情况下</font>才进行持久化操作。</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">时间间隔(秒)</th>
<th align="center">修改键数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">save</td>
<td align="center">3600</td>
<td align="center">1</td>
<td align="center">每60分钟修改了1个键</td>
</tr>
<tr>
<td align="center">save</td>
<td align="center">300</td>
<td align="center">100</td>
<td align="center">每5分钟修改了100个键</td>
</tr>
<tr>
<td align="center">save</td>
<td align="center">60</td>
<td align="center">10000</td>
<td align="center">每1分钟修改了1万个键</td>
</tr>
</tbody></table></div>

        <h4 id="AOF方式"   >
          <a href="#AOF方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOF方式" class="headerlink" title="AOF方式"></a>AOF方式</h4>
      <p>AOF: Append Only File 以日志记录的方式将用户的操作和数据写入到文本文件中，文件比较大，还原速度比较慢，数据更加安全。（文件名称默认是appendonly.aof）</p>

        <h5 id="AOF持久化的优点"   >
          <a href="#AOF持久化的优点" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOF持久化的优点" class="headerlink" title="AOF持久化的优点"></a>AOF持久化的优点</h5>
      <p>AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。也可以通过该文件完成数据的重建，该机制可以带来<font color="red">更高的数据安全性，所有的操作都是异步完成的</font>。</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">Redis中提供了3种同步策略</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">每秒同步</td>
<td align="center">每隔1秒写入一次文件</td>
</tr>
<tr>
<td align="center">每修改同步</td>
<td align="center">每次修改都写入一次文件</td>
</tr>
<tr>
<td align="center">不同步</td>
<td align="center">不会写入文件中</td>
</tr>
</tbody></table></div>

        <h5 id="AOF持久化的缺点"   >
          <a href="#AOF持久化的缺点" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOF持久化的缺点" class="headerlink" title="AOF持久化的缺点"></a>AOF持久化的缺点</h5>
      <ul>
<li>文件比RDB更大，对于相同数量的数据集而言，AOF文件通常要大于RDB文件。</li>
<li>运行效率比RDB更慢，根据同步策略的不同，AOF在运行效率上往往会慢于RDB。</li>
</ul>

        <h5 id="AOF持久化机制的配置"   >
          <a href="#AOF持久化机制的配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOF持久化机制的配置" class="headerlink" title="AOF持久化机制的配置"></a>AOF持久化机制的配置</h5>
      <p>AOF默认是关闭的，首先需要开启AOF模式</p>
<p><img src="/mdimages/image-20210703214815203.png" alt="image-20210703214815203"></p>
<p>在redis的redis.conf配置文件中的APPEND ONLY MODE中有如下说明：</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">参数配置</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">appendonly no/yes</td>
<td align="center">设置成yes表示打开AOF方式的持久化，如果打开AOF,则RDB持久化方式不起作用。</td>
</tr>
</tbody></table></div>
<p>如下是redis配置文件中的AOF方式的持久化时机</p>
<p><img src="/mdimages/image-20210703215554099.png" alt="image-20210703215554099"></p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">持久化时机</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">appendfsync</td>
<td align="center">everysec</td>
<td align="center">每秒同步</td>
</tr>
<tr>
<td align="center">appendfsync</td>
<td align="center">always</td>
<td align="center">每修改同步</td>
</tr>
<tr>
<td align="center">appendfsync</td>
<td align="center">no</td>
<td align="center">不同步</td>
</tr>
</tbody></table></div>
<p>关于Redis配置的其他信息将在Redis高级篇介绍。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis安装篇</title>
    <url>/2021/07/03/Redis%E5%AE%89%E8%A3%85%E7%AF%87/</url>
    <content><![CDATA[
        <h3 id="Linux环境安装Redis"   >
          <a href="#Linux环境安装Redis" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linux环境安装Redis" class="headerlink" title="Linux环境安装Redis"></a>Linux环境安装Redis</h3>
      <p>官网下载地址：<span class="exturl"><a class="exturl__link"   href="https://redis.io/download" >Redis</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>本篇将介绍Linux环境下Redis6.2.4单机版的安装。</p>
<p>1.选择Stable(6.2)下的Download 6.2.4 链接进行下载 （stable是稳定版本，默认下载的是linux版本）</p>
<p><img src="/mdimages/image-20210704133052734.png" alt="image-20210704133052734"></p>
<span id="more"></span>

<p>2.下载完成之后，使用XShell或其他客户端工具把下载好的Redis压缩包上传到Linux的/opt文件目录下</p>
<p><img src="/mdimages/image-20210704135556899.png" alt="image-20210704135556899"></p>
<p>3.使用XShell连接到Linux服务器，进入到opt目录下，解压redis-6.2.4.tar.gz到/usr/local 目录下</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# cd /opt             //进入opt文件目录</span><br><span class="line"></span><br><span class="line">[root@localhost opt]# tar -zxvf redis-6.2.4.tar.gz  -C /usr/local/    //解压redis-6.2.4.tar.gz到/usr/local 目录</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>4.由于Redis是由C语言编写的，它的运行需要C环境，所以我们需要先安装gcc，安装命令如下：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]# yum install gcc-c++</span><br></pre></td></tr></table></div></figure>

<p>5.进入到/usr/local/redis-6.2.4/目录下，进行编译和安装</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]# cd /usr/local/redis-6.2.4/</span><br><span class="line"></span><br><span class="line">[root@localhost redis-6.2.4]# make             //对解压后的文件进行编译</span><br><span class="line"></span><br><span class="line">[root@localhost redis-6.2.4]# cd src/          //进入到redis-6.2.4/src 文件目录下</span><br><span class="line"></span><br><span class="line">[root@localhost src]# make install            //redis安装</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>6.为了方便管理，将Redis的配置文件移动到etc文件夹中，常用命令移动到bin文件夹中</p>
<ul>
<li><p>首先创建bin和etc文件夹</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.4]# mkdir bin       //创建bin文件夹</span><br><span class="line"></span><br><span class="line">[root@localhost redis-6.2.4]# mkdir etc       //创建etc文件夹</span><br></pre></td></tr></table></div></figure></li>
<li><p>将redis-6.2.4目录下的redis.conf 移动到 redis-6.2.4目录下的etc文件夹下</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.4]# mv redis.conf ./etc/ </span><br></pre></td></tr></table></div></figure></li>
<li><p>将redis-6.2.4目录下的将mkreleasehdr.sh、redis-benchmark、redis-check-aof、redis-cli、redis-server 移动到 redis-6.2.4目录下的bin文件夹下</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost redis-6.2.4]# cd src     //进入redis-6.2.4目录下的src文件夹下</span><br><span class="line">[root@localhost src]# mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/local/redis-6.2.4/bin/</span><br></pre></td></tr></table></div></figure></li>
</ul>
<p>7.进入到/usr/local/redis-6.2.4/etc 目录下，编辑redis.conf配置文件，设置成后台启动redis服务</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost src]# cd /usr/local/redis-6.2.4/etc</span><br><span class="line">[root@localhost etc]# vim redis.conf</span><br></pre></td></tr></table></div></figure>

<p>把配置文件中的daemonize属性修改为yes(表示开启后台运行)</p>
<p><img src="/mdimages/image-20210704142830383.png" alt="image-20210704142830383"></p>
<p>8.编辑redis.conf配置文件，开启redis远程访问服务</p>
<p><img src="/mdimages/image-20210704143312727.png" alt="image-20210704143312727"></p>
<ul>
<li>将redis.conf配置文件中的bind 127.0.0.1 这一行注释掉，这里bind指的是只有指定的网段才能远程访问这个redis服务，注释掉后，就没有限制了。</li>
</ul>
<p><img src="/mdimages/image-20210704143755751.png" alt="image-20210704143755751"></p>
<ul>
<li>默认启用保护模式，如果允许其他客户端连接到Redis服务,即使没有配置身份验证，也没有使用bind指令显示的列出特定的网段，那么需要将redis.conf配置文件中的protected-mode 设置成no（默认是设置成yes，防止了远程访问，在redis3.2.3版本后）这里根据实际情况去配置即可，如果是本地使用不需要修改。</li>
</ul>
<p>9.编辑redis.conf配置文件，修改Redis默认密码(默认密码为空)</p>
<p><img src="/mdimages/image-20210704144920039.png" alt="image-20210704144920039"></p>
<p>在配置文件中找到# requirepass foobared 这一行，删除前面的注释符号#，并把foobared修改成自己设置的密码，或者另起一行requirepass 密码。</p>
<p>10.设置Redis开机自启动</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost etc]# vim /etc/rc.d/rc.local</span><br></pre></td></tr></table></div></figure>

<p>添加如下代码到 /etc/rc.d/rc.local 中：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">/usr/local/redis-6.2.4/bin/redis-server  /usr/local/redis-6.2.4/etc/redis.conf</span><br></pre></td></tr></table></div></figure>

<p>11.切换到/usr/local/redis-6.2.4/bin 目录下执行redis-serve 命令，使用/usr/local/redis-6.2.4/etc/redis.conf 配置文件来启动redis服务</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[root@localhost etc]# cd /usr/local/redis-6.2.4/bin</span><br><span class="line">[root@localhost bin]# ls</span><br><span class="line">dump.rdb  mkreleasehdr.sh  redis-benchmark  redis-check-aof  redis-cli  redis-server</span><br><span class="line">[root@localhost bin]# ./redis-server /usr/local/redis-6.2.4/etc/redis.conf</span><br></pre></td></tr></table></div></figure>

<p>12.使用Redis自带的客户端工具redis-cli 测试连接 或者 使用RedisDesktopManager图形化工具测试连接</p>
<p><img src="/mdimages/image-20210704150104809.png" alt="image-20210704150104809"></p>
<p><img src="/mdimages/image-20210704150234966.png" alt="image-20210704150234966"></p>
<p>至此Redis单机版安装完毕。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK工具介绍与使用</title>
    <url>/2021/07/08/JDK%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[
        <h2 id="JDK工具"   >
          <a href="#JDK工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#JDK工具" class="headerlink" title="JDK工具"></a>JDK工具</h2>
      <p>在JDK的bin目录下其实有很多的命令行工具：</p>
<p><img src="/mdimages/image-20210708142518187.png" alt="image-20210708142518187"></p>
<p>我们经常接触的命令有javac编译、java运行，而对其它命令是比较少接触的，其实还有很多的命令是非常强大的，我们可以借助这些命令去监控和分析我们的应用程序，如查看JVM参数，内存使用情况及分析等等。</p>
<p>下面将介绍几个比较常用的命令：</p>
<ul>
<li>jps：查看本机java进程信息。</li>
<li>jstack：打印<font color="red">线程的栈信息</font>，生成<font color="red">线程dump文件。</font></li>
<li>jmap：打印<font color="red">内存映射信息</font>，生成<font color="red">堆dump文件</font>。</li>
<li>jstat：性能监控工具。</li>
<li>jinfo：查看java运行程序的扩展参数，支持在运行时动态地更改部分参数。</li>
<li>jcmd：可以用来导出堆信息，查看java进程，导出线程信息，执行GC等，jcmd拥有jmap的大部分功能，Oracle官方建议使用jcmd代替jmap。</li>
</ul>
<span id="more"></span>


        <h3 id="jps命令"   >
          <a href="#jps命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#jps命令" class="headerlink" title="jps命令"></a>jps命令</h3>
      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">jps 显示当前所有java进程pid的命令</span><br><span class="line">jps -l 输出应用程序main.class的完整package名或者应用程序jar文件完整路径名</span><br><span class="line">jps -v 输出传递给JVM的参数</span><br></pre></td></tr></table></div></figure>


        <h3 id="jstack命令"   >
          <a href="#jstack命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#jstack命令" class="headerlink" title="jstack命令"></a>jstack命令</h3>
      <p>主要用于生成指定进程当前时刻的线程快照，线程快照是当前java虚拟机每一条线程正在执行的方法堆栈的集合，<br>生成线程快照的主要目的是用于定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致长时间等待。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">jstack命令查看线程堆栈信息时可能会看到的线程的几种状态：</span><br><span class="line">NEW：未启动的。不会出现在Dump中。</span><br><span class="line">RUNNABLE：在虚拟机内执行的。运行中状态，可能里面还能看到locked字样，表明它获得了某把锁。</span><br><span class="line">BLOCKED：受阻塞并等待监视器锁。被某个锁(synchronizers)給block住了。</span><br><span class="line">WATING：无限期等待另一个线程执行特定操作。等待某个condition或monitor发生，一般停留在park(), wait(), sleep(),join() 等语句里。</span><br><span class="line">TIMED_WATING：有时限的等待另一个线程的特定操作。和WAITING的区别是wait() 等语句加上了时间限制 wait(timeout)。</span><br><span class="line">TERMINATED：已退出的。</span><br></pre></td></tr></table></div></figure>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">top命令查看对应的java进程ID &lt;pid&gt;；</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20210528154215890.png" alt="image-20210528154215890"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">top -Hp &lt;pid&gt; 查看进程中的线程状态（根据%CPU占用的百分比，判断哪个线程CPU占用过高）；</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20210528154310715.png" alt="image-20210528154310715"></p>
<p>通过上面的命令查询出对应进程中占用CPU过高的线程ID，然后使用以下命令转换为十六进制数，</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">echo &#x27;obase=16; ibase=10; &lt;pid&gt;&#x27; | bc | tr &#x27;[A-Z]&#x27; &#x27;[a-z]&#x27;</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20210528154504023.png" alt="image-20210528154504023">jstack <pid> &gt; <path> 根据进程ID将线程快照信息输出到指定path（如：jstack 10859 &gt; /tmp/threaddump)；部分线程快照信息如下：</p>
<p><img src="/mdimages/image-20210528155942987.png" alt="image-20210528155942987"></p>
<p>例：根据算出的线程ID 2c12到线程快照文件搜索，查到nid = 0x2c12。</p>

        <h3 id="jmap命令"   >
          <a href="#jmap命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#jmap命令" class="headerlink" title="jmap命令"></a>jmap命令</h3>
      <p>主要用于打印指定java进程的共享对象内存映射或堆内存信息。</p>
<p>【<strong>堆Dump是反映堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。一般在内存不足，GC异常等情况下，怀疑内存泄漏，这个时候就会去输出堆Dump文件。】</strong></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">指令格式：jmap - [option] [pid]</span><br><span class="line">option:</span><br><span class="line">no option： 查看进程的内存映像信息,类似 Solaris pmap 命令。【jmap 10859】</span><br><span class="line">heap： 显示Java堆详细信息。【jmap -heap 10859】</span><br><span class="line">histo[:live]： 显示堆中对象的统计信息。【 jmap -histo:live 10859】</span><br><span class="line">clstats：打印类加载器信息。【jmap -clstats 10859】</span><br><span class="line"></span><br><span class="line">备注：-clstats是-permstat的替代方案，在JDK8之前，-permstat用来打印类加载器的数据</span><br><span class="line">打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</span><br><span class="line">finalizerinfo： 显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象。【jmap -finalizerinfo 10859】</span><br><span class="line">dump:&lt;dump-options&gt;：生成堆转储快照。【jmap -dump:format=b,file=生成文件的路径 pid】</span><br><span class="line">备注：例jmap -dump:format=b,file=/usr/landray/kmss/resource/heapdump.hprof 29879</span><br><span class="line"></span><br><span class="line">F： 当-dump没有响应时，使用-dump或者-histo参数. 在这个模式下,live子参数无效。</span><br><span class="line">help：打印帮助信息。【jmap -help】</span><br><span class="line">J&lt;flag&gt;：指定传递给运行jmap的JVM的参数。</span><br></pre></td></tr></table></div></figure>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">jmap -heap 10859命令信息详解</span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 8 thread(s)                //并行垃圾回收器8个线程</span><br><span class="line"></span><br><span class="line">Heap Configuration:                         //堆内存初始化配置</span><br><span class="line">   MinHeapFreeRatio = 0                     //堆最小空闲比率</span><br><span class="line">   MaxHeapFreeRatio = 100                   //堆最大空闲比率</span><br><span class="line">   MaxHeapSize      = 4294967296 (4096.0MB) //堆最大内存大小</span><br><span class="line">   NewSize          = 268435456 (256.0MB)   //堆新生代的默认内存大小</span><br><span class="line">   MaxNewSize       = 268435456 (256.0MB)   //堆新生代的最大内存大小</span><br><span class="line">   OldSize          = 5439488 (5.1875MB)    //老年代的大小</span><br><span class="line">   NewRatio         = 2                     //新生代和老年代的大小比率</span><br><span class="line">   SurvivorRatio    = 8                     //年轻代中的Eden区与Survivor区的大小比率</span><br><span class="line">   PermSize         = 268435456 (256.0MB)   //永久代的初始大小</span><br><span class="line">   MaxPermSize      = 536870912 (512.0MB)   //永久代的最大大小</span><br><span class="line">   G1HeapRegionSize = 0 (0.0MB)             //G1垃圾收集器region区的大小</span><br><span class="line"></span><br><span class="line">Heap Usage:                                 //堆内存使用情况</span><br><span class="line">PS Young Generation                         //新生代内存使用情况 </span><br><span class="line">Eden Space:                                 //Eden区的内存分布</span><br><span class="line">   capacity = 266338304 (254.0MB)           //总大小</span><br><span class="line">   used     = 61499808 (58.650787353515625MB)//已使用大小</span><br><span class="line">   free     = 204838496 (195.34921264648438MB)//空闲大小</span><br><span class="line">   23.090861162801428% used                   //已使用百分比</span><br><span class="line">From Space:                                   //Survivor区（S0）的内存分布</span><br><span class="line">   capacity = 1048576 (1.0MB)</span><br><span class="line">   used     = 196608 (0.1875MB)</span><br><span class="line">   free     = 851968 (0.8125MB)</span><br><span class="line">   18.75% used</span><br><span class="line">To Space:                                     //Survivor区（S1）的内存分布</span><br><span class="line">   capacity = 1048576 (1.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 1048576 (1.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation                             //老年代的内存分布</span><br><span class="line">   capacity = 805306368 (768.0MB)</span><br><span class="line">   used     = 550712192 (525.2000732421875MB)</span><br><span class="line">   free     = 254594176 (242.7999267578125MB)</span><br><span class="line">   68.38542620340984% used</span><br><span class="line">PS Perm Generation                             //永久代的内存分布</span><br><span class="line">   capacity = 402653184 (384.0MB)</span><br><span class="line">   used     = 206356648 (196.79703521728516MB)</span><br><span class="line">   free     = 196296536 (187.20296478271484MB)</span><br><span class="line">   51.24922792116801% used</span><br></pre></td></tr></table></div></figure>

<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">jmap -histo 14596命令信息详解</span><br><span class="line"> num     #instances         #bytes  class name</span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:         89650       32637720  [B</span><br><span class="line">   2:        160971       20716296  [C</span><br><span class="line">   3:         16744        9498400  [I</span><br><span class="line">   4:         86693        2080632  java.lang.String</span><br><span class="line">   5:         90310        1782328  [Ljava.lang.Class;</span><br><span class="line">   6:         24473        1314520  [Ljava.lang.Object;</span><br><span class="line">   7:         14936        1314368  java.lang.reflect.Method</span><br><span class="line">   8:          7628         839800  java.lang.Class</span><br><span class="line">   9:         18658         597056  java.util.concurrent.ConcurrentHashMap$Node</span><br><span class="line">  10:          6682         535872  [Ljava.util.HashMap$Node;</span><br><span class="line">  11:         11587         463480  java.util.LinkedHashMap$Entry</span><br><span class="line">  12:         13838         442816  java.util.HashMap$Node</span><br><span class="line">  13:          5624         440384  [S</span><br><span class="line">  14:          7013         392728  java.util.LinkedHashMap</span><br><span class="line">  15:         16276         390624  java.lang.StringBuilder</span><br><span class="line">  16:          6218         348208  jdk.internal.org.objectweb.asm.Item</span><br><span class="line">  17:         12152         291648  java.util.concurrent.CopyOnWriteArrayList$COWIterator</span><br><span class="line">  打印的信息分别是：序列号、对象的数量、这些对象的内存占用大小、这些对象所属的类和全限定名</span><br></pre></td></tr></table></div></figure>


        <h3 id="jstat命令"   >
          <a href="#jstat命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#jstat命令" class="headerlink" title="jstat命令"></a>jstat命令</h3>
      <p>主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">指令格式：jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line">option：常用选项有gc、gcutil。</span><br><span class="line">[-t]:可选项，显示TimeStamp时间戳。【jstat -gc -t 14596 1000 5】</span><br><span class="line">[-h&lt;lines&gt;]：可选项，每打印lines行数据后，重新显示列标题行。【jstat -gc -h3 14596 1000 5】</span><br><span class="line">vmid：java进程id。</span><br><span class="line">interval：间隔时间，单位为毫秒。</span><br><span class="line">count：打印次数。</span><br></pre></td></tr></table></div></figure>

<p>option参数选项：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">-class 显示ClassLoad的相关信息；</span><br><span class="line">-compiler 显示JIT编译的相关信息；</span><br><span class="line">-gc 显示和gc相关的堆信息；</span><br><span class="line">-gccapacity 　显示各个代的容量以及使用情况；</span><br><span class="line">-gcmetacapacity 显示metaspace的大小</span><br><span class="line">-gcnew 显示新生代信息；</span><br><span class="line">-gcnewcapacity 显示新生代大小和使用情况；</span><br><span class="line">-gcold 显示老年代和永久代的信息；</span><br><span class="line">-gcoldcapacity 显示老年代的大小；</span><br><span class="line">-gcutil　 显示垃圾收集信息；</span><br><span class="line">-gccause 显示垃圾回收的相关信息（同-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因；</span><br><span class="line">-printcompilation 输出JIT编译的方法信息；</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20210528173814565.png" alt="image-20210528173814565"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">jstat -gc 10859 5000 20 命令输出内容详解：</span><br><span class="line">S0C: 年轻代第一个survivor的容量（字节）</span><br><span class="line">S1C：年轻代第二个survivor的容量（字节）</span><br><span class="line">S0U：年轻代第一个survivor已使用的容量（字节）</span><br><span class="line">S1U：年轻代第二个survivor已使用的容量（字节）</span><br><span class="line">EC：年轻代中Eden的空间（字节）</span><br><span class="line">EU：年代代中Eden已使用的空间（字节）</span><br><span class="line">OC：老年代的容量（字节）</span><br><span class="line">OU: 老年代中已使用的空间（字节）</span><br><span class="line">PC：永久代的容量</span><br><span class="line">PU：永久代已使用的容量</span><br><span class="line">YGC：从应用程序启动到采样时年轻代中GC的次数</span><br><span class="line">YGCT:从应用程序启动到采样时年轻代中GC所使用的时间（单位：S）</span><br><span class="line">FGC：从应用程序启动到采样时老年代中GC（FULL GC）的次数</span><br><span class="line">FGCT：从应用程序启动到采样时老年代中GC所使用的时间（单位：S）</span><br><span class="line">GCT：从应用程序启动到采样时gc的总时间。</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20210528175226566.png" alt="image-20210528175226566"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">jstat -gcutil 10859 5000 20 命令输出内容详解：</span><br><span class="line">s0:年轻代中第一个survivor已使用的占当前容量百分比</span><br><span class="line">s1:年轻代中第二个survivor已使用的占当前容量百分比</span><br><span class="line">E:年轻代中Eden已使用的占当前容量百分比</span><br><span class="line">O:老年代中已使用的占当前容量百分比</span><br><span class="line">P:永久代中已使用的占当前容量百分比</span><br><span class="line">YGC ：从应用程序启动到采样时年轻代中gc次数</span><br><span class="line">YGCT ：从应用程序启动到采样时年轻代中gc所用时间(s)</span><br><span class="line">FGC ：从应用程序启动到采样时old代(全gc)gc次数</span><br><span class="line">FGCT ：从应用程序启动到采样时old代(全gc)gc所用时间(s)</span><br><span class="line">GCT：从应用程序启动到采样时gc用的总时间(s)</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20210528180125327.png" alt="image-20210528180125327"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">jstat -class 10859 命令输出内容详解：</span><br><span class="line">显示加载class的数量，及所占空间等信息。</span><br><span class="line">Loaded : 已经装载的类的数量</span><br><span class="line">Bytes : 装载类所占用的字节数</span><br><span class="line">Unloaded：已经卸载类的数量</span><br><span class="line">Bytes：卸载类的字节数</span><br><span class="line">Time：装载和卸载类所花费的时间</span><br></pre></td></tr></table></div></figure>


        <h3 id="jinfo命令"   >
          <a href="#jinfo命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#jinfo命令" class="headerlink" title="jinfo命令"></a>jinfo命令</h3>
      <p>jinfo可以用来查看正在运行的java运用程序的扩展参数，甚至支持在运行时动态地更改部分参数。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">使用语法：jinfo   -&lt;option&gt;  &lt;pid&gt;</span><br></pre></td></tr></table></div></figure>

<p>option可以为以下信息：   </p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">-flag&lt;name&gt;: 打印指定java虚拟机的参数值</span><br><span class="line"></span><br><span class="line">-flag [+|-]&lt;name&gt;：设置或取消指定java虚拟机参数的布尔值</span><br><span class="line"></span><br><span class="line">-flag &lt;name&gt;=&lt;value&gt;：设置指定java虚拟机的参数的值</span><br></pre></td></tr></table></div></figure>

<p>常用的参数名name：</p>
<div class="table-container"><table>
<thead>
<tr>
<th>参数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>PrintGCDetails</td>
<td>是否打印GC收集细节</td>
</tr>
<tr>
<td>SurvivorRatio</td>
<td>设置新生代中eden和S0/S1空间的比例，默认8:1:1，SurvivorRatio值就是设置eden区的比例占多少，S0/S1相同</td>
</tr>
<tr>
<td>NewRatio</td>
<td>配置年轻代与老年代在堆结构的占比，默认-XX:NewRatio=2新生代占1,老年代2,年轻代占整个堆的1/3，NewRatio值就是设置老年代的占比，剩下的1给新生代</td>
</tr>
<tr>
<td>InitialHeapSize（等价于Xms）</td>
<td>初始堆大小内存，默认为物理内存1/64</td>
</tr>
<tr>
<td>MaxHeapSize（等价于Xmx）</td>
<td>堆最大分配内存，默认为物理内存的1/4</td>
</tr>
<tr>
<td>ThreadStackSize（等价于Xss）</td>
<td>设置单个线程栈的大小，一般默认为512k~1024k</td>
</tr>
<tr>
<td>MaxNewSize（等价于Xmn）</td>
<td>设置年轻代大小</td>
</tr>
<tr>
<td>MetaspaceSize</td>
<td>设置元空间大小，JDK1.7永久代，JDK1.8之后元空间；没配置，默认20多M</td>
</tr>
<tr>
<td>MaxTenuringThreshold</td>
<td>设置转入老年代的存活次数。如果是0，则直接跳过新生代进入老年代</td>
</tr>
<tr>
<td>PermSize</td>
<td>设置永久代最小大小（Java8以前）</td>
</tr>
<tr>
<td>MaxPermSize</td>
<td>设置永久代最大大小（Java8以前）</td>
</tr>
<tr>
<td>MetaspaceSize</td>
<td>分别设置元空间最小大小（Java8以后）</td>
</tr>
<tr>
<td>MaxMetaspaceSize</td>
<td>分别设置元空间最大大小（Java8以后）</td>
</tr>
</tbody></table></div>
<p>使用示例：</p>
<p>​      1. 显示新生代对象晋升到老年代对象的最大年龄。</p>
<p><img src="/mdimages/image-20210607144631814.png" alt="image-20210607144631814"></p>
<p>​      2.显示是否开启打印GC详细信息。</p>
<p><img src="/mdimages/image-20210607144710401.png" alt="image-20210607144710401"></p>
<p>​      3.在应用程序运行时动态打开打印详细GC信息开关。</p>
<p><img src="/mdimages/image-20210607145016660.png" alt="image-20210607145016660"></p>
<p>注意：jinfo虽然可以在java程序运行时动态地修改虚拟机参数，但并不是所有的参数都支持动态修改。</p>

        <h3 id="jcmd命令"   >
          <a href="#jcmd命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#jcmd命令" class="headerlink" title="jcmd命令"></a>jcmd命令</h3>
      <p>在JDK 1.7之后，新增了一个命令行工具jcmd。它是一个多功能工具，可以用来导出堆，查看java进程，导出线程信息，执行GC等。jcmd拥有jmap的大部分功能，Oracle官方建议使用jcmd代替jmap。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">使用语法：jcmd &lt;pid&gt; &lt;command&gt;</span><br></pre></td></tr></table></div></figure>

<p>jcmd命令拥有jps命令的功能，可以查看当前运行的所有虚拟机，如：</p>
<p><img src="/mdimages/image-20210708145956275.png" alt="image-20210708145956275"></p>
<p>jcmd命令对于每一个虚拟机使用help命令可以列出该虚拟机支持的所有命令，如：</p>
<p><img src="/mdimages/image-20210708150329736.png" alt="image-20210708150329736"></p>
<p>常见子命令说明：</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">子命令<command></th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Thread.print</td>
<td align="center">打印线程栈信息</td>
</tr>
<tr>
<td align="center">GC.class_histogram</td>
<td align="center">查看系统中类统计信息</td>
</tr>
<tr>
<td align="center">GC.heap_dump</td>
<td align="center">导出堆内存，与jmap -dump功能一样</td>
</tr>
<tr>
<td align="center">GC.run_finalization</td>
<td align="center">触发finalize()</td>
</tr>
<tr>
<td align="center">GC.run</td>
<td align="center">触发gc()</td>
</tr>
<tr>
<td align="center">VM.uptime</td>
<td align="center">VM启动时间</td>
</tr>
<tr>
<td align="center">VM.flags</td>
<td align="center">获取JVM启动参数</td>
</tr>
<tr>
<td align="center">VM.system_properties</td>
<td align="center">获取系统属性Properties</td>
</tr>
<tr>
<td align="center">VM.command_line</td>
<td align="center">获取启动时命令行指定的参数</td>
</tr>
<tr>
<td align="center">VM.version</td>
<td align="center">获取JVM的版本</td>
</tr>
<tr>
<td align="center">help</td>
<td align="center">帮助</td>
</tr>
</tbody></table></div>
<p>示例：</p>
<p><img src="/mdimages/image-20210708152244170.png" alt="image-20210708152244170"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java运行时数据区域</title>
    <url>/2021/07/10/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[
        <h2 id="JAVA运行时数据区域"   >
          <a href="#JAVA运行时数据区域" class="heading-link"><i class="fas fa-link"></i></a><a href="#JAVA运行时数据区域" class="headerlink" title="JAVA运行时数据区域"></a>JAVA运行时数据区域</h2>
      
        <h3 id="为什么我们需要了解Java运行时数据区域？"   >
          <a href="#为什么我们需要了解Java运行时数据区域？" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么我们需要了解Java运行时数据区域？" class="headerlink" title="为什么我们需要了解Java运行时数据区域？"></a>为什么我们需要了解Java运行时数据区域？</h3>
      <p>在JVM虚拟机自动内存管理机制下，我们java开发程序员不需要像C语言开发程序员那样为每一个new操作去写对应的delete/free等操作，不容易出现内存泄漏和内存溢出的问题，正是因为Java虚拟机JVM帮我们对内存进行了管理，但是一旦出现内存泄漏和溢出问题，如果我们不了解虚拟机是怎么使用内存的话，那么排查的时候会毫无头绪。</p>

        <h3 id="运行时数据区域分布图"   >
          <a href="#运行时数据区域分布图" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行时数据区域分布图" class="headerlink" title="运行时数据区域分布图"></a>运行时数据区域分布图</h3>
      <p>Java虚拟机JVM在执行java程序的过程中会把它管理的内存划分成若干个不同的数据区域。而且JDK1.7之前、JDK1.7和JDK1.8又有所不同，下面将分别介绍。</p>
<span id="more"></span>


        <h4 id="JDK1-7以前运行时数据区域"   >
          <a href="#JDK1-7以前运行时数据区域" class="heading-link"><i class="fas fa-link"></i></a><a href="#JDK1-7以前运行时数据区域" class="headerlink" title="JDK1.7以前运行时数据区域"></a>JDK1.7以前运行时数据区域</h4>
      <p><img src="/mdimages/image-20210710112212827.png" alt="image-20210710112212827"></p>

        <h4 id="JDK1-7运行时数据区域"   >
          <a href="#JDK1-7运行时数据区域" class="heading-link"><i class="fas fa-link"></i></a><a href="#JDK1-7运行时数据区域" class="headerlink" title="JDK1.7运行时数据区域"></a>JDK1.7运行时数据区域</h4>
      <p><img src="/mdimages/image-20210710112635473.png" alt="image-20210710112635473"></p>

        <h4 id="JDK1-8运行时数据区域"   >
          <a href="#JDK1-8运行时数据区域" class="heading-link"><i class="fas fa-link"></i></a><a href="#JDK1-8运行时数据区域" class="headerlink" title="JDK1.8运行时数据区域"></a>JDK1.8运行时数据区域</h4>
      <p><img src="/mdimages/image-20210710132046013.png" alt="image-20210710132046013"></p>

        <h4 id="JDK1-7以前、JDK1-7、JDK1-8运行时数据区的区别"   >
          <a href="#JDK1-7以前、JDK1-7、JDK1-8运行时数据区的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#JDK1-7以前、JDK1-7、JDK1-8运行时数据区的区别" class="headerlink" title="JDK1.7以前、JDK1.7、JDK1.8运行时数据区的区别"></a>JDK1.7以前、JDK1.7、JDK1.8运行时数据区的区别</h4>
      <ul>
<li><p>JDK1.7之前和JDK1.7对比：</p>
<p>JDK1.7之前：静态变量、字符串常量池存放在方法区（永久代）中。</p>
<p>JDK1.7：静态变量、字符串常量池不存放在方法区（永久代）中，而是转移到堆内存中。</p>
</li>
<li><p>JDK1.7和JDK1.8对比：</p>
<p>JDK1.7：永久代已经开始移除部分数据，如符号引用（Symbols）转移到了本地内存（Native Memory）;静态变量、字符串常量池转移到堆内存（Java heap）中;</p>
<p>JDK1.8：仍然保留方法区的概念，取消永久代PermGen，取而代之的是元空间MateSpace；</p>
</li>
</ul>

        <h4 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h4>
      <p>线程私有的：</p>
<ul>
<li>虚拟机栈</li>
<li>本地方法栈</li>
<li>程序计数器</li>
</ul>
<p>线程共享的：</p>
<ul>
<li>堆</li>
<li>方法区</li>
<li>直接内存（非运行时数据区的一部分）</li>
</ul>

        <h3 id="运行时数据区域介绍"   >
          <a href="#运行时数据区域介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行时数据区域介绍" class="headerlink" title="运行时数据区域介绍"></a>运行时数据区域介绍</h3>
      <ol>
<li><p><b>虚拟机栈</b></p>
<p>Java虚拟机栈是线程私有的，它的生命周期和线程相同，描述的是Java方法执行的内存模型，每次方法调用的数据都是通过栈传递的。</p>
<p>JVM Stack（虚拟机栈、线程栈或栈）中存放的是一个个的栈帧（方法栈）。</p>
<p>栈帧中包含有：</p>
<ul>
<li><p>局部变量表（Local Variable Table）</p>
<p>在编译程序代码的时候就可以确定栈帧中需要多大的局部变量表，具体大小可在编译后的Class文件中看到</p>
<p>局部变量表主要存放了编译期可知的各种数据类型（byte、short、int、long、float、double、char、boolean）、对象引用（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其它与此对象相关的位置）。</p>
</li>
<li><p>操作数栈（Operand Stack）</p>
<p>同样也可以在编译期确定大小，通过标准的栈操作（压栈和出栈）来访问，比如某个指令把一个值压入到操作数栈中，那么另外一个指令就可以弹出这个值来使用。虚拟机在操作数栈中存储数据的方式和在局部变量表中是一样的，对于byte、short以及char类型的值在压入到操作数栈之前会被转换为int类型。虚拟机把操作数栈作为它的工作区，大多数指令都要从这里弹出数据，执行运算，然后把结果压回操作数栈。</p>
</li>
<li><p>动态链接（Dynamic Linking）</p>
<p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用的过程中的动态链接。</p>
<p>在类加载阶段中的解析阶段会将符号引用转为直接引用，这种转化也称为静态解析，另外的一部分将在运行时转化为直接引用，这部分称为动态链接。</p>
</li>
<li><p>方法出口</p>
<p>方法开始执行后，只有2种方式可以退出：方法返回指令,异常退出。</p>
</li>
</ul>
</li>
<li><p><b>本地方法栈</b></p>
<p>和虚拟机栈的作用很相似，区别是：虚拟机栈为虚拟机执行Java方法(也就是字节码)服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p>
<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、方法出库等信息。</p>
<p>方法执行完毕后相应的栈帧也会出栈并释放内存空间。</p>
</li>
<li><p><b>程序计数器</b></p>
<p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p>
<p>另外，为了线程切换后能恢复到正确的执行位置，每个线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，属于线程私有内存。</p>
<p>两个作用：</p>
<ul>
<li>实现代码的流程控制</li>
<li>多线程环境下，记录当前线程执行的位置，为线程的切换使用</li>
</ul>
<p>注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p>
</li>
<li><p><b>堆</b></p>
<p>Java虚拟机所管理的内存中最大的一块，Java堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</p>
<p>几乎所有的对象都在堆中分配，但是随着JIT编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会让对象创建分配内存时发生一些变化，从JDK1.7开始默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用(也就是未逃逸出去)，那么对象将可以直接在栈上分配内存。</p>
<p>Java堆是垃圾收集器管理的主要区域，因此也被称为GC堆，由于现在垃圾收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：新生代和老年代；对于新生代还可以再细分为：Eden(生成区)、Form Survivor(S0幸存区)、To Survivor(S1幸存区)等。进一步划分的目的是为了更好地回收内存，或者更快地分配内存。</p>
<p><img src="/mdimages/image-20210711115120282.png" alt="image-20210711115120282"></p>
<p>内存图分布大致图：</p>
<p><img src="/mdimages/image-20210710180147508.png" alt="image-20210710180147508"></p>
<p>注：JDK1.8版本开始后方法区(HotSpot的永久代)被彻底移除了，取而代之的是元空间(MateSpace)，元空间使用的是本地内存。</p>
<p><b>Eden区</b>：Java新创建的对象大部分都是分配在Eden区(如果对象太大，则直接分配到老年代，可以通过配置-XX:PretenureSizeThreshold参数的值，大于该值的对象会直接进入老年代)。当Eden区内存不够的时候，就会触发MinorGC（新生代采用的是复制算法），对新生代进行一次垃圾回收。</p>
<p><b>SurvivorFrom区和To区</b>：在GC开始的时候，对象只会存在于Eden区和Survivor From区（S0区），Survivor To 区（S1区）是空的，一次MinorGC之后，Eden区和Survivor From区存活的对象会被复制到Survivor To 区中，然后会清空Eden区和Survivor From区，并对存活的对象的GC年龄+1，如果对象年龄达到了15，则直接分配到老年代。MinorGC完成后，Survivor From区和Survivor To 区的功能进行互换。下一次MinorGC时，会把Survivor To区和Eden区存活的对象复制到Survivor From区中去，并计算对象存活年龄。</p>
<p>注意：</p>
<p>1.存活对象每复制一次，对象的GC年龄就会+1，默认情况下，当对象被复制了15次后，就会进入老年代中了（这个次数可以通过-XX:MaxTenuringThreshold来配置修改）。</p>
<p>2.在Eden区内存几乎已经分配完后，虚拟机发起一次MinorGC，如果存活下来的对象Survivor From区都放不下的话，那么只好通过<b>分配担保机制</b>把这些新生代存活的对象直接转移到老年代。</p>
<p>3.当Eden区满了或者放不下了，触发一次MinorGC，将会把Eden区和Survivor From区存活下来的对象复制到Survivor To区，如果存活下来的对象Survivor To区放不下，则这些存活下来的对象全部提前进入老年代。</p>
<p>4.为了确保From区和To区两个区域之间每次复制都能顺利进行，From区和To区两个区的大小必须要保持一致，而且同一时间有一个区域一定是空的。虽然说这样的做法会导致部分空间浪费，但是综合起来还是值得的。</p>
<p>当老年代满了或者存放不下将要进入老年代的存活对象的时候，就会触发一次Full GC。</p>
</li>
<li><p>方法区</p>
<p>方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的是为了与Java堆区分开来。</p>
<p>方法区和永久代的关系</p>
<p>《Java虚拟机规范》只是规定了有方法区这个概念和它的作用，并没有规定如何区实现它。那么在不同的JVM上方法区的实现肯定是不同的。方法区和永久代的关系很像Java中接口和类的关系，类实现了接口，而永久代就是HotSpot虚拟机对虚拟机规范中方法区的一种实现方式。也就是说，永久代是HotSpot的概念，方法区是Java虚拟机规范中的定义，是一种规范，而永久代是一种实现。</p>
<p>JDK1.8之前永久代还在的时候通常可以通过以下这些参数来调节永久代的大小。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">-XX:PermSize = N   //方法区(永久代)初始大小</span><br><span class="line">-XX:MaxPermSize = N //方法区(永久代)最大大小，超过这个值将会抛出OutOfMemoryError异常:java.lang.OutOfMemoryError: PermGen</span><br></pre></td></tr></table></div></figure>

<p>JDK1.8开始，方法区(HotSpot的永久代)被彻底移除了，取而代之的是元空间(MetaSpace)，元空间使用的是本地内存。可以通过以下参数来调节元空间的大小。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">-XX:MetaspaceSize = N //设置Metaspace的初始大小</span><br><span class="line">-XX:MaxMetaspaceSize = N //设置Metaspace的最大大小</span><br></pre></td></tr></table></div></figure>

<p>元空间与永久代最大的不同就是，元空间使用的是本地内存，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p>
</li>
<li><p>本地内存</p>
<p>本地内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁使用，而且也可能导致OutOfMemoryError。</p>
<p>JDK1.4开始引入NIO(New Input/Output)类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因此避免了在Java堆和Native堆之间来回复制数据。</p>
<p>本地内存的分配不会受到Java堆的限制，但是，既然是内存就会受到本机总内存大小的限制。</p>
</li>
</ol>

        <h3 id="知识补充"   >
          <a href="#知识补充" class="heading-link"><i class="fas fa-link"></i></a><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3>
      <p>JIT编译器，也就是即时编译器。</p>
<p>JIT是一种提高程序运行效率的方法。通常，程序有两种运行方式：</p>
<p>静态编译：静态编译的程序在执行前全部被翻译为机器码；</p>
<p>动态解释：动态解释执行的则是一句一句边运行边翻译；</p>
<p>在JAVA编程语言和环境中，即时编译器(JIT)是一个把Java的字节码(包括需要被解释的指令的程序)转换成可以直接发送给处理器的指令的程序。比如一个Java程序，源码.java文件将由Java编译器编译成字节码.class文件，而不是编译成与某个特定的处理器硬件平台对应的指令代码。字节码是可以发送给任何平台并且能在那个平台上运行的独立于平台的代码。</p>
<p>分配担保机制：</p>
<p>老年代为新生代进行空间担保，新生代在进行MinorGC时需要经历如下判断</p>
<p>老年代最大可用连续空间是否大于新生代所有对象的总空间</p>
<p>大于，证明这次GC时安全的，进行MinorGC</p>
<p>小于：</p>
<p>是否允许担保失败</p>
<p>允许担保失败：老年代最大连续空间是否 大于 检测历次晋升老年代的平均大小</p>
<p>​                          大于 则进行MinorGC</p>
<p>​                          小于 则进行FullGC</p>
<p>不允许担保失败：则进行FullGC</p>
<p>​      </p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型-JMM</title>
    <url>/2021/07/14/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM/</url>
    <content><![CDATA[
        <h3 id="JMM的概念"   >
          <a href="#JMM的概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMM的概念" class="headerlink" title="JMM的概念"></a>JMM的概念</h3>
      <p>JMM是Java内存模型（java memory model）。</p>
<p>在不同的硬件产商和不同的操作系统下，内存的访问有一定的差异，所以会造成相同的代码运行在不同系统上会出现各种问题，所以<b>java内存模型（JMM）屏蔽掉各种硬件和操作系统的内存访问差异，以实现让java程序在各种平台下都达到一致的并发效果</b>。</p>
<p>Java内存模型规定所有的变量都存储在主内存中，包括实例变量、静态变量，但是不包括局部变量和方法参数。每个线程都有自己的工作内存，<b>线程的工作内存保存了该线程用到的变量和主内存的副本拷贝，线程对变量的操作都在工作内存中进行，线程不能直接读写主内存中的变量</b>。</p>
<p>不同的线程之间也无法访问对方工作内存的变量，线程之间变量值的传递均需要通过主内存来完成。</p>
<p>每个线程的工作内存都是独立的，线程操作数据只能在工作内存中进行，然后刷回到主内存，这就是Java内存模型定义的线程基本工作方式。</p>
<span id="more"></span>

<p><img src="/mdimages/image-20210715000154585.png" alt="image-20210715000154585"></p>

        <h3 id="主内存和工作内存的概念"   >
          <a href="#主内存和工作内存的概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#主内存和工作内存的概念" class="headerlink" title="主内存和工作内存的概念"></a>主内存和工作内存的概念</h3>
      <p>简单理解</p>
<p>主内存：其实就是Java堆内存，里面存放着程序中几乎所有的类实例对象等变量，属于线程共享；</p>
<p>工作内存：工作内存存放的是线程从主内存中拷贝过来的变量副本以及该线程用到的局部变量等，属于线程私有；</p>

        <h3 id="JMM的定义"   >
          <a href="#JMM的定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMM的定义" class="headerlink" title="JMM的定义"></a>JMM的定义</h3>
      <p>Java内存模型是围绕三个特征建立起来的，分别是：原子性、可见性、有序性。</p>

        <h4 id="原子性"   >
          <a href="#原子性" class="heading-link"><i class="fas fa-link"></i></a><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4>
      <p>原子性指一个操作是不可分割，不可中断的，一个线程在执行时不会被其它线程干扰。</p>

        <h4 id="可见性"   >
          <a href="#可见性" class="heading-link"><i class="fas fa-link"></i></a><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4>
      <p>可见性指当一个线程修改共享变量的值，其他线程能够立即知道被修改了。</p>
<p>Java中是利用volatile关键字来提供可见性的，当变量被volatile修饰时，这个变量被修改后会立刻刷新到主内存，当其他线程需要读取该变量时，会去主内存中读取新值。除了volatile关键字外，final和synchronized也能实现可见性。synchronized的原理是，在执行完进入unlock之前，必须将共享变量同步到主内存中。final修饰的变量，一旦初始化完成，如果没有对象溢出（指对象未初始化完成就可以被别的线程使用），那么对于其他线程都是可见的。</p>

        <h4 id="有序性"   >
          <a href="#有序性" class="heading-link"><i class="fas fa-link"></i></a><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4>
      <p>有序性指按照源码的执行顺序执行，禁止指令重排。</p>
<p>在Java中，可以使用synchronized或者volatile保证多线程之间操作的有序性。volatile关键字实现的原理：使用内存屏障达到禁止指令重排序，以保证有序性；synchronized关键字实现的原理：一个线程lock之后，必须unlock后，其他线程才可以重新lock，使得被synchronized包住的代码块在多线程之间是串行执行的。</p>

        <h3 id="JMM的八种内存交互操作"   >
          <a href="#JMM的八种内存交互操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMM的八种内存交互操作" class="headerlink" title="JMM的八种内存交互操作"></a>JMM的八种内存交互操作</h3>
      <ol>
<li>lock（锁定），作用于主内存中的变量，把变量标识为线程独占的状态。</li>
<li>read（读取），作用于主内存中的变量，把变量的值从主内存传输到线程的工作内存中，以便下一步的load操作使用。</li>
<li>load（加载），作用于工作内存中的变量，把read操作主内存的变量放入到工作内存的变量副本中。</li>
<li>use（使用），作用于工作内存中的变量，把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到该变量的值的字节码指令时将会执行这个操作。</li>
<li>assign（赋值），作用于工作内存的变量，它把一个从执行引擎中接收到的值赋值到工作内存的变量副本中，每当虚拟机遇到一个给变量赋值的字节码指令时将会执行这个操作。</li>
<li>store（存储），作用于工作内存的变量，它把一个工作内存中的变量值传送到主内存中，以便后续的write使用。</li>
<li>write（写入），作用于主内存中的变量，它把store操作从工作内存中得到的变量值放入主内存的变量中。</li>
<li>unlock（解锁），作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li>
</ol>
<p><img src="/mdimages/image-20210715000332941.png" alt="image-20210715000332941"></p>

        <h3 id="JMM的八种内存交互操作规则"   >
          <a href="#JMM的八种内存交互操作规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMM的八种内存交互操作规则" class="headerlink" title="JMM的八种内存交互操作规则"></a>JMM的八种内存交互操作规则</h3>
      <p>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。</p>
<p>一个变量同一时间只能有一个线程对其进行lock操作，多次lock之后，必须执行相同次数的unlock操作才可以解锁。</p>
<p>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值。</p>
<p>如果一个变量没有被lock，就不能对其进行unlock操作，也不能unlock一个被其他线程锁住的变量。</p>
<p>一个线程对一个变量进行unlock操作之前，必须先把此变量同步回主内存。</p>
<p>read（读取）操作后必须load（加载）操作，store（存储）操作后必须write（写入）操作。</p>
<p>不允许线程丢弃它最近的assign（赋值）操作，即工作内存中的变量数据改变之后，必须告知主内存。</p>
<p>不允许线程将没有assign（赋值）操作的数据从工作内存同步到主内存中。</p>

        <h3 id="知识补充"   >
          <a href="#知识补充" class="heading-link"><i class="fas fa-link"></i></a><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3>
      <p>Java线程安全性中的对象发布和逸出</p>
<p>什么是发布？</p>
<p>简单来说就是提供一个对象的引用给作用域之外的代码，比如return一个对象，或者作为参数传递到其他类的方法中。</p>
<p>什么是逸出？</p>
<p>如果一个类还没有构造结束就已经提供给了外部代码一个对象引用（即发布了该对象），这种现象叫做对象逸出，对象的逸出会破坏线程的安全性。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载器</title>
    <url>/2021/07/17/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[
        <h3 id="类加载器"   >
          <a href="#类加载器" class="heading-link"><i class="fas fa-link"></i></a><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3>
      <p>类加载器是<b>负责加载.class文件</b>的，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构，并且ClassLoader只负责class文件的加载，是否能够运行则由Execution Engine(执行引擎)决定。</p>
<p><img src="/mdimages/image-20210716102040395.png" alt="image-20210716102040395"></p>

        <h3 id="类加载器的流程"   >
          <a href="#类加载器的流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#类加载器的流程" class="headerlink" title="类加载器的流程"></a>类加载器的流程</h3>
      <p>从类被加载到虚拟机内存中开始，到释放内存总共有7个步骤：加载，验证，准备，解析，初始化，使用，卸载。其中<b>验证，准备，解析</b>三个步骤统称为连接。</p>
<p><img src="/mdimages/image-20210716105552793.png" alt="image-20210716105552793"></p>
<span id="more"></span>

<ol>
<li><p>加载</p>
<ul>
<li>将class文件加载到虚拟机内存中</li>
<li>将静态数据结构转化成方法区中运行时的数据结构</li>
<li>在堆中生成一个代表这个类的java.lang.Class对象作为数据访问的入口</li>
</ul>
</li>
<li><p>连接</p>
<ul>
<li><p>验证：确保加载的类符合JVM规范和安全，保证被校验类的方法在运行时不会做出危害虚拟机的事情，其实就是一个安全检查</p>
</li>
<li><p>准备：为static变量(静态变量)在方法区中分配内存空间，设置变量的初始值。例如static int a = 3 (注意：准备阶段只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是对象初始化时赋值的)。</p>
<p><b style="color:red">注意</b>：类变量所使用的内存都应当在方法区中进行分配的。不过需要注意的是：JDK1.7之前，HotSpot使用永久代来实现方法区的时候，类变量(静态变量)，字符串常量池都是存放在永久代中的。而在JDK1.7及之后，HotSpot已经把永久代移除了，把原先放在永久代中的字符串常量池、静态变量移动到堆中，这个时候类变量则会跟随Class对象一起存放在Java堆中。</p>
<p>准备阶段所设置的初始值”通常情况”下是数据类型默认的零值（如0、0L、null、false等），比如我们定义了<font color="Orange">public static int value = 1</font>，那么value变量在准备阶段的初始值就是0，而不是1（初始化阶段才会赋值）。<b style="color:red">特殊情况</b>：比如给value变量加上了final关键字，变成<font color="Orange">public static final int value = 1</font>；那么准备阶段的时候value的值就被赋值为1。</p>
<p><img src="/mdimages/image-20210716143746833.png" alt="image-20210716143746833"></p>
</li>
<li><p>解析：虚拟机将常量池内的符合引用替换成直接引用的过程（符号引用比如import.java.util.ArrayList这就算符号引用，直接引用就是指针或者对象地址，注意引用对象一定是在内存中进行的）</p>
</li>
</ul>
</li>
<li><p>初始化</p>
<p>初始化就是执行类构造器方法的&lt;clinit&gt;()的过程，而且要保证执行前父类的类构造器方法的&lt;clinit&gt;()方法执行完毕。这个方法是编译之后自动生成的，顺序执行所有类变量（static修饰的成员变量）显示初始化和静态代码块中的语句。此时准备阶段时的那个 static int a 由默认初始化的0变成了显示初始化的3，由于执行顺序的原因，初始化阶段类变量如果在静态代码块中又进行了更改，会覆盖类变量的显示初始化，最终值会是静态代码块中的赋值。</p>
</li>
<li><p>卸载</p>
<p>卸载类即该类的Class对象被GC。</p>
<p>卸载类需要满足3个要求：</p>
<ul>
<li><p>该类的所有实例对象都已被GC，也就是说堆中不存在该类的实例对象。</p>
</li>
<li><p>该类没有在其他任何地方被引用</p>
</li>
<li><p>该类的类加载器的实例已被GC</p>
</li>
</ul>
<p>在JVM生命周期内，由JVM自带的类加载器加载的类是不会被卸载的，但是由我们自定义的类加载器加载的类是可能被卸载的。</p>
</li>
</ol>

        <h3 id="内置的类加载器"   >
          <a href="#内置的类加载器" class="heading-link"><i class="fas fa-link"></i></a><a href="#内置的类加载器" class="headerlink" title="内置的类加载器"></a>内置的类加载器</h3>
      <p>JVM中内置了三个重要的ClassLoader，除了BootstrapClassLoader其他类加载器均由Java实现且全部继承自<font color="Orange">java.lang.ClassLoader</font>:</p>
<ol>
<li><b>BootstrapClassLoader(启动类加载器)</b>：最顶层的加载类，由C++实现，负责加载<font color="Orange">%JAVA_HOME%/lib</font>目录下的jar包和类或者被<font color="Orange">-Xbootclasspath</font>参数指定的路径中的所有类。</li>
<li><b>ExtensionClassLoader(扩展类加载器)</b>：主要负责加载目录<font color="Orange">%JRE_HOME%/lib/ext</font>目录下的jar包和类，或被<font color="Orange">java.ext.dirs</font>系统变量所指定的路径下的jar包。</li>
<li><b>AppClassLoader(应用程序类加载器)</b>：面向用户的加载器，负责加载当前应用程序<font color="Orange">classpath</font>下的所有jar包和类。</li>
</ol>

        <h3 id="类加载器的加载顺序"   >
          <a href="#类加载器的加载顺序" class="heading-link"><i class="fas fa-link"></i></a><a href="#类加载器的加载顺序" class="headerlink" title="类加载器的加载顺序"></a>类加载器的加载顺序</h3>
      <p>加载一个Class类的顺序也是有优先级的，类加载器从最顶层开始往下的顺序是：</p>
<ol>
<li>BootStrap ClassLoader：rt.jar</li>
<li>Extension ClassLoader：加载扩展的jar包</li>
<li>App ClassLoader：指定的classpath下面的jar包</li>
<li>User Defined ClassLoader：自定义的类加载器</li>
</ol>

        <h3 id="双亲委派机制"   >
          <a href="#双亲委派机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3>
      
        <h4 id="概念"   >
          <a href="#概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#概念" class="headerlink" title="概念"></a>概念</h4>
      <p>每一个类都有一个对应它的类加载器。系统中的ClassLoder在协同工作的时候会默认使用<b style="color:red">双亲委派机制</b>。即在类加载的时候，系统会首先判断当前类是否被加载过，已经被加载过的类直接返回，否则才会尝试加载。加载的时候，首先会把该请求委派该父类加载器的<font color="orange">loadClass()</font>处理，因此所有的请求最终都应该传送到顶层的启动类加载器<font color="orange">BootstrapClassLoader</font>中。当父类加载器无法处理时，才由自己处理，当父类加载器为null时，会使用启动类加载器<font color="orange">BootstrapClassLoader</font>作为父类加载器。</p>
<p><img src="/mdimages/image-20210716152336873.png" alt="image-20210716152336873"></p>
<p>当一个类收到了加载请求时，它是不会先自己去尝试加载的，而是委派给父类去完成。</p>
<p>比如，new了一个Person，这个Person是自定义的类，如果我们要加载它，就会先委派<font color="orange">App ClassLoader</font>的父类<font color="orange">Extension ClassLoader</font>去尝试加载Person类，如果<font color="orange">Extension ClassLoader</font>可以完成这个请求，那么则由它负责加载类，如果不能完成该请求（也就是父类加载器都没有找到记载所需的Class）时，那么将继续委派给顶层<font color="orange">BootstrapClassLoader</font>去尝试加载，只有当父类加载器都反馈无法完成这个请求时，子类加载器才会自行尝试加载。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassLoaderDemo的类加载器是：&quot;</span> + ClassLoaderDemo.class.getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassLoaderDemo的父类加载器是：&quot;</span> + ClassLoaderDemo.class.getClassLoader().getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassLoaderDemo的父类的父类加载器是：&quot;</span> + ClassLoaderDemo.class.getClassLoader().getParent().getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">输出结果</span><br><span class="line">ClassLoaderDemo的类加载器是：sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">ClassLoaderDemo的父类加载器是：sun.misc.Launcher$ExtClassLoader@4554617c</span><br><span class="line">ClassLoaderDemo的父类的父类加载器是：<span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>可以看出<font color="orange">App ClassLoader</font>的父类加载器是<font color="orange">Extension ClassLoader</font>，而<font color="orange">Extension ClassLoader</font>的父类加载器为null，<b>null并不代表</b><font color="orange">Extension ClassLoader</font><b>没有父类加载器</b>，而是<font color="orange">BootstrapClassLoader</font>。</p>
<p><img src="/mdimages/image-20210716182038906.png" alt="image-20210716182038906"></p>
<p><b style="color:red">注意</b>：类加载器之间的”父子”关系不是通过继承来体现的，是由”优先级”来决定的。</p>

        <h4 id="双亲委派机制的好处"   >
          <a href="#双亲委派机制的好处" class="heading-link"><i class="fas fa-link"></i></a><a href="#双亲委派机制的好处" class="headerlink" title="双亲委派机制的好处"></a>双亲委派机制的好处</h4>
      <p>双亲委派机制保证了Java程序的稳定运行，可以避免类的重复加载（JVM区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了Java的核心API不被篡改。</p>
<p>比如加载位于rt.jar包中的类时不管是哪个类加载器加载的，最终都会委托到<font color="orange">BootstrapClassLoader</font>进行加载，保证使用了不同的类加载器得到的都是同一个结果。</p>
<p>假如没有使用双亲委派机制的话，既是每个类加载器加载自己的话就会出现问题了，比如我们自己定义了一个<font color="orange">java.lang.Object</font>类，那么程序运行的时候，系统就会出现多个不同的<font color="orange">Object</font>类。</p>

        <h3 id="如何不使用双亲委派机制"   >
          <a href="#如何不使用双亲委派机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何不使用双亲委派机制" class="headerlink" title="如何不使用双亲委派机制"></a>如何不使用双亲委派机制</h3>
      <p>自定义类加载器，需要继承<font color="orange">ClassLoader</font>类。如果不想打破双亲委派机制，就重写<font color="orange">ClassLoader</font>类中的<font color="orange">findClass()</font>方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派机制则需要重写<font color="orange">loadClass()</font>方法。</p>

        <h3 id="自定义类加载器"   >
          <a href="#自定义类加载器" class="heading-link"><i class="fas fa-link"></i></a><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3>
      <p>除了<font color="orange">BootstrapClassLoader</font>其他类加载器均由Java实现且全部继承自<font color="orange">java.lang.ClassLoader</font>。</p>
<p>如果需要自定义自己的类加载器，则需要继承<font color="orange">java.lang.ClassLoader</font>类。</p>

        <h3 id="知识补充"   >
          <a href="#知识补充" class="heading-link"><i class="fas fa-link"></i></a><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3>
      
        <h4 id="lt-clinit-gt-初始化-静态方法"   >
          <a href="#lt-clinit-gt-初始化-静态方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-clinit-gt-初始化-静态方法" class="headerlink" title="&lt;clinit&gt;初始化/静态方法"></a>&lt;clinit&gt;初始化/静态方法</h4>
      <p>类型初始化方法主要是对static变量进行初始化操作，对static变量和static代码块初始化的逻辑全部封装在&lt;clinit&gt;方法中。</p>
<p>java.lang.Class.forName(String name, boolean initialize, ClassLoader loader) ，第二个参数就是是否需要初始化。</p>
<p><img src="/mdimages/image-20210716174241666.png" alt="image-20210716174241666"></p>
<p>Java类型初始化过程中对static变量的初始化操作依赖于static变量和static代码块的前后关系，static变量与static代码块申明的位置关系会导致java编译器生成&lt;clinit&gt;方法字节码。</p>
<p>类型的初始化方法&lt;clinit&gt;方法只在该类型被加载时才执行，且只执行一次。</p>

        <h4 id="对象实例化方法-lt-init-gt"   >
          <a href="#对象实例化方法-lt-init-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象实例化方法-lt-init-gt" class="headerlink" title="对象实例化方法&lt;init&gt;"></a>对象实例化方法&lt;init&gt;</h4>
      <p>Java对象在被创建时，会进行实例化操作，该部分操作封装在&lt;init&gt;方法中，并且子类的&lt;init&gt;方法中会首先对父类的&lt;init&gt;方法调用。</p>

        <h4 id="init和clinit区别"   >
          <a href="#init和clinit区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#init和clinit区别" class="headerlink" title="init和clinit区别"></a>init和clinit区别</h4>
      <ul>
<li><p>init和clinit方法执行时机不同</p>
<p>init是对象构造器方法，也就是在程序执行new对象调用该对象类的constructor构造方法时才会执行init方法，而clinit是类构造器方法，是JVM进行类加载的时候，初始化阶段jvm会调用clinit方法。</p>
</li>
<li><p>init和clinit方法执行目的不同</p>
</li>
</ul>
<p>init是instance实例构造器，对非静态变量解析初始化，而clinit是class类构造器对静态变量，静态代码块进行初始化。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">static</span> Log log = LogFactory.getLog(); <span class="comment">// &lt;clinit&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">1</span>;   <span class="comment">// &lt;init&gt;</span></span><br><span class="line"> </span><br><span class="line">   X()&#123;</span><br><span class="line">      <span class="comment">// &lt;init&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="comment">// &lt;init&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="comment">// &lt;clinit&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>clinit一定优先于init。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之垃圾回收机制（GC）</title>
    <url>/2021/07/18/Java%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%EF%BC%88GC%EF%BC%89/</url>
    <content><![CDATA[
        <h3 id="什么是垃圾"   >
          <a href="#什么是垃圾" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h3>
      <p>简单理解就是分配的内存空间不再被使用到的就是垃圾，比如Person  p1 = null。</p>

        <h3 id="为什么需要垃圾回收"   >
          <a href="#为什么需要垃圾回收" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么需要垃圾回收" class="headerlink" title="为什么需要垃圾回收"></a>为什么需要垃圾回收</h3>
      <p>随着内存空间的不断分配，内存迟早都会被消耗空，所以必须进行垃圾回收。</p>

        <h3 id="如何确认哪些对象是需要被回收的"   >
          <a href="#如何确认哪些对象是需要被回收的" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何确认哪些对象是需要被回收的" class="headerlink" title="如何确认哪些对象是需要被回收的"></a>如何确认哪些对象是需要被回收的</h3>
      <span id="more"></span>


        <h4 id="引用计数法"   >
          <a href="#引用计数法" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用计数法" class="headerlink" title="引用计数法"></a><font color="red">引用计数法</font></h4>
      <p>这个算法的实现就是，给对象中添加一个引用计数器，每当一个地方引用这个对象时，计数器就加1；当引用失效时，计数器减1；任何时候计数器值为0的对象就是不可能再被使用的。</p>
<p><b>这种算法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，最主要的原因就是它很难解决对象之间相互引用的问题。</b>对象之间的相互引用问题，如下面代码所示：除了对象objA和objB相互引用者着对方之外，这两个对象之间再无任何引用关系，但是它们因为相互引用对方，导致它们的引用计数器都不为0，所以GC回收的时候无法回收它们。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGc</span> </span>&#123;</span><br><span class="line">    Object instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReferenceCountingGc objA = <span class="keyword">new</span> ReferenceCountingGc();</span><br><span class="line">        ReferenceCountingGc objB = <span class="keyword">new</span> ReferenceCountingGc();</span><br><span class="line">        objA.instance = objB;</span><br><span class="line">        objB.instance = objA;</span><br><span class="line">        objA = <span class="keyword">null</span>;</span><br><span class="line">        objB = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="可达性分析法"   >
          <a href="#可达性分析法" class="heading-link"><i class="fas fa-link"></i></a><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a><font color="red">可达性分析法</font></h4>
      <p><font color="orange">这个算法的基本思想就是通过一系列称为”GC Roots”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链（即GC Roots到对象不可达）时，则证明此对象是不可用的。</font></p>
<p><img src="/mdimages/image-20210718150611347.png" alt="image-20210718150611347"></p>
<p>由图可知，Object5、Object6、Object7都没有到GCRoots对象的引用链，即使它们之间有引用链，它们还是会被当初垃圾处理回收。</p>
<p>可作为GC Roots的对象包括下面几种：</p>
<ul>
<li><b>虚拟机栈（栈帧中的局部变量表）中引用的对象。</b></li>
<li><b>方法区中的类静态属性引用的对象。</b></li>
<li><b>方法区中常量引用的对象。</b></li>
<li><b>本地方法栈中JNI(Native方法)引用的对象。</b></li>
</ul>

        <h3 id="四种Java引用状态"   >
          <a href="#四种Java引用状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#四种Java引用状态" class="headerlink" title="四种Java引用状态"></a>四种Java引用状态</h3>
      <p>无论是通过引用计数法判断对象引用数量，还是通过可达性分析法判断对象的引用链是否可达，判断对象的存活都与”引用”有关。</p>
<p>JDK1.2之前，Java中引用的定义很传统，如果引用类型（reference）的数据存储的数值代表的是另一块内存的起始地址，就称这块内存代表一个引用。</p>
<p>JDK1.2以后，Java对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种。</p>
<p>之前已经详细讲解过Java对象的强、软、弱、虚引用，详细文章可查看<span class="exturl"><a class="exturl__link"   href="https://clownotm.github.io/2021/06/09/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%BA%E3%80%81%E8%BD%AF%E3%80%81%E5%BC%B1%E3%80%81%E8%99%9A%E5%BC%95%E7%94%A8/" >Java对象的强、软、弱、虚引用 | Clown’s bolg (clownotm.github.io)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，这里简单的说明下：</p>
<ul>
<li><p><font color="orange">强引用</font></p>
<p>只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象，如Person p = new Person()。</p>
</li>
<li><p><font color="orange">软引用</font></p>
<p>通过java.lang.ref.SoftReference类来实现，当JVM内存不足时，便会回收软引用所引用的对象。</p>
</li>
<li><p><font color="orange">弱引用</font></p>
<p>通过java.lang.ref.WeakReference类来实现，只要垃圾回收器回收垃圾时，无论内存足不足够都会把弱引用回收掉。</p>
</li>
<li><p><font color="orange">虚引用</font></p>
<p>通过java.lang.ref.PhantomReference类来实现，若一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</p>
</li>
</ul>

        <h3 id="不可达的对象并非”非死不可”"   >
          <a href="#不可达的对象并非”非死不可”" class="heading-link"><i class="fas fa-link"></i></a><a href="#不可达的对象并非”非死不可”" class="headerlink" title="不可达的对象并非”非死不可”"></a>不可达的对象并非”非死不可”</h3>
      <p>对于可达性分析而言，不可达的对象并非是”非死不可”的，<font color="orange">若要宣判一个对象死亡，至少需要经历两次标记阶段。</font></p>
<p>1.如果对象在进行可达性分析之后发现没有与GCRoots相连的引用链，则该对象被第一次标记并进行一次筛选，<font color="orange">筛选条件为是否有必要执行该对象的finalize方法</font>，若对象没有覆盖finalize方法或者该finalize方法已经被虚拟机执行过了，则均视作不必要执行该对象的finalize方法，即该对象将会被回收。反之，若对象覆盖了finalize方法并且该finalize方法并未被执行过，那么，这个对象会被放置在一个叫F-Queue的队列中，之后会由虚拟机自动建立的、优先级低的Finalizer线程去执行，而虚拟机不必要等待该线程执行结束，即虚拟机只负责建立线程，其他的事情交给此线程去处理。</p>
<p>2.对F-Queue中对象进行第二次标记，如果对象在finalize方法中拯救了自己，即关联上了GC Roots引用链（比如把this关键字赋值给其他变量），那么在第二次标记的时候该对象将从”即将回收”的集合中移除，如果对象还是没有拯救自己，那么就会被回收。</p>
<p><font color="red">注意</font>：一个对象在finalize()方法中只能拯救自己一次，第二次就被回收，因为对象的finalize()方法最多被JVM虚拟机调用一次。</p>

        <h3 id="方法区的垃圾回收"   >
          <a href="#方法区的垃圾回收" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法区的垃圾回收" class="headerlink" title="方法区的垃圾回收"></a>方法区的垃圾回收</h3>
      <p>方法区的垃圾回收主要回收两部分内容：<font color="orange">1.废弃常量。2.无用的类</font>。</p>

        <h4 id="如何判断废弃常量"   >
          <a href="#如何判断废弃常量" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何判断废弃常量" class="headerlink" title="如何判断废弃常量"></a>如何判断废弃常量</h4>
      <p>以字面量回收为例，如果一个字符串”abc”已经进入常量池，但是当前系统没有任何一个String对象引用了叫做”abc”的字面量，那么，如果发生垃圾回收并且有必要时，”abc”就会被系统移出常量池。常量池中的其他类(接口)、方法、字段的符号引用也与此类似。</p>

        <h4 id="如何判断无用的类"   >
          <a href="#如何判断无用的类" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何判断无用的类" class="headerlink" title="如何判断无用的类"></a>如何判断无用的类</h4>
      <p>类需要同时满足下面3个条件才能算”<b>无用的类</b>“：</p>
<ol>
<li><font color="orange">该类的所有实例都已经被回收了，即Java堆中不存在该类的任何实例。</font></li>
<li><font color="orange">加载该类的ClassLoader类加载器已经被回收。</font></li>
<li><font color="orange">该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</font></li>
</ol>
<p>满足以上三个条件的类<font color="red">可以</font>进行垃圾回收，但是并不是无用的就被回收，虚拟机提供了一些参数供我们配置。</p>

        <h3 id="垃圾收集算法"   >
          <a href="#垃圾收集算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3>
      
        <h4 id="标记-清除算法（Mark-Sweep）"   >
          <a href="#标记-清除算法（Mark-Sweep）" class="heading-link"><i class="fas fa-link"></i></a><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a><b style="color:red">标记-清除算法（Mark-Sweep）</b></h4>
      <p><font color="orange">最基础的算法，分为”标记”和”清除”两个阶段：首先标记出所有需要回收的对象，标记完成后统一回收所有被标记的对象。</font>这种算法的不足主要体现在效率和空间，</p>
<p>从效率的角度来看，标记和清除两个过程的效率都不高；</p>
<p>从空间的角度来看，标记清除后会产生大量不连续的内存碎片，内存碎片太多可能会导致以后程序运行过程中在需要分配较大对象时，无法找到足够的连续内存而不得不提前触发一次垃圾收集。</p>
<p>标记-清除算法执行过程如下图所示：</p>
<p><img src="/mdimages/image-20210718220703120.png" alt="image-20210718220703120"></p>

        <h4 id="复制算法（Mark-Sweep）"   >
          <a href="#复制算法（Mark-Sweep）" class="heading-link"><i class="fas fa-link"></i></a><a href="#复制算法（Mark-Sweep）" class="headerlink" title="复制算法（Mark-Sweep）"></a><b style="color:red">复制算法（Mark-Sweep）</b></h4>
      <p>复制算法是为了解决效率问题而出现的，<font color="orange">它将可用的内存分为两块，每次只用其中一块，当这一块内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已经使用过的内存空间一次性清理掉。</font>这样每次只需要对内存区间的一半进行内存回收，内存分配时也不需要考虑内存碎片等复杂情况。</p>
<p>复制算法的执行过程如下图所示：</p>
<p><img src="/mdimages/image-20210718221852502.png" alt="image-20210718221852502"></p>
<p>复制算法有个缺点，<font color="orange">内存缩小为原来的一半，</font>这样代价太高了。现在的商用虚拟机都采用这种算法来<font color="orange">回收新生代</font>，不过研究表明1:1的比例非常不科学，因此<font color="orange">新生代的内存被划分为一块较大的Eden区空间和两块较小的Survivor区空间，每次使用Eden区和其中一块Survivor区</font>。每次垃圾回收时，将Eden区和Survivor from区中还存活着的对象一次性复制到另外一块Survivor To区中，最后清理掉Eden区和刚才用过的Survivor From区空间，然后Survivor From和Survivor To区功能互换。HotSpot虚拟机默认Eden区和Survivor From区和Survivor To区的比例为8:1:1，也就是说每次新生代中可用内存空间为整个新生代容量的90%。当然，我们没办法保证每次回收都只有不多余10%的对象存活，当Survivor To区内存空间不够用时，需要依赖老年代进行分配担保。</p>

        <h4 id="标记-整理算法（Mark-Sweep）"   >
          <a href="#标记-整理算法（Mark-Sweep）" class="heading-link"><i class="fas fa-link"></i></a><a href="#标记-整理算法（Mark-Sweep）" class="headerlink" title="标记-整理算法（Mark-Sweep）"></a><b style="color:red">标记-整理算法（Mark-Sweep）</b></h4>
      <p>复制算法在对象存活率较高的场景下要进行大量的复制操作，效率很低。而且万一对象100%存活，那么需要有额外的空间进行分配担保。老年代都是不易被回收的对象，对象存活率高，因此一般不能直接选用复制算法。<font color="orange">根据老年代的特点，提出了另外一种标记-整理算法，过程与标记-清除算法一样，不过不是直接对可回收对象进行清理，而是让所有存活对象都向一端移动，然后直接清理掉边界以外的内存。</font></p>
<p>标记-整理算法的执行过程如下图所示：</p>
<p><img src="/mdimages/image-20210718224736974.png" alt="image-20210718224736974"></p>

        <h4 id="分代收集算法（Mark-Sweep）"   >
          <a href="#分代收集算法（Mark-Sweep）" class="heading-link"><i class="fas fa-link"></i></a><a href="#分代收集算法（Mark-Sweep）" class="headerlink" title="分代收集算法（Mark-Sweep）"></a><b style="color:red">分代收集算法（Mark-Sweep）</b></h4>
      <p>现代虚拟机基本都采用<font color="orange">分代收集算法</font>来进行垃圾回收。这种算法没有什么新的思想，只是根据对象的生命周期的不同将内存划分为几块，然后根据各块的特点采用最适当的收集算法。一般将Java堆内存分为新生代和老年代，<font color="orange">大批量对象死去、少量对象存活的（新生代），使用复制算法，复制成本低；对象存活率高、没有额外空间进行分配担保的（老年代），采用标记-清理算法或者标记-整理算法。</font><font color="red">这也是HotSpot虚拟机为什么要分为新生代和老年代的原因</font>。</p>

        <h3 id="垃圾收集器"   >
          <a href="#垃圾收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3>
      <p>垃圾收集器就是上面垃圾收集算法的具体实现，不同虚拟机所提供的垃圾收集器可能会有很大差别，我们大部分使用的是HotSpot，HotSpot虚拟机所包含的所有收集器如下图所示：</p>
<p><img src="/mdimages/image-20210718231637524.png" alt="image-20210718231637524"></p>
<p>上图所展示的是7种作用于不同分代的收集器，<font color="orange">如果两个收集器之间存在连线，那么说明它们可以搭配使用。</font></p>

        <h4 id="Serial收集器"   >
          <a href="#Serial收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a><b>Serial收集器</b></h4>
      <p>串行收集器是一个最古老，最稳定以及效率高的收集器，只使用一个线程去回收，但<font color="orange">在进行垃圾收集过程种可能会产生较长的停顿（Stop-The-World）</font>。虽然在收集垃圾过程种需要暂停所有其他的工作线程，但是它简单高效，对于限定单个CPU环境来说，<font color="orange">没有线程交互（多线程情况）的开销可以获得最高的单线程垃圾收集效率</font>，因此Serial垃圾收集器依然是java虚拟机运行在Client模式下默认的新生代垃圾收集器。</p>
<p><font color="orange">简单理解,Serial垃圾收集器是一个采用复制算法的单线程的收集器，单线程一方面意味着它只会使用一个CPU或一条线程去完成垃圾收集工作，另一方面也意味着它进行垃圾收集时必须暂停其他线程的所有工作，直到它收集结束为止</font>。</p>
<p><img src="/mdimages/image-20210718233807998.png" alt="image-20210718233807998"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">对应JVM参数是：-XX:+UseSerialGC</span><br><span class="line">开启后会使用：Serial(Young区用) + Serial Old(Old区用)的收集器组合</span><br><span class="line">表示：新生代、老年代都会使用串行垃圾回收器；新生代使用复制算法，老年代使用标记-整理算法</span><br></pre></td></tr></table></div></figure>


        <h4 id="ParNew收集器"   >
          <a href="#ParNew收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a><b>ParNew收集器</b></h4>
      <p><font color="orange">ParNew收集器其实就是Serial收集器新生代的并行多线程版本，使用多线程进行垃圾回收，垃圾回收时也会Stop-The-World暂停其他工作线程直到它收集结束</font>。最常见的应用场景是配合<font color="red">老年代的CMS GC</font>工作，其余的行为和Serial收集器完全一样，<font color="blue">它是很多Java虚拟机运行在Server模式下新生代的默认垃圾收集器</font>。</p>
<p><img src="/mdimages/image-20210719113649178.png" alt="image-20210719113649178"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">对应JVM参数是：-XX:+UseParNewGC （启用ParNew收集器，只影响新生代的收集，不影响老年代）</span><br><span class="line">开启后会使用：ParNew(Young区用) + Serial Old(Old区用)的收集器组合</span><br><span class="line">表示：新生代使用并行垃圾回收器，老年代使用串行垃圾回收器；新生代使用复制算法，老年代使用标记-整理算法</span><br></pre></td></tr></table></div></figure>

<p>但是，当你启用ParNewGC收集器的时候，JDK1.8已经不再推荐这样的搭配（ParNewGC+SerialOldGC）</p>
<p><img src="/mdimages/image-20210719113334010.png" alt="image-20210719113334010"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">另：-XX:ParallelGCThreads 可以通过该JVM参数，限制垃圾回收线程数量，默认开启和CPU数目相同的线程数 </span><br></pre></td></tr></table></div></figure>


        <h4 id="Parallel-Scavenge收集器"   >
          <a href="#Parallel-Scavenge收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h4>
      <p>Parallel Scavenge收集器类似<font color="red">ParNew</font>也是一个<font color="red">新生代</font>垃圾收集器，使用复制算法，也是并行的多线程垃圾收集器，<font color="red">俗称吞吐量优先收集器</font>。简单理解：串行收集器在新生代和老年代的并行化。</p>
<p><font color="red">Parallel Scavenge收集器的目标是达到一个可控制的吞吐量</font>。所谓吞吐量就是CPU用于运行用户代码时间与CPU总消耗时间的比值，即<font color="red">吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）</font>，比如虚拟机总运行时间100分钟，垃圾收集时间1分钟，那么吞吐量就是99%，另外<font color="red">Parallel Scavenge收集器是虚拟机运行在Server模式下的默认垃圾收集器</font>.</p>
<p>停顿时间短适合需要与用户交互的程序，良好的响应速度能提升用户体验；高吞吐量则可以高效率利用CPU时间，尽快完成运算任务，主要适合在后台运算而不需要太多交互的任务。</p>
<p><font color="red">自适应调节策略也是Parallel Scavenge收集器与ParNew收集器的一个重要区别。</font>（自适应调节策略：虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量）。<font color="red">当我们对于垃圾收集器运作原理不太了解，以至于在优化比较困难的时候，我们可以使用Parallel Scavenge收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成。</font></p>
<p><img src="/mdimages/image-20210719232103854.png" alt="image-20210719232103854"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">-XX:+UseAdaptiveSizePolicy  这是一个开关参数，参数打开之后，就不需要手动指定新生代大小、Eden区和Survivor参数等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</span><br><span class="line">-XX:MaxGCPauseMillis        控制最大垃圾收集停顿时间</span><br><span class="line">-XX:GCTimeRatio             控制吞吐量大小</span><br><span class="line">-XX:ParallelGCThreads=N       表示启动多少个GC线程</span><br><span class="line">CPU &gt; 8  N=5/8 * 实际个数</span><br><span class="line">CPU &lt; 8  N=实际个数</span><br><span class="line"></span><br><span class="line">对应JVM参数是：-XX:+UseParallelGC 或 -XX:+UseParallelOldGC（可互相激活，使用Parallel Scavenge收集器）</span><br><span class="line">开启后会使用：Parallel Scavenge(Young区用)+ Parallel Old(Old区用)的收集器组合</span><br><span class="line">表示：新生代和老年代都使用吞吐量优先收集器；新生代使用复制算法，老年代使用标记-整理算法</span><br></pre></td></tr></table></div></figure>


        <h4 id="Serial-Old收集器"   >
          <a href="#Serial-Old收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h4>
      <p><font color="red">serial Old是Serial垃圾收集器老年代版本</font>，它同样是个单线程的收集器，使用标记-整理算法，这个收集器主要是运行在Client模式下的虚拟机默认的老年代垃圾收集器。</p>
<p>在Server模式下，主要有两个用途（</p>
<p>1.在JDK1.5之前版本中与新生代的Parallel Scavenge收集器搭配使用。</p>
<p>2.<font color="red">作为老年代版本中使用CMS收集器的后备垃圾收集方案</font>。</p>
<p><img src="/mdimages/image-20210718233807998.png" alt="image-20210718233807998"></p>

        <h4 id="Parallel-Old收集器"   >
          <a href="#Parallel-Old收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h4>
      <p><font color="red">Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用多线程和”标记-整理”算法</font>。Parallel Old收集器在JDK1.6才开始提供。</p>
<p>在JDK1.6之前，新生代使用Parallel Scavenge收集器只能搭配老年代的Serial Old收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，在JDK1.6之前(Parallel Scavenge + Serial Old)。</p>
<p>Parallel Old正是为了在老年代同样提供吞吐量优先的垃圾收集器，<font color="red">如果系统对吞吐量要求比较高，JDK1.8后可以优先考虑新生代Parallel Scavenge 和 老年代 Parallel Old收集器的搭配使用</font>。在JDK1.8及以后（Parallel Scavenge +  Parallel Old）。</p>
<p><img src="/mdimages/image-20210719233814460.png" alt="image-20210719233814460"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">对应JVM参数是：-XX:+UseParallelOldGC 使用Parallel Old垃圾收集器</span><br><span class="line">开启后会使用：新生代 Parallel Scavenge + 老年代 Parallel Old</span><br></pre></td></tr></table></div></figure>


        <h4 id="CMS收集器"   >
          <a href="#CMS收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h4>
      <p><font color="red">CMS（Concurrent Mark Sweep：并发标记清除）收集器是一种以获取最短回收停顿时间为目标的收集器，使用标记-清除算法</font>。适合应用在互联网站或者B/S系统的服务器上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短。CMS非常适合堆内存大、CPU核数多的服务器端应用，也是G1出现之前大型应用的首选垃圾收集器。</p>
<p>收集过程分为如下四步：</p>
<ol>
<li><font color="red">初始标记</font>，标记GCRoots能直接关联到的对象，时间很短。</li>
<li><font color="red">并发标记</font>，进行GCRoots Tracing（可达性分析）过程，时间很长。</li>
<li><font color="red">重新标记</font>，修正并发标记期间因为用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，时间较长。</li>
<li><font color="red">并发清除</font>，回收内存空间，时间很长。</li>
</ol>
<p>其中，并发标记和并发清除这两个阶段耗时最长，但是可以与用户线程并发执行。运行过程如下图所示：</p>
<p><img src="/mdimages/image-20210720002004175.png" alt="image-20210720002004175"></p>
<p>说明：</p>
<p>1.对CPU资源非常敏感，可能会导致应用程序变慢，吞吐量下降。</p>
<p>2.无法处理”浮动垃圾”，因为在并发清理阶段，用户线程还在运行2，自然就会产生新的垃圾，而在此次收集中无法收集它们，只能留到下次收集，这部分垃圾称为”浮动垃圾”。<font color="red">同时，由于用户线程并发执行，CMS在收集与应用线程同时会增加对堆内存的占用，也就是CMS必须要在老年代堆内存用尽之前完成垃圾回收，否认CMS回收失败，将触发担保机制，串行老年代收集器就会以STW的方式进行一次GC，从而造成较大停顿时间，所以需要预留一部分老年代空间提供并发收集时程序运行使用</font>。</p>
<p>3.由于采用的是标记-清除算法，会产生大量的内存碎片，不利于大对象的分配，可能会提前触发一次Full GC。</p>
<p>虚拟机提供了-XX:+UseCMSCompactAtFullCollection参数来进行碎片的合并整理过程，但会使得停顿时间变长；</p>
<p>虚拟机还提供了一个参数配置，-XX:+CMSFullGCBeforeCompaction，用于设置执行多少次不压缩的Full GC后，接着来一次带压缩的GC(默认0，即每次都进行内存整理)。</p>

        <h4 id="G1收集器"   >
          <a href="#G1收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h4>
      <p>G1收集器是JDK1.7u4版本中开始出现的垃圾收集器，<font color="red">在JDK1.9中将G1变成默认的垃圾收集器替代了CMS</font>。它是一款面向服务端应用的垃圾收集器，主要应用在多CPU和大内存服务器环境下，极大的减少了垃圾收集的停顿时间，全面提升服务器的性能，逐步替换JDK1.8以前的CMS垃圾收集器。</p>
<p>G1垃圾收集器有以下特点：</p>
<ol>
<li>并行和并发。使用多个CPU来缩短Stop The World 停顿时间，与用户线程并行执行。</li>
<li>分代收集。独立管理整个堆，但是能够采用不同的方式区处理新创建的对象和已经存活一段时间、经历过多次GC的旧对象，以获取更好的收集效果。</li>
<li>空间整合。基于标记-整理算法，无内存碎片产生。（实际上应该还是有的）</li>
<li>可预测的停顿，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</li>
</ol>
<p>收集过程分为如下四步：</p>
<ol>
<li><font color="red">初始标记</font>：只标记GC Roots能直接关联到的对象。</li>
<li><font color="red">并发标记</font>：进行GC Roots Tracing(可达性分析)的过程。</li>
<li><font color="red">最终标记</font>：修正并发标记期间，因为程序运行导致标记发生变化的那一部分对象。</li>
<li><font color="red">筛选回收</font>：根据时间来进行价值最大化的回收。</li>
</ol>
<p><img src="/mdimages/image-20210720012359811.png" alt="image-20210720012359811"></p>
<p>在GC之前的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但是新生代和老年代不再是物理隔离的了，它们都是一部分（可以不连续）的Region的集合。</p>
<p><img src="/mdimages/image-20210720011807923.png" alt="image-20210720011807923"></p>
<p>G1垃圾收集器下的Young GC</p>
<p>针对Eden区进行垃圾收集，Eden区耗尽后会被触发，主要是小区域收集+形成连续的内存块，避免内存碎片；</p>
<p>Eden区的数据移动到Survivor区，如果出现Survivor区空间不够，Eden区数据部分会晋升到Old区；</p>
<p>Survivor区的数据移动到新的Survivor区，如果出现Survivor区空间不够，部分数据晋升到Old区；</p>
<p>最后Eden区和旧Survivor区收拾干净后，GC结束，用户的应用程序继续执行。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之垃圾回收机制（GC）续篇</title>
    <url>/2021/07/26/Java%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%EF%BC%88GC%EF%BC%89%E7%BB%AD%E7%AF%87/</url>
    <content><![CDATA[
        <h3 id="如何选择垃圾收集器"   >
          <a href="#如何选择垃圾收集器" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何选择垃圾收集器" class="headerlink" title="如何选择垃圾收集器"></a>如何选择垃圾收集器</h3>
      <p><b style= "color:orange">组合的选择</b></p>
<ul>
<li><p>单CPU或小内存，单机程序</p>
<p><font color="red">-XX:+UseSerialGC</font></p>
</li>
<li><p>多CPU，需要最大吞吐量，如后台计算型应用</p>
<p><font color="red">-XX:+UseParallelGC 或者 -XX:+UseParallelOldGC</font></p>
</li>
<li><p>多CPU，追求低停顿时间，需要快速响应如互联网应用</p>
<p><font color="red">-XX:+UseConcMarkSweepGC</font></p>
<p><font color="red">-XX:+ParNewGC</font></p>
</li>
</ul>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">新生代垃圾收集器</th>
<th align="center">新生代算法</th>
<th align="center">老年代垃圾收集器</th>
<th align="center">老年代算法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-XX:+UseSerialGC</td>
<td align="center">SerialGC</td>
<td align="center">复制</td>
<td align="center">SerialOldGC</td>
<td align="center">标记-整理</td>
</tr>
<tr>
<td align="center">-XX:+UseParNewGC</td>
<td align="center">ParNew</td>
<td align="center">复制</td>
<td align="center">SerialOldGC</td>
<td align="center">标记-整理</td>
</tr>
<tr>
<td align="center">-XX:+UseParallelGC/<br/>-XX:+UseParallelOldGC</td>
<td align="center">Parallel ScavengeGC</td>
<td align="center">复制</td>
<td align="center">Parallel Old</td>
<td align="center">标记-整理</td>
</tr>
<tr>
<td align="center">-XX:+UseConcMarkSweepGC</td>
<td align="center">ParNew</td>
<td align="center">复制</td>
<td align="center">CMS+Serial Old的收集器组合（Serial Old 作为CMS出错的后备收集器）</td>
<td align="center">标记-清除</td>
</tr>
<tr>
<td align="center">-XX:+UseG1GC</td>
<td align="center">G1整体上采用标记-整理算法，<br />局部是通过复制算法，不会产生内存碎片。</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table></div>
<span id="more"></span>


        <h3 id="GC的分类"   >
          <a href="#GC的分类" class="heading-link"><i class="fas fa-link"></i></a><a href="#GC的分类" class="headerlink" title="GC的分类"></a>GC的分类</h3>
      <p>在HotSpot VM虚拟机的实现中，它里面的GC其实准确分类只有两大种：</p>
<p>部分收集（Partial GC）:</p>
<ul>
<li>新生代垃圾回收（<font color="red">Minor GC</font>/Young GC）：只对新生代进行垃圾收集；</li>
<li>老年代垃圾回收（<font color="red">Major GC</font>/Old GC）：只对老年代进行垃圾收集。</li>
<li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li>
</ul>
<p>整堆收集（Full GC）:</p>
<p>收集整个Java堆和方法区。</p>

        <h3 id="新生代GC执行流程"   >
          <a href="#新生代GC执行流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#新生代GC执行流程" class="headerlink" title="新生代GC执行流程"></a>新生代GC执行流程</h3>
      <p>JKD1.8之前堆内存分布图（JDK1.8开始及之后永久代被元空间MetaSpace取代）：</p>
<p><img src="/mdimages/image-20210720224640083.png" alt="image-20210720224640083"></p>
<p>新生代GC执行流程：</p>
<p>大部分新创建的对象都是分配在Eden区中（如果对象太大，会直接分配到老年代中，可以通过配置-XX:PretenureSizeThreshold参数的值，大于该值的对象会直接进入老年代）。当Eden区满了内存不够分配的适合，就会触发一次MinorGC（新生代采用的是复制算法），将存活下来的对象复制到Survivor 0（from）区中，然后清空Eden区；当Survivor 0（from）区满后触发MinorGC，此区还存活且不满足晋升到老年代条件的对象 和 Eden区中幸存的对象都复制到Survivor 1（To）区（同样，如果存活下来的对象Survivor 1（To） 区都放不下的话，那么会通过<font color="red">分配担保机制</font>把这些新生代存活的对象直接复制到老年代中去），然后清空Eden区和Survivor 0 （From）区，同时还会把from区和to区两个指针交换（也即是from区和to区交换，始终保证to区是空的）。经过多次的Minor GC后仍然存活的对象（<b>默认是15次，可以通过配置JVM参数-XX:MaxTenuringThreshold修改</b>）会移动到老年代。老年代是存储长期存活的对象的，占满时就会触发Full GC，期间会停止所有工作线程等待GC的完成。所以对于响应要求高的应用应该尽量减少发生Full GC从而避免响应超时的问题。</p>
<p>而且当老年区触发Full GC之后仍然无法进行对象保存操作的时候，就会产生OOM，这时候就是虚拟机中的堆内存不足，原因可能会是堆内存设置的大小过小，可以通过参数-Xms、-Xmx来调整，也可能是代码中创建的对象大且多，而且它们一直在被引用从而长时间垃圾收集无法收集它们。</p>

        <h3 id="GC和Full-GC日志说明"   >
          <a href="#GC和Full-GC日志说明" class="heading-link"><i class="fas fa-link"></i></a><a href="#GC和Full-GC日志说明" class="headerlink" title="GC和Full GC日志说明"></a>GC和Full GC日志说明</h3>
      <p>JVM参数配置，打印GC收集信息：-XX:+PrintGCDetails</p>
<p>Young GC</p>
<p><img src="/mdimages/image-20210724120444385.png" alt="image-20210724120444385"></p>
<p>Full GC</p>
<p><img src="/mdimages/image-20210724122246257.png" alt="image-20210724122246257"></p>

        <h3 id="JVM的常用参数"   >
          <a href="#JVM的常用参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#JVM的常用参数" class="headerlink" title="JVM的常用参数"></a>JVM的常用参数</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">含义</th>
<th align="center">默认值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-Xms<br />等价于-XX:InitialHeapSize</td>
<td align="center">初始堆大小</td>
<td align="center">物理内存的1/64</td>
<td align="center">默认空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制<br />（可以通过MinHeapFreeRatio参数调整）</td>
</tr>
<tr>
<td align="center">-Xmx<br />等价于-XX:MaxHeapSize</td>
<td align="center">最大堆大小</td>
<td align="center">物理内存的1/4</td>
<td align="center">默认空余堆内存大于70%时，JVM就会减少堆直到-Xmx的最小限制<br />（可以通过MaxHeapFreeRatio参数调整）</td>
</tr>
<tr>
<td align="center">-Xmn</td>
<td align="center">年轻代大小</td>
<td align="center"></td>
<td align="center">注意：此处的大小是（Eden + 2 Survivor Space）<br />增大年轻代后，将会减少老年代大小，此值对系统性能影响较大<br />Sun官方推荐配置为整个堆的3/8</td>
</tr>
<tr>
<td align="center">-XX:NewSize</td>
<td align="center">设置年轻代大小</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">-XX:MaxNewSize</td>
<td align="center">设置年轻代最大大小</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">-XX:PermSize</td>
<td align="center">设置永久代（perm gen）初始大小</td>
<td align="center">物理内存的1/64</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">-XX:MaxPermSize</td>
<td align="center">设置永久代最大大小</td>
<td align="center">物理内存的1/4</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">-Xss<br />等价于-XX:ThreadStackSize</td>
<td align="center">设置每个线程的堆的大小</td>
<td align="center"></td>
<td align="center">JDK1.5以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K.根据应用的线程所需要内存大小进行调整，在相同物理内存下，减少这个值能生成更多的线程。但是操作系统对一个进程内的线程数是有限制的，不能无线生成，大概在3000<del>5000左右。<font color="red">一般默认为512K</del>1024K，这个选项对性能影响比较大，需要严格的测试，</font>。</td>
</tr>
<tr>
<td align="center">-XX:NewRatio</td>
<td align="center">设置年轻代(包括Eden区和两个Survivor区)与老年代的比值（除去永久代）</td>
<td align="center"></td>
<td align="center">配置年轻代与老年代在堆结构的占比，默认-XX:NewRatio=2，新生代占1，老年代占2，年轻代占整个堆的1/3。<br />-XX:NewRatio=4表示年轻代与老年代所占比值为1：4，年轻代占整个堆的1/5，<font color="red">Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行配置</font>。</td>
</tr>
<tr>
<td align="center">-XX:SurvivorRatio</td>
<td align="center">设置Eden区与Survivor区的大小比值</td>
<td align="center"></td>
<td align="center">设置新生代中eden和S0/S1空间的比例<br/>默认-XX:SurvivorRatio=8,Eden:S0:S1=8:1:1<br/>假如-XX:SurvivorRatio=4,Eden:S0:S1=4:1:1<br/>SurvivorRatio值就是设置eden区的比例占多少，S0/S1相同</td>
</tr>
<tr>
<td align="center">-XX:PretenureSizeThreshold</td>
<td align="center">对象超过多大值直接在老年代分配</td>
<td align="center">0（单位字节）</td>
<td align="center">新生代采用Parallel ScavengeGC时无效，另一种直接在老年代分配的情况是大的数组对象，且数据中无外部引用对象。</td>
</tr>
<tr>
<td align="center">-XX:ParallelGCThreads</td>
<td align="center">设置并行收集器的线程数</td>
<td align="center"></td>
<td align="center">建议配置与处理器CPU数目相等，CMS同样。</td>
</tr>
<tr>
<td align="center">-XX:MaxGCPauseMillis</td>
<td align="center">设置每次年轻代垃圾回收的最长时间(最大暂停时间)</td>
<td align="center"></td>
<td align="center">如果无法满足此时间，JVM会自动调整年轻代大小以满足此值。</td>
</tr>
<tr>
<td align="center">-XX:MaxTenuringThreshold</td>
<td align="center">控制新生代需要经历多少次GC晋升到老年代中去的最大阈值</td>
<td align="center">默认15次</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">-XX:MetaspaceSize</td>
<td align="center">设置元空间大小</td>
<td align="center"></td>
<td align="center">JDK1.7永久代，JDK1.8之后元空间；元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。</td>
</tr>
<tr>
<td align="center">-XX:+PrintGCDetails</td>
<td align="center">开启打印GC收集信息</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">-XX:+PrintFlagsInitial</td>
<td align="center">主要查看JVM初始默认参数</td>
<td align="center"></td>
<td align="center">参数 = 和：=的区别：<br />= 表示初始化参数；<br />：= 表示人为修改或者JVM根据系统物理内存自行修改的参数</td>
</tr>
<tr>
<td align="center">-XX:+PrintCommandLineFlags</td>
<td align="center">打印命令行参数</td>
<td align="center"></td>
<td align="center">主要查看当前JVM使用什么类型的垃圾回收器</td>
</tr>
</tbody></table></div>

        <h3 id="知识补充"   >
          <a href="#知识补充" class="heading-link"><i class="fas fa-link"></i></a><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3>
      <p>CMS永久代调优<br>默认情况下，CMS不会对永久代进行垃圾回收，只有当永久代空间耗尽时，才会触发一次Full GC回收其中的垃圾对象。</p>
<p>此外，可以开启-XX:+CMSPermGenSweepingEnabled标志，让永久代与老年代使用同样的方式进行垃圾回收，但是触发永久代垃圾回收的指标与老年代是相互独立的，永久代使用-XX:CMSInitiatingPermOccupancyFraction标志，当永久代空间使用率达到此标志设定的值时，就会对永久代进行一次CMS扫描，并回收其无用的对象，该参数的默认值为80%。</p>
<p>另外，为了释放永久代中真正无用的类，包括其元数据，而不是仅仅释放少量无效的对象，应该开启-XX:+CMSClassUnloadingEnabled标志，在Java8中是默认开启的。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile关键字</title>
    <url>/2021/07/26/volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>首先我们来看一个Demo演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//共享资源类</span></span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; come in&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//3秒后A线程将共享资源类值修改为60</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                data.addTo60();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; update num value: &quot;</span> + data.num);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (data.num == <span class="number">0</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; get num: &quot;</span>+data.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTo60</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<span id="more"></span>

<p><img src="/mdimages/image-20210724150832862.png" alt="image-20210724150832862"></p>
<p>从Demo中可以看出，线程A对共享资源类Data的变量赋值为60的时候，没有同步回主内存（堆内存）中，导致main线程无法获取共享资源类Data的变量的最新值，所以程序一直停在循环while处。</p>
<p>所以在多线程环境下，共享变量没有添加<b style="color:orange">volatile</b>关键字修饰或者操作共享变量没有对共享变量加锁的时候，会导致共享变量的可见性问题。</p>
<p>因此引入<b style="color:orange">volatile</b>关键字修饰，将代码修改并测试：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//共享资源类</span></span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; come in&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//3秒后A线程将共享资源类值修改为60</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                data.addTo60();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; update num value: &quot;</span> + data.num);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">       <span class="comment">//如果变量没加volatile关键字修饰，main线程无法知道A线程已经将变量修改成60，所以main线程会一直停留这</span></span><br><span class="line">        <span class="keyword">while</span> (data.num == <span class="number">0</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; get num: &quot;</span>+data.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加volatile关键字修饰</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTo60</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210724152402214.png" alt="image-20210724152402214"></p>
<p>从演示Demo中，我们对共享资源类Data的变量用volatile关键字修饰之后，程序可以正常退出，在A线程对共享变量num修改为60后，main线程也能马上获取共享变量num的最新值。</p>

        <h3 id="volatile关键字的主要作用"   >
          <a href="#volatile关键字的主要作用" class="heading-link"><i class="fas fa-link"></i></a><a href="#volatile关键字的主要作用" class="headerlink" title="volatile关键字的主要作用"></a>volatile关键字的主要作用</h3>
      <p>1.<font color="red">保证线程间共享变量的可见性</font></p>
<p>2.<font color="red">禁止CPU进行指令重排序</font></p>

        <h4 id="可见性"   >
          <a href="#可见性" class="heading-link"><i class="fas fa-link"></i></a><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4>
      <p>volatile修饰的变量，当一个线程改变了该变量的值，其他线程是立即可见的。普通变量则需要重新读取才能获取最新值。</p>
<p>volatile保证可见性的流程大致如下：</p>
<p><img src="/mdimages/image-20210724155037050.png" alt="image-20210724155037050"></p>

        <h4 id="禁止指令重排"   >
          <a href="#禁止指令重排" class="heading-link"><i class="fas fa-link"></i></a><a href="#禁止指令重排" class="headerlink" title="禁止指令重排"></a>禁止指令重排</h4>
      <p><font color="orange">as-if-serial语义</font>的意思是：<font color="orange">不管怎么重排序，单线程程序的执行结果不能被改变</font>。编译器、runtime和处理器都必须遵守as-if-serial语义。所以编译器和处理器不会对存在<font color="orange">数据依赖关系</font>的操作做重排序，因为这种重排序会改变执行结果，但是，如果操作之间不存在数据依赖关系，那么这些操作可能被编译器和处理器重排序。</p>
<p>为了使指令更加符合CPU的执行特性，最大限度的发挥机器的性能，提高程序的执行效率，只要程序的最终结果与它顺序化情况的结果相等，那么指令的执行顺序可以与代码逻辑顺序不一致，这个过程就叫做<b>指令的重排序</b>。</p>
<p>重排序的种类分为三种，分别是：编译器重排序，指令级并行的重排序，内存系统重排序。</p>
<p><img src="/mdimages/image-20210724160927935.png" alt="image-20210724160927935"></p>
<p>在单线程环境下指令重排序是没有问题的，不会影响执行结果，而且还提高了性能，但是在多线程的环境下就不能保证一定不会影响执行结果。<b>所以在多线程环境下，就需要禁止指令重排</b>。</p>
<p>代码说明：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            a = a + <span class="number">5</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;result: &quot;</span> + a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>按照正常的顺序执行分别调用method01()和method02()方法，最终输出result: 6。</p>
<p>但是如果多线程环境下，因为方法method01()和方法method02()，他们之间不存在数据依赖的问题，因此在经过编译器，指令，或者内存的重排序后，可能会出现这样的情况：</p>
<p>原先的执行顺序：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">a = a + <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;result: &quot;</span> + a);</span><br></pre></td></tr></table></div></figure>

<p>指令重排后的顺序：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">flag  = <span class="keyword">true</span>;</span><br><span class="line">a = a + <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;result: &quot;</span> + a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></div></figure>

<p>也就是先执行了method01方法中的flag = true后,另外一个线程马上调用方法method02，满足flag的判断，然后执行a+5，结果为5，造成数据不一致的问题。</p>
<p><font color="red">在多线程环境下线程交替执行，由于指令重排的存在，多个线程中使用的变量能否保证一致性是无法确定的，结果无法预测。所以就需要使用volatile关键字来修饰，来禁止指令重排</font>。</p>

        <h3 id="内存屏障"   >
          <a href="#内存屏障" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h3>
      <p>内存屏障又称内存栅栏（Memory Barrier），是一个CPU指令，它的作用有两个：</p>
<p>保证特定操作的顺序，保证某些变量的可见性；</p>

        <h3 id="volatile禁止指令重排的原理"   >
          <a href="#volatile禁止指令重排的原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#volatile禁止指令重排的原理" class="headerlink" title="volatile禁止指令重排的原理"></a>volatile禁止指令重排的原理</h3>
      <p>内存屏障可以分为以下几类：</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">屏障名称</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">LoadLoad屏障</td>
<td align="center">每个volatile读的后面插入一个LoadLoad屏障，禁止下面的普通读和上面的volatile读重排序</td>
</tr>
<tr>
<td align="center">LoadStore屏障</td>
<td align="center">每个volatile读的后面插入一个LoadStore屏障，禁止下面的普通写和上面的volatile读重排序</td>
</tr>
<tr>
<td align="center">StoreLoad屏障</td>
<td align="center">每个volatile写的后面插入一个StoreLoad屏障，禁止上面的volatile写和下面的volatile读/写重排序</td>
</tr>
<tr>
<td align="center">StoreStore屏障</td>
<td align="center">每个volatile写的前面插入一个StoreStore屏障，禁止上面的普通写和下面的volatile写重排序</td>
</tr>
</tbody></table></div>
<p><img src="/mdimages/image-20210725004143954.png" alt="image-20210725004143954"></p>

        <h3 id="volatile不一定能保证线程安全"   >
          <a href="#volatile不一定能保证线程安全" class="heading-link"><i class="fas fa-link"></i></a><a href="#volatile不一定能保证线程安全" class="headerlink" title="volatile不一定能保证线程安全"></a>volatile不一定能保证线程安全</h3>
      <p>案例演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    data.addClick();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待上面20个线程全部都计算完成后，再让main线程取出最终的结果值</span></span><br><span class="line">        <span class="comment">//这里除了main线程外还有个GC线程</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t number value：&quot;</span> + data.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//number前面加了volatile关键字修饰，volatile不保证原子性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>启动程序，运行20个线程，每个线程对共享变量进行1000次的加1操作，已经使用volatile关键字修饰保证变量的可见性，按逻辑执行输出结果应该为：20000，是不是如此？</p>
<p>运行结果：</p>
<p><img src="/mdimages/image-20210725135333735.png" alt="image-20210725135333735"></p>
<p>可以发现运行多次后，结果都不为20000；这是因为volatile不保证原子性；number++不是原子性操作，会分成三步，先读取number的值，然后+1，最后赋值回去number变量。</p>
<p>各个线程在自己的工作内存中操作后，写回主内存的过程中，由于cpu的调度是随机性的，所以当1号线程准备回写主内存的时候可能1号线程被挂起，2号线程拿到cpu时间片，执行了写值到主内存，这个时候1号线程还未更新值到自己的工作内存中，就执行了写值，所以出现写值丢失现象导致了原子性问题。</p>
<p>解决方法：</p>
<ul>
<li>加锁，如synchronized</li>
<li>使用JUC包下的原子类(AtomicInteger类等)，<font color="red">JUC的原子类将在下一篇文章讲解</font>。</li>
</ul>

        <h3 id="volatile的使用案例"   >
          <a href="#volatile的使用案例" class="heading-link"><i class="fas fa-link"></i></a><a href="#volatile的使用案例" class="headerlink" title="volatile的使用案例"></a>volatile的使用案例</h3>
      <p>这里介绍一个比较典型的volatile使用案例：多线程场景下的单例模式</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonDemo instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DCL（Double Check Lock 双端检锁机制）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-Atomic原子类</title>
    <url>/2021/07/26/JUC-Atomic%E5%8E%9F%E5%AD%90%E7%B1%BB/</url>
    <content><![CDATA[
        <h3 id="Atomic原子类的概念"   >
          <a href="#Atomic原子类的概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#Atomic原子类的概念" class="headerlink" title="Atomic原子类的概念"></a>Atomic原子类的概念</h3>
      
        <h4 id="原子性"   >
          <a href="#原子性" class="heading-link"><i class="fas fa-link"></i></a><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4>
      <p>首先我们需要知道原子性的概念，原子性指的是：一个操作是不可分割，不可中断的，即某个线程正在做某个具体业务时，中间不可以被加塞或者被分割，需要整体完整，要么同时成功，要么同时失败。</p>

        <h4 id="原子类"   >
          <a href="#原子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h4>
      <p>所谓原子类，简单理解就是具有原子/原子操作特征的类。</p>
<p>JDK1.5开始引入了java.util.concurrent包，简称JUC并发包，而原子类就都放在java.util.concurrent.atomic包下，如下图所示：</p>
<p><img src="/mdimages/image-20210725143934201.png" alt="image-20210725143934201"></p>
<span id="more"></span>


        <h3 id="Atomic原子类的类型"   >
          <a href="#Atomic原子类的类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#Atomic原子类的类型" class="headerlink" title="Atomic原子类的类型"></a>Atomic原子类的类型</h3>
      <p>根据操作的数据类型，可以将JUC包中的原子类分类4类：</p>
<ol>
<li>基本类型<ul>
<li>AtomicInteger：整型原子类</li>
<li>AtomicLong：长整型原子类</li>
<li>AtomicBoolean：布尔型原子类</li>
</ul>
</li>
<li>数组类型<ul>
<li>AtomicIntegerArray：整型数组原子类</li>
<li>AtomicLongArray：长整型数组原子类</li>
<li>AtomicReferenceArray：引用类型数组原子类</li>
</ul>
</li>
<li>引用类型<ul>
<li>AtomicReference：引用类型原子类</li>
<li>AtomicMarkableReference：原子更新带有标记的引用类型，该类将boolean标记与引用关联起来。</li>
<li>AtomicStampedReference：原子更新带有版本号的引用类型，该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，<b style="color:red">可以解决使用CAS进行原子更新时可能出现的ABA问题</b>。</li>
</ul>
</li>
<li>对象的属性修改类型<ul>
<li>AtomicIntegerFieldUpdater：原子更新整型字段的更新器</li>
<li>AtomicLongFieldUpdater：原子更新长整型字段的更新器</li>
<li>AtomicReferenceFieldUpdater：原子更新引用类型里的字段的更新器</li>
</ul>
</li>
</ol>

        <h3 id="基本类型原子类"   >
          <a href="#基本类型原子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本类型原子类" class="headerlink" title="基本类型原子类"></a>基本类型原子类</h3>
      <p>上面三个基本类型原子类的方法几乎相同，所以这里以AtomicInteger为例子来介绍。</p>

        <h4 id="AtomicInteger类构造方法"   >
          <a href="#AtomicInteger类构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicInteger类构造方法" class="headerlink" title="AtomicInteger类构造方法"></a>AtomicInteger类构造方法</h4>
      <p><img src="/mdimages/image-20210725151518314.png" alt="image-20210725151518314"></p>

        <h4 id="AtomicInteger类常用方法（以下方法都具有原子性）"   >
          <a href="#AtomicInteger类常用方法（以下方法都具有原子性）" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicInteger类常用方法（以下方法都具有原子性）" class="headerlink" title="AtomicInteger类常用方法（以下方法都具有原子性）"></a>AtomicInteger类常用方法（以下方法都具有原子性）</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> <span class="comment">//获取当前的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> newValue)</span><span class="comment">//设置新的值，返回旧的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span><span class="comment">//获取当前的值，并自增</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">()</span> <span class="comment">//获取当前的值，并自减</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span> <span class="comment">//获取当前的值，并加上预期的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> <span class="comment">//如果当前的数值等于预期值（expect），则以原子方式将该值设置为更新值（update）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">int</span> newValue)</span><span class="comment">//最终设置为newValue的值,使用 lazySet 设置之后可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</span></span></span><br></pre></td></tr></table></div></figure>

<p><b>AtomicInteger常用方法使用</b></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tempValue = <span class="number">0</span>;</span><br><span class="line">        AtomicInteger integer = <span class="keyword">new</span> AtomicInteger(tempValue);</span><br><span class="line">        tempValue = integer.getAndSet(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newValue: &quot;</span>+integer.get()+<span class="string">&quot;; oldValue: &quot;</span>+tempValue);</span><br><span class="line">        tempValue = integer.getAndIncrement();</span><br><span class="line">        System.out.println(<span class="string">&quot;newValue: &quot;</span>+integer.get()+<span class="string">&quot;; oldValue: &quot;</span>+tempValue);</span><br><span class="line">        tempValue = integer.getAndAdd(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newValue: &quot;</span>+integer.get()+<span class="string">&quot;; oldValue: &quot;</span>+tempValue);</span><br><span class="line">        <span class="keyword">boolean</span> flag = integer.compareAndSet(<span class="number">9</span>, <span class="number">520</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否修改成功：&quot;</span>+flag+<span class="string">&quot;;  currentValue: &quot;</span>+integer.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210725153719267.png" alt="image-20210725153719267"></p>

        <h4 id="基本数据类型原子类的优势"   >
          <a href="#基本数据类型原子类的优势" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本数据类型原子类的优势" class="headerlink" title="基本数据类型原子类的优势"></a>基本数据类型原子类的优势</h4>
      <p>通过以下Demo分析基本数据类型原子类的优势：</p>
<p><b>1.多线程环境下不使用原子类保证线程安全(基本数据类型)</b></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//若要保证多线程环境下执行count++是线程安全的，那么需要加锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><b>2.多线程环境下使用原子类保证线程安全(基本数据类型)</b></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用AtomicInteger原子类后，不需要加锁也可以实现线程安全</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="AtomicInteger类线程安全原理简单分析"   >
          <a href="#AtomicInteger类线程安全原理简单分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicInteger类线程安全原理简单分析" class="headerlink" title="AtomicInteger类线程安全原理简单分析"></a>AtomicInteger类线程安全原理简单分析</h4>
      <p>AtomicInteger类的部分源码：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><font color="red">AtomicInteger类主要利用CAS(compare and swap) + volatile关键字 和 Unsafe类的native方法来保证原子操作，从而避免synchronized的高开销，提升执行效率。</font></p>
<p><font color="orange">CAS的原理就是拿期望的值和原本的值作比较，如果值相同则更新成新的值。Unsafe类的objectFieldOffset()方法是一个native(本地)方法，这个方法是用来获取“原来的值”的内存地址。另外value是一个volatile。修饰的变量，保证了内存可见性，因此JVM可以保证任何时刻线程总能拿到该变量的最新值。</font></p>

        <h3 id="数组类型原子类"   >
          <a href="#数组类型原子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组类型原子类" class="headerlink" title="数组类型原子类"></a>数组类型原子类</h3>
      <p>上面三个数组类型原子类的方法几乎相同，所以这里以AtomicIntegerArray为例子来介绍。</p>

        <h4 id="AtomicIntegerArray类构造方法"   >
          <a href="#AtomicIntegerArray类构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicIntegerArray类构造方法" class="headerlink" title="AtomicIntegerArray类构造方法"></a>AtomicIntegerArray类构造方法</h4>
      <p><img src="/mdimages/image-20210725180258020.png" alt="image-20210725180258020"></p>

        <h4 id="AtomicIntegerArray类常用方法（以下方法都具有原子性）"   >
          <a href="#AtomicIntegerArray类常用方法（以下方法都具有原子性）" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicIntegerArray类常用方法（以下方法都具有原子性）" class="headerlink" title="AtomicIntegerArray类常用方法（以下方法都具有原子性）"></a>AtomicIntegerArray类常用方法（以下方法都具有原子性）</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="comment">//获取 index=i 位置元素的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> newValue)</span><span class="comment">//返回 index=i 位置的当前的值，并将其设置为新值：newValue</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//获取 index=i 位置元素的值，并让该位置的元素自增</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="comment">//获取 index=i 位置元素的值，并让该位置的元素自减</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> delta)</span> <span class="comment">//获取 index=i 位置元素的值，并加上预期的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> <span class="comment">//如果输入的数值等于预期值，则以原子方式将 index=i 位置的元素值设置为输入值（update）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> newValue)</span><span class="comment">//最终 将index=i 位置的元素设置为newValue,使用 lazySet 设置之后可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</span></span></span><br></pre></td></tr></table></div></figure>

<p><b>AtomicIntegerArray常用方法使用</b></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tempValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] array =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        AtomicIntegerArray atomicArray = <span class="keyword">new</span> AtomicIntegerArray(array);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.print(atomicArray.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">        tempValue = atomicArray.getAndSet(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;tempValue : &quot;</span>+tempValue+<span class="string">&quot;; atomicArray : &quot;</span>+atomicArray);<span class="comment">//1 ;[2,2,3,4,5,6]</span></span><br><span class="line">        tempValue = atomicArray.getAndIncrement(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;tempValue : &quot;</span>+tempValue+<span class="string">&quot;; atomicArray : &quot;</span>+atomicArray);<span class="comment">//2 ;[3,2,3,4,5,6]</span></span><br><span class="line">        tempValue = atomicArray.getAndAdd(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;tempValue : &quot;</span>+tempValue+<span class="string">&quot;; atomicArray : &quot;</span>+atomicArray);<span class="comment">//3 ;[7,2,3,4,5,6]</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = atomicArray.compareAndSet(<span class="number">0</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;flag : &quot;</span>+flag+<span class="string">&quot;; currentVaule : &quot;</span>+atomicArray.get(<span class="number">0</span>)+<span class="string">&quot;; atomicArray : &quot;</span>+atomicArray);<span class="comment">//true; 8 ;[8,2,3,4,5,6]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210725181808760.png" alt="image-20210725181808760"></p>

        <h3 id="引用类型原子类"   >
          <a href="#引用类型原子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#引用类型原子类" class="headerlink" title="引用类型原子类"></a>引用类型原子类</h3>
      <p>基本类型原子类只能更新一个变量，如果需要原子更新多个变量，需要使用引用类型原子类。</p>
<ul>
<li>AtomicReference：引用类型原子类</li>
<li>AtomicMarkableReference：原子更新带有标记的引用类型，该类将boolean标记与引用关联起来。</li>
<li>AtomicStampedReference：原子更新带有版本号的引用类型，该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，<b style="color:red">可以解决使用CAS进行原子更新时可能出现的ABA问题</b>。</li>
</ul>

        <h4 id="AtomicReference类构造方法"   >
          <a href="#AtomicReference类构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicReference类构造方法" class="headerlink" title="AtomicReference类构造方法"></a>AtomicReference类构造方法</h4>
      <p><img src="/mdimages/image-20210725182859686.png" alt="image-20210725182859686"></p>

        <h4 id="AtomicReference类常用方法（以下方法都具有原子性）"   >
          <a href="#AtomicReference类常用方法（以下方法都具有原子性）" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicReference类常用方法（以下方法都具有原子性）" class="headerlink" title="AtomicReference类常用方法（以下方法都具有原子性）"></a>AtomicReference类常用方法（以下方法都具有原子性）</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">()</span><span class="comment">//获取当前值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V newValue)</span><span class="comment">//设置为给定值。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V expect,V update)</span><span class="comment">//如果当前值等于预期值（expect），则将当前值设置为给定的更新值（update）。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getAndSet</span><span class="params">(V newValue)</span><span class="comment">//设置新的值，返回旧的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(V newValue)</span><span class="comment">//最终设置为给定值（newValue），使用lazySet设置之后可能会导致其他线程在之后的一小段时间内还是可以读到旧的值。</span></span></span><br></pre></td></tr></table></div></figure>

<p><b>AtomicReference常用方法使用</b></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicReference&lt;Student&gt; reference = <span class="keyword">new</span> AtomicReference&lt;Student&gt;();</span><br><span class="line">        Student tom = <span class="keyword">new</span> Student(<span class="string">&quot;tom&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        reference.set(tom);</span><br><span class="line">        Student student = reference.get();</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        Student wang = <span class="keyword">new</span> Student(<span class="string">&quot;wang&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = reference.compareAndSet(tom, wang);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        System.out.println(reference.get());</span><br><span class="line">        Student faker = <span class="keyword">new</span> Student(<span class="string">&quot;faker&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        Student oldStudent = reference.getAndSet(faker);</span><br><span class="line">        System.out.println(<span class="string">&quot;oldStudent: &quot;</span>+oldStudent);</span><br><span class="line">        System.out.println(<span class="string">&quot;newStudent: &quot;</span>+reference.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210725221630512.png" alt="image-20210725221630512"></p>

        <h4 id="AtomicStampedReference类构造方法"   >
          <a href="#AtomicStampedReference类构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicStampedReference类构造方法" class="headerlink" title="AtomicStampedReference类构造方法"></a><font color="red">AtomicStampedReference类构造方法</font></h4>
      <p><img src="/mdimages/image-20210725222146109.png" alt="image-20210725222146109"></p>

        <h4 id="AtomicStampedReference类常用方法（以下方法都具有原子性）"   >
          <a href="#AtomicStampedReference类常用方法（以下方法都具有原子性）" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicStampedReference类常用方法（以下方法都具有原子性）" class="headerlink" title="AtomicStampedReference类常用方法（以下方法都具有原子性）"></a><font color="red">AtomicStampedReference类常用方法（以下方法都具有原子性）</font></h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">attemptStamp</span><span class="params">(V expectedReference, <span class="keyword">int</span> newStamp)</span><span class="comment">//如果当前的数值等于预期值（expectedReference），则以原子方式将当前的版本号设置为更新值（newStamp）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V expectedReference, V newReference,<span class="keyword">int</span> expectedStamp,<span class="keyword">int</span> newStamp)</span><span class="comment">//如果当前的数值等于预期值（expectedReference），并且当前的版本号等于预期的版本号（expectedStamp），则以原子方式将当前值设置为更新值（newReference）并且将当前版本号设置为新的版本号（newStamp）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">int</span>[] stampHolder)</span> <span class="comment">//获取当前的值和当前的版本号，当前版本号存储在数组stampHolder的索引0位置上</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getReference</span><span class="params">()</span><span class="comment">//返回引用的当前值    </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStamp</span><span class="params">()</span><span class="comment">//返回当前的stamp(标志)值，【简单理解为当前的版本号】</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V newReference,<span class="keyword">int</span> newStamp)</span><span class="comment">//无条件地设置引用值和版本号</span></span></span><br></pre></td></tr></table></div></figure>

<p><b style="color:red">AtomicStampedReference常用方法使用</b></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//initialRef:初始值；initialStamp：初始版本号</span></span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; reference = <span class="keyword">new</span> AtomicStampedReference&lt;Integer&gt;(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag1 = reference.attemptStamp(<span class="number">99</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前数值是否等于预期值99：&quot;</span>+flag1);</span><br><span class="line">        System.out.println(<span class="string">&quot;查看当前值：&quot;</span>+reference.getReference()+<span class="string">&quot; 查看当前版本号：&quot;</span>+reference.getStamp());</span><br><span class="line">        <span class="keyword">boolean</span> flag2 = reference.attemptStamp(<span class="number">100</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前数值是否等于预期值100：&quot;</span>+flag2);</span><br><span class="line">        System.out.println(<span class="string">&quot;查看当前值：&quot;</span>+reference.getReference()+<span class="string">&quot; 查看当前版本号：&quot;</span>+reference.getStamp());</span><br><span class="line">        <span class="keyword">boolean</span> flag3 = reference.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前数值是否为100，并且版本号为2：&quot;</span>+flag3);</span><br><span class="line">        System.out.println(<span class="string">&quot;查看当前值：&quot;</span>+reference.getReference()+<span class="string">&quot; 查看当前版本号：&quot;</span>+reference.getStamp());</span><br><span class="line">        <span class="keyword">int</span>[] arry = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        Integer integer = reference.get(arry);</span><br><span class="line">        System.out.println(<span class="string">&quot;currentValue: &quot;</span>+integer+<span class="string">&quot;; currentStamp: &quot;</span>+arry[<span class="number">0</span>]);</span><br><span class="line">        reference.set(<span class="number">520</span>,<span class="number">520</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查看当前值：&quot;</span>+reference.getReference()+<span class="string">&quot; 查看当前版本号：&quot;</span>+reference.getStamp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210725230853348.png" alt="image-20210725230853348"></p>

        <h4 id="AtomicMarkableReference类构造方法"   >
          <a href="#AtomicMarkableReference类构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicMarkableReference类构造方法" class="headerlink" title="AtomicMarkableReference类构造方法"></a>AtomicMarkableReference类构造方法</h4>
      <p><img src="/mdimages/image-20210725231400750.png" alt="image-20210725231400750"></p>
<p>AtomicMarkableReference是将一个boolean值作为是否有更改的标记，本质就是它的版本号只有两个，true和false， 修改的时候在这两个版本号之间来回切换，这样做并不能解决ABA的问题，只是会降低ABA问题发生的几率而已</p>

        <h4 id="AtomicMarkableReference类常用方法（以下方法都具有原子性）"   >
          <a href="#AtomicMarkableReference类常用方法（以下方法都具有原子性）" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicMarkableReference类常用方法（以下方法都具有原子性）" class="headerlink" title="AtomicMarkableReference类常用方法（以下方法都具有原子性）"></a>AtomicMarkableReference类常用方法（以下方法都具有原子性）</h4>
      <figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">attemptMark</span><span class="params">(V expectedReference,<span class="keyword">boolean</span> newMark)</span><span class="comment">//如果当前的数值等于预期值（expectedReference），则以原子方式将当前的标记设置为更新值（newMark）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V expectedReference, V newReference,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">boolean</span> expectedMark,<span class="keyword">boolean</span> newMark)</span><span class="comment">//如果当前的数值等于预期值（expectedReference），并且当前的标记等于预期的标记（expectedMark），则以原子方式将当前值设置为更新值（newReference）并且将当前标记设置为新的标记（newMark）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(<span class="keyword">boolean</span>[] markHolder)</span><span class="comment">//获取当前的值和当前的标记，当前的标记存储在数组markHolder的索引0位置上</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getReference</span><span class="params">()</span><span class="comment">//返回引用的当前值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMarked</span><span class="params">()</span><span class="comment">//返回当前的mark(标记)值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V newReference,<span class="keyword">boolean</span> newMark)</span><span class="comment">//无条件地设置引用和标记的值。   </span></span></span><br></pre></td></tr></table></div></figure>

<p><b>AtomicMarkableReference常用方法使用</b></p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//initialRef:初始值；initialMark：初始标记值</span></span><br><span class="line">        AtomicMarkableReference&lt;Integer&gt; reference = <span class="keyword">new</span> AtomicMarkableReference&lt;Integer&gt;(<span class="number">100</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag1 = reference.attemptMark(<span class="number">99</span>, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前数值是否等于预期值99：&quot;</span>+flag1);</span><br><span class="line">        System.out.println(<span class="string">&quot;查看当前值：&quot;</span>+reference.getReference()+<span class="string">&quot; 查看当前标记值：&quot;</span>+reference.isMarked());</span><br><span class="line">        <span class="keyword">boolean</span> flag2 = reference.attemptMark(<span class="number">100</span>, <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前数值是否等于预期值100：&quot;</span>+flag2);</span><br><span class="line">        System.out.println(<span class="string">&quot;查看当前值：&quot;</span>+reference.getReference()+<span class="string">&quot; 查看当前标记值：&quot;</span>+reference.isMarked());</span><br><span class="line">        <span class="keyword">boolean</span> flag3 = reference.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前数值是否为100，并且标记值为false：&quot;</span>+flag3);</span><br><span class="line">        System.out.println(<span class="string">&quot;查看当前值：&quot;</span>+reference.getReference()+<span class="string">&quot; 查看当前标记值：&quot;</span>+reference.isMarked());</span><br><span class="line">        <span class="keyword">boolean</span>[] arry = &#123;<span class="keyword">false</span>&#125;;</span><br><span class="line">        Integer integer = reference.get(arry);</span><br><span class="line">        System.out.println(<span class="string">&quot;currentValue: &quot;</span>+integer+<span class="string">&quot;; currentStamp: &quot;</span>+arry[<span class="number">0</span>]);</span><br><span class="line">        reference.set(<span class="number">520</span>,<span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查看当前值：&quot;</span>+reference.getReference()+<span class="string">&quot; 查看当前标记值：&quot;</span>+reference.isMarked());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210725232920069.png" alt="image-20210725232920069"></p>

        <h4 id="对象的属性修改类型原子类"   >
          <a href="#对象的属性修改类型原子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象的属性修改类型原子类" class="headerlink" title="对象的属性修改类型原子类"></a>对象的属性修改类型原子类</h4>
      <p>如果需要原子更新某个类里面的某个字段时，需要用到<b>对象的属性修改类型原子类</b>。</p>
<ul>
<li>AtomicIntegerFieldUpdater：原子更新整型字段的更新器</li>
<li>AtomicLongFieldUpdater：原子更新长整型字段的更新器</li>
<li>AtomicReferenceFieldUpdater：原子更新引用类型里的字段的更新器</li>
</ul>
<p>要想原子地更新对象的属性需要两步。<font color="orange">第一步，因为对象的属性修改类型原子类都是抽象类，所以每次使用都必须使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。第二步，更新的对象属性必须使用public volatile修饰符</font>。</p>
<p>上面三个类提供的方法几乎相同，下面将以AtomicIntegerFieldUpdater为例子来介绍。</p>
<p>AtomicIntegerFieldUpdater类使用演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicIntegerFieldUpdater&lt;User&gt; fieldUpdater =</span><br><span class="line">                AtomicIntegerFieldUpdater.newUpdater(User.class, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;wang&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(fieldUpdater.getAndIncrement(user));<span class="comment">//23</span></span><br><span class="line">        System.out.println(fieldUpdater.get(user));<span class="comment">//24</span></span><br><span class="line">        System.out.println(fieldUpdater.compareAndSet(user,<span class="number">24</span>,<span class="number">27</span>));</span><br><span class="line">        System.out.println(fieldUpdater.get(user));<span class="comment">//27</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210725235043962.png" alt="image-20210725235043962"></p>

        <h3 id="CAS"   >
          <a href="#CAS" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3>
      <p>CAS的全称是compare and swap，<font color="red">它是一条CPU并发原语</font>，它的功能是判断内存某个位置的值是否为预期值，如果是则更新为新的值，这个过程是原子的。</p>
<p>CAS并发原语体现在JAVA中就是sun.misc.Unsafe类中的各个方法。调用Unsafe类中的CAS方法，JVM会帮我们实现CAS汇编指令。这是一个完全依赖于硬件的功能，通过它实现了原子操作。</p>
<p>由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，<font color="red">并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题</font>。</p>
<p>Unsafe类是CAS的核心类有，由于Java方法无法直接访问底层系统，需要通过本地（native）方法来访问，Unsafe类可以直接操作特定内存的数据。<font color="red">Unsafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存</font>。</p>
<p>CAS有哪些缺点？</p>
<ul>
<li><p>循环时间长开销大</p>
<p>如果CAS失败，会一直进行尝试，如果CAS长时间一直不成功，可能会给CPU带来很大的开销。</p>
<p>以AtomicInteger 原子类的getAndIncrement方法解读为例</p>
<p>getAndIncrement方法中调用的是unsafe类的getAndAddInt方法</p>
<p><img src="/mdimages/image-20210726000231219.png" alt="image-20210726000231219"></p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">假设线程A和线程B两个线程同时执行getAndAddInt操作（分别跑在不同CPU上）：</span><br><span class="line">1.AtomicInteger里面的属性值value初始值为3，即主内存中AtomicInteger的value为3，根据JMM内存模型，线程A和线程B各自持有一份value值为3的变量副本分别在各自的工作内存中。</span><br><span class="line">2.线程A通过getIntVolatile(var1, var2)拿到value值3，这时候线程A被挂起。</span><br><span class="line">3.线程B也通过getIntVolatile(var1, var2)方法拿到value值3，此时刚好线程B没有被挂起并执行compareAndSwapInt方法比较内存值也为3，成功修改内存值为4，线程B干完活，一切OK。</span><br><span class="line">4.这时线程A恢复，执行compareAndSwapInt方法比较，发现自己手里的数值3和主内存的数值4不一致，说明该值已经被其它线程抢先一步修改过了，那么A线程本次修改失败，只能重新读取主内存值重新执行一遍。</span><br><span class="line">5.线程A重新获取value值，因为属性变量value被volatile关键字修饰，所以其它线程对它的修改，线程A总是能够看到，线程A继续执行compareAndSwapInt方法进行比较替换，直到成功。</span><br></pre></td></tr></table></div></figure></li>
<li><p>只能保证一个共享变量的原子操作</p>
<p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁来保证原子性。</p>
</li>
<li><p><font color="red">引发ABA问题</font></p>
<p>CAS实现的一个重要前提需要取出内存中某时刻的数据并在当下时刻比较并替换，那么在这个时间差内会导致数据的变化。</p>
<p>比如一个线程one从内存位置V中取出A值，这时候另一个线程two也从内存中取出A值，并且线程two进行了一些操作将A值变成了B值，然后线程two又将V位置的数据从B值变回A值，这时候线程one进行CAS操作发现内存中仍然是A值，然后线程one操作成功。</p>
<p>ABA问题代码演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABADemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        abaDemo1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ABA问题产生演示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">abaDemo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AtomicReference&lt;Integer&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;============ABA问题的产生============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            atomicReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>);</span><br><span class="line">            atomicReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(atomicReference.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>)+<span class="string">&quot;\t&quot;</span>+atomicReference.get());</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210726002532693.png" alt="image-20210726002532693"></p>
</li>
</ul>
<p>​    ABA问题解决代码演示：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABADemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;       </span><br><span class="line">        abaDemo2();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ABA问题解决演示 AtomicStampedReference&lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">abaDemo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> AtomicStampedReference&lt;Integer&gt;(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = atomicStampedReference.getStamp();<span class="comment">//获取初始版本号</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t第1次版本号：&quot;</span>+stamp); <span class="comment">//t3 1</span></span><br><span class="line">            <span class="comment">//暂停1秒钟让t4线程也拿到初始版本号</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            atomicStampedReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>,</span><br><span class="line">                    atomicStampedReference.getStamp(), atomicStampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t第2次版本号：&quot;</span>+atomicStampedReference.getStamp()); <span class="comment">//t3 2</span></span><br><span class="line"></span><br><span class="line">            atomicStampedReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>,</span><br><span class="line">                    atomicStampedReference.getStamp(), atomicStampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t第3次版本号：&quot;</span>+atomicStampedReference.getStamp()); <span class="comment">//t3 3</span></span><br><span class="line">        &#125;,<span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = atomicStampedReference.getStamp();<span class="comment">//获取初始版本号</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t第1次版本号：&quot;</span>+stamp);<span class="comment">//t4 1</span></span><br><span class="line">            <span class="comment">//暂停3秒钟让t3线程完成一次ABA操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> result = atomicStampedReference.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>,</span><br><span class="line">                    stamp, stamp + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t修改成功否：&quot;</span>+result+<span class="string">&quot;\t当前最新实际版本号：&quot;</span>+atomicStampedReference.getStamp());<span class="comment">//t4 false 3</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t当前最新值：&quot;</span>+atomicStampedReference.getReference());<span class="comment">//t4  100</span></span><br><span class="line">        &#125;,<span class="string">&quot;t4&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>   运行结果：</p>
<p><img src="/mdimages/image-20210726002727412.png" alt="image-20210726002727412"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring容器中bean的生命周期</title>
    <url>/2021/07/29/Spring%E5%AE%B9%E5%99%A8%E4%B8%ADbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>Spring容器中bean的生命周期</p>
<p>我们通常使用ApplicationContext作为Spring容器，在Spring容器中，主要是对bean进行管理，这里我们将讲解Spring容器ApplicationContext中bean的生命周期。</p>
<p>bean的生命周期流程图：</p>
<p><img src="/mdimages/image-20210727225106572.png" alt="image-20210727225106572"></p>
<span id="more"></span>

<p>bean的生命周期讲解（基于xml配置）</p>
<ol>
<li><p>Spring容器找到配置文件中Bean的定义信息，通过无参构造器创建bean的实例</p>
</li>
<li><p>设置对象属性，调用bean的set方法，将属性值注入到bean的属性中</p>
</li>
<li><p>检查bean是否实现了 *.Aware相关接口，有则调用相应的方法，如BeanNameAware、BeanFactoryAware、ApplicationContextAware接口，如果实现了这几个接口Spring会分别调用其中实现的方法。</p>
<ul>
<li>BeanNameAware接口： setBeanName(String name)方法，参数name是bean的ID</li>
<li>BeanFactoryAware接口：setBeanFactory(BeanFactory beanFactory)方法，参数是BeanFactory 容器</li>
<li>ApplicationContextAware接口： setApplicationContext(ApplicationContext applicationContext) 方法，参数是bean所在的应用上下文</li>
</ul>
<p>更多Aware接口详情可以查看spring官网文档：</p>
<p>下图为Bean的完整生命周期经历的相关接口的方法调用顺序图：</p>
<p><img src="/mdimages/image-20210727234812583.png" alt="image-20210727234812583"></p>
</li>
<li><p>检查是否有实现了BeanPostProcessor接口的组件，如果是，会执行postProcessBeforeInitialization()方法</p>
</li>
<li><p>检查bean是否实现了InitializingBean接口，如果是，会执行afterPropertiesSet()方法</p>
</li>
<li><p>检查bean在配置文件中的定义信息是否包含了init-method属性，如果有，则会执行指定的初始化方法</p>
</li>
<li><p>检查是否有实现了BeanPostProcessor接口的组件，如果是，会执行postProcessAfterInitialization()方法</p>
</li>
<li><p>使用bean，bean将会一直保留在应用上下文中，直到该应用上下文被销毁</p>
</li>
<li><p>当要销毁Bean的时候，检查是否有实现了DestructionAwareBeanPostProcessors接口的组件，如果是，会执行postProcessBeforeDestruction()方法</p>
</li>
<li><p>接着检查Bean是否实现DisposableBean接口，如果是，则执行destroy()方法</p>
</li>
<li><p>最后再检查bean在配置文件中的定义信息是否包含了destroy-method属性，如果有，则会执行指定的销毁方法</p>
</li>
</ol>
<p>下面将通过代码来演示Spring Bean的生命周期：</p>
<p>1.首先是一个简单的Bean类，实现Bean生命周期的一些接口，如：BeanNameAware, BeanFactoryAware, ApplicationContextAware, InitializingBean , DisposableBean，并且自定义初始化方法myInit和销毁方法myDestory对应&lt;bean&gt;配置文件的init-method属性和destory-method属性：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">BeanFactoryAware</span>, <span class="title">ApplicationContextAware</span>,</span></span><br><span class="line"><span class="class">        <span class="title">InitializingBean</span> , <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【构造器】调用无参构造器实例化Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【属性注入】注入属性age&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【属性注入】注入属性name&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, beanName=&#x27;&quot;</span> + beanName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, beanFactory=&quot;</span> + beanFactory +</span><br><span class="line">                <span class="string">&quot;, applicationContext=&quot;</span> + applicationContext +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BeanNameAware接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanName = s;</span><br><span class="line">        System.out.println(<span class="string">&quot;【BeanNameAware接口】调用setBeanName(String s)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//BeanFactoryAware接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">        System.out.println(<span class="string">&quot;【BeanFactoryAware接口】调用setBeanFactory(BeanFactory beanFactory)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ApplicationContextAware接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        System.out.println(<span class="string">&quot;【ApplicationContextAware接口】调用setApplicationContext(ApplicationContext applicationContext)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//InitializingBean接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【InitializingBean接口】调用afterPropertiesSet()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//DisposableBean接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【DisposableBean接口】调用destroy()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过&lt;bean&gt;的init-method属性指定的初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【init-method】调用&lt;bean&gt;的init-method属性指定的初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过&lt;bean&gt;的destory-method属性指定的销毁方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myDestory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【destory-method】调用&lt;bean&gt;的destory-method属性指定的销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>2.自定义MyBeanPostProcessor组件实现 BeanPostProcessor, DestructionAwareBeanPostProcessor接口：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.demo.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>, <span class="title">DestructionAwareBeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBeanPostProcessor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【BeanPostProcessor接口】调用postProcessBeforeInitialization方法对bean操作&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【BeanPostProcessor接口】调用postProcessAfterInitialization方法对bean操作&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeforeDestruction</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【DestructionAwareBeanPostProcessor接口】调用postProcessBeforeDestruction方法对bean操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>3.spring的配置文件bean.xml，将Person和MyBeanPostProcessor组件注入IOC容器中：</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.demo.pojo.Person&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">init-method</span>=<span class="string">&quot;myInit&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;myDestory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xiaowang&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;17&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.demo.component.MyBeanPostProcessor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>4.使用junit进行单元测试</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.spring.demo.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============开始初始化容器=============&quot;</span>);</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=============容器初始化完成=============&quot;</span>);</span><br><span class="line">        Person person = applicationContext.getBean(<span class="string">&quot;person&quot;</span>, Person.class);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(<span class="string">&quot;=============容器开始销毁=============&quot;</span>);</span><br><span class="line">        ((ClassPathXmlApplicationContext)applicationContext).registerShutdownHook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>5.运行结果：</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">=============开始初始化容器=============</span><br><span class="line">七月 29, 2021 12:46:09 上午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@5fe5c6f: startup date [Thu Jul 29 00:46:09 CST 2021]; root of context hierarchy</span><br><span class="line">七月 29, 2021 12:46:09 上午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [bean.xml]</span><br><span class="line">【BeanPostProcessor】实现类构造器</span><br><span class="line">【构造器】调用无参构造器实例化Person</span><br><span class="line">【属性注入】注入属性name</span><br><span class="line">【属性注入】注入属性age</span><br><span class="line">【BeanNameAware接口】调用setBeanName(String s)</span><br><span class="line">【BeanFactoryAware接口】调用setBeanFactory(BeanFactory beanFactory)</span><br><span class="line">【ApplicationContextAware接口】调用setApplicationContext(ApplicationContext applicationContext)</span><br><span class="line">【BeanPostProcessor接口】调用postProcessBeforeInitialization方法对bean操作</span><br><span class="line">【InitializingBean接口】调用afterPropertiesSet()</span><br><span class="line">【init-method】调用&lt;bean&gt;的init-method属性指定的初始化方法</span><br><span class="line">【BeanPostProcessor接口】调用postProcessAfterInitialization方法对bean操作</span><br><span class="line">=============容器初始化完成=============</span><br><span class="line">Person&#123;age=17, name=&#x27;xiaowang&#x27;, beanName=&#x27;person&#x27;, beanFactory=org.springframework.beans.factory.support.DefaultListableBeanFactory@5702b3b1: defining beans [person,myBeanPostProcessor]; root of factory hierarchy, applicationContext=org.springframework.context.support.ClassPathXmlApplicationContext@5fe5c6f: startup date [Thu Jul 29 00:46:09 CST 2021]; root of context hierarchy&#125;</span><br><span class="line">=============容器开始销毁=============</span><br><span class="line">七月 29, 2021 12:46:09 上午 org.springframework.context.support.AbstractApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@5fe5c6f: startup date [Thu Jul 29 00:46:09 CST 2021]; root of context hierarchy</span><br><span class="line">【DestructionAwareBeanPostProcessor接口】调用postProcessBeforeDestruction方法对bean操作</span><br><span class="line">【DisposableBean接口】调用destroy()</span><br><span class="line">【destory-method】调用&lt;bean&gt;的destory-method属性指定的销毁方法</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></div></figure>

<p>另附上maven依赖pom.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring AOP</title>
    <url>/2021/08/02/Spring-AOP/</url>
    <content><![CDATA[
        <h3 id="AOP是什么"   >
          <a href="#AOP是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOP是什么" class="headerlink" title="AOP是什么"></a>AOP是什么</h3>
      <p>简单来讲，AOP是<font color="red">面向切面编程</font>，使用动态代理技术，实现在不修改java源代码的情况下，运行时实现方法功能的增强。</p>

        <h3 id="AOP的作用和优势"   >
          <a href="#AOP的作用和优势" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOP的作用和优势" class="headerlink" title="AOP的作用和优势"></a>AOP的作用和优势</h3>
      <p>作用：在程序运行期间，不修改源码对已有方法进行增强。</p>
<p>优势：可以实现业务逻辑各个部分的隔离，从而使得业务逻辑各个部分的耦合性降低；提高程序的可重用性，提高开发效率。</p>

        <h3 id="AOP代理"   >
          <a href="#AOP代理" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOP代理" class="headerlink" title="AOP代理"></a>AOP代理</h3>
      <p>AOP代理可分为<font color="red">静态代理</font>和<font color="red">动态代理</font>两大类。</p>
<span id="more"></span>

<p>静态代理是指使用AOP框架提供的命令进行编译，从而在<font color="red">编译阶段</font>就可生成AOP代理类，因此也称为<font color="red">编译时增强</font>；</p>
<p>动态代理是指在<font color="red">运行时借助JDK动态代理、CGLIB代理等在内存中”临时”生成AOP动态代理类</font>，因此也称为<font color="red">运行时增强</font>；</p>
<p>静态代理分为：编译时织入（特殊编译器实现）、类加载时织入（特殊的类加载器实现）</p>
<p>动态代理分为：JDK动态代理（基于接口实现）、CGLIB（基于类实现）</p>

        <h3 id="AOP实现的原理"   >
          <a href="#AOP实现的原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOP实现的原理" class="headerlink" title="AOP实现的原理"></a>AOP实现的原理</h3>
      <p>Spring中AOP实现的原理：使用动态代理技术</p>
<p>在Spring中，会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>
<p>如果目标对象实现接口，则使用<font color="red">JDK动态代理</font>（默认）；</p>
<p>如果目标对象没有实现接口，则使用<font color="red">CGLIB代理</font>；</p>
<p>在Java中，从织入切面的方式上来看，存在三种织入方式：<font color="red">编译期织入、类加载期织入和运行期织入</font>。</p>
<p>编译期织入：是指在Java编译期，采用特殊的编译器，将切面织入到Java类中；</p>
<p>类加载期织入：是指通过特殊的类加载器，在类字节码加载到JVM时，织入切面；</p>
<p>运行期织入：是指采用JDK动态代理或CGLIB代理的方式在运行时进行切面的织入；</p>

        <h3 id="AOP核心概念"   >
          <a href="#AOP核心概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h3>
      <ul>
<li><p><font color="red">Joinpoint(连接点)：</font></p>
<p>在Spring中，连接点指的是被拦截的方法（哪些要被增强功能的方法），Spring只支持方法类型的连接点，实际上连接点还可以是字段或者构造器。</p>
</li>
<li><p><font color="red">Pointcut(切入点)：</font></p>
<p>对连接点(Joinpoint)进行拦截的定义。</p>
<p>如：@Pointcut(“execution(public int com.spring.demo.aop.service.Math.*(..))”)</p>
<p>表示拦截Math类的所有方法，不限参数。</p>
</li>
<li><p><font color="red">Advice(通知)：</font></p>
<p>所谓通知是指拦截到连接点（Joinpoint）之后所要做的事情就是通知。</p>
<p>通知的类型：前置通知，后置通知，异常通知，最终通知，环绕通知。</p>
</li>
<li><p><font color="red">Target(目标对象)：</font></p>
<p>被代理的对象。</p>
</li>
<li><p><font color="red">Aspect(切面)：</font></p>
<p>切面指的是切入点（Pointcut）和通知（Advice）的结合；即切面 = 切入点 + 通知。</p>
</li>
<li><p><font color="red">Weaving(织入)：</font></p>
<p>将切面（Aspect）应用到目标对象并创建代理对象的过程。Spring采用动态代理织入（运行期织入），AspectJ采用编译期织入和类装载期织入。</p>
</li>
<li><p><font color="red">Proxy(代理)：</font></p>
<p>一个类被AOP织入增强后，即产生一个结果代理类。</p>
</li>
<li><p><font color="red">introduction(引入)：</font></p>
<p>在不修改代码的前提下，引入可以在<font color="red">运行期</font>为类动态地添加一些方法或属性。</p>
</li>
<li><p><font color="red">横切关注点：</font></p>
<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点。</p>
</li>
</ul>

        <h3 id="代码演示"   >
          <a href="#代码演示" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3>
      <p>需求说明：希望在执行方法的时候自动记录日志信息。（本次代码演示以纯注解方式实现）</p>
<p>pom.xml中的依赖：</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring核心包 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring与aspectj整合包 --&gt;</span>       </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- junit测试包 --&gt;</span>     </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>目标类（执行业务逻辑的类）：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【业务逻辑】除法运算开始......&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>切面类（对目标类进行增强的类）：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标明当前类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切入点表达式</span></span><br><span class="line"><span class="comment">     * 如果是在本类引用，直接写上方法名如：pointCut()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public int com.spring.demo.aop.service.Math.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知:在目标方法执行之前运行</span></span><br><span class="line"><span class="comment">     * 切入点表达式：public int com.spring.demo.aop.service.Math.div(int,int) 针对Math的div方法进行切入</span></span><br><span class="line"><span class="comment">     * public int com.spring.demo.aop.service.Math.*(..)   对Math的所有方法进行切入，并且参数不限定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法运行开始前......参数列表是：&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知:在目标方法执行结束后运行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法运行结束后......参数列表是：&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常返回通知:在目标方法正常返回之后运行，出现异常不执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法运行正常结束......参数列表是：&quot;</span> + Arrays.toString(args) + <span class="string">&quot;;运行结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知:在目标方法出现异常之后运行</span></span><br><span class="line"><span class="comment">     * 特别注意：  参数列表第一个参数必须是JoinPoint，否则报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint, Exception exception)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(methodName + <span class="string">&quot;方法运行异常......参数列表是：&quot;</span> + Arrays.toString(args) + <span class="string">&quot;;\n 异常信息：&quot;</span> + exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知：动态代理，手动推进目标方法运行(joinPoint.procced)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意：如果方法有返回值，必须要将结果返回，否则会报以下错误：</span></span><br><span class="line"><span class="comment">     * org.springframework.aop.AopInvocationException:</span></span><br><span class="line"><span class="comment">     * Null return value from advice does not match primitive return type for:</span></span><br><span class="line"><span class="comment">     * public int com.spring.demo.aop.service.Math.div(int,int)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">arround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕通知】环绕前......&quot;</span>);</span><br><span class="line">            Object result = proceedingJoinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕通知】环绕后......&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;结果：&quot;</span> + result);</span><br><span class="line">            <span class="comment">//如果方法有返回值，必须返回，否则报错</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            String exception = Arrays.toString(throwable.getStackTrace());</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕通知】环绕异常......&quot;</span> + <span class="string">&quot;异常信息：&quot;</span> + exception);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【环绕通知】环绕最终......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>配置类：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Configuration</span> 表示当前类是一个配置类，相当于spring的配置文件</span></span><br><span class="line"><span class="comment">* <span class="doctag">@EnableAspectJAutoProxy</span> 开启AOP自动代理</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Bean</span> 向IOC容器中注入bean 相当于spring配置文件中的&lt;bean&gt;&lt;/bean&gt;标签</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切面类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LogAspect <span class="title">logAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogAspect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//业务逻辑类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Math <span class="title">math</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Math();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>测试类：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据指定的配置类创建Spring的IOC容器</span></span><br><span class="line">        AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig.class);</span><br><span class="line">        Math math = applicationContext.getBean(Math.class);</span><br><span class="line">        math.div(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">        applicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>运行结果：</p>
<p><img src="/mdimages/image-20210801171055453.png" alt="image-20210801171055453"></p>
<p>总结：</p>
<p>@Before前置通知：在目标方法执行前执行</p>
<p>@After最终通知：无论目标方法正常返回，还是发生异常都会执行</p>
<p>@AfterReturning后置通知：在目标方法正常返回后执行，<font color="red">它和异常通知只能执行一个</font></p>
<p>@AfterThrowing异常通知：在目标方法发生异常后执行，<font color="red">它和后置通知只能执行一个</font></p>
<p>@Around环绕通知：环绕目标方法执行</p>
<p>除去环绕通知以外，其它通知的执行顺序可以借鉴java中的try-catch-finally来理解：如下</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   【前置通知】<span class="meta">@Before</span></span><br><span class="line">    执行目标对象方法</span><br><span class="line">   【后置通知】<span class="meta">@AfterReturning</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">   【异常通知】<span class="meta">@AfterThrowing</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">   【最终通知】<span class="meta">@After</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务</title>
    <url>/2021/08/07/Spring%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[
        <h3 id="事务定义"   >
          <a href="#事务定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务定义" class="headerlink" title="事务定义"></a>事务定义</h3>
      <p>事务（transaction）是一组执行单元，这个执行单元的各个组成部分要么同时执行成功，要么同时执行失败。</p>

        <h3 id="事务的特性（ACID原则）"   >
          <a href="#事务的特性（ACID原则）" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务的特性（ACID原则）" class="headerlink" title="事务的特性（ACID原则）"></a>事务的特性（ACID原则）</h3>
      <p>事务具有4个基本特性：<font color="red">原子性、一致性、隔离性、持久性</font>。</p>
<ul>
<li><font color="red">原子性</font>(Atomicity)：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li>
<li><font color="red">一致性</font>(Consistency)：一旦事务完成（不管成功还是失败），系统必须确保事务前和事务后，被操作的目标资源状态一致。（如银行转账，转账前和转账后，总金额不变）</li>
<li><font color="red">隔离性</font>(Isolation)：一个事务的执行不能被其他的事务影响。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，多个并发事务之间不能互相干扰。</li>
<li><font color="red">持久性</font>(Durability)：一个事务一旦提交，它对数据库中数据的改变会永久存储起来。其他操作不会对它产生影响。</li>
</ul>
<span id="more"></span>


        <h3 id="事务的传播机制"   >
          <a href="#事务的传播机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务的传播机制" class="headerlink" title="事务的传播机制"></a>事务的传播机制</h3>
      <p>事务的传播性一般用在事务嵌套的场景，比如一个事务方法里面调用了另外一个事务方法，那么这两个方法是各自作为独立的方法提交事务还是内层的事务合并到外层的事务一起提交，这就是需要事务传播机制的配置来确定如何执行。</p>
<p>事务的传播行为：</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">行为</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">REQUIRED</td>
<td align="center"><font color="red">Spring默认的传播机制</font>，如果当前没有事务，就新建一个事务；如果已经存在一个事务，则加入到这个事务中。</td>
</tr>
<tr>
<td align="center">SUPPORTS</td>
<td align="center">支持当前事务，如果当前没有事务，就以非事务方法执行（没事务）</td>
</tr>
<tr>
<td align="center">MANDATORY</td>
<td align="center">使用当前的事务，如果当前没有事务，就抛出异常</td>
</tr>
<tr>
<td align="center">REQUES_NEW</td>
<td align="center">每次都会新开启一个事务，同时把外层事务挂起，当当前事务执行完毕后，恢复外层事务的执行。如果外层没有事务，执行当前新开启的事务即可</td>
</tr>
<tr>
<td align="center">NOT_SUPPORT</td>
<td align="center">不支持事务，如果外层存在事务则挂起，执行完当前代码后，恢复外层事务，无论是否异常都不会回滚当前的代码</td>
</tr>
<tr>
<td align="center">NEVER</td>
<td align="center">不支持事务，以非事务方式运行，如果当前存在事务，抛出异常</td>
</tr>
<tr>
<td align="center">NESTED</td>
<td align="center">该传播机制的特点是可以保存状态保存点，当前事务回滚到某一个点，从而避免所有的嵌套事务都回滚，即各自回滚各自的，如果没有对嵌套事务异常捕获，基本还是会引起全部回滚；<font color="red">注意</font>：无论在外层事务还是在内层嵌套事务捕获嵌套事务异常都不会引起外层事务回滚，只会回滚嵌套事务；但是在内层嵌套事务捕获异常会引起在数据库插入一行空的记录；外层事务和嵌套事务都属于同一个事务（外层事务）；如果外层事务回滚会将嵌套事务一起回滚；</td>
</tr>
</tbody></table></div>

        <h3 id="事务的隔离级别"   >
          <a href="#事务的隔离级别" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3>
      <p>事务隔离级别定义了一个事务可能受到其他并发事务活动影响时的处理态度。</p>
<p>典型案例，多个事务同时运行，经常会为了完成他们的工作而操作同一个数据。并发虽然是必需的，但是会导致以下问题的出现：</p>
<ul>
<li><p><font color="red">脏读</font>：脏读指一个事务读取了另一个事务修改但尚未提交的数据。（如果这些改变了的数据被回滚，那么产生脏读的事务读取的这些数据会是无效的）。</p>
</li>
<li><p><font color="red">不可重复读</font>：不可重复读指一个事务执行相同的查询两次或两次以上，但每次查询结果都不相同。（通常是由于另一个并发事务在两次查询之间更新了数据）。</p>
</li>
<li><p><font color="red">幻读</font>：幻读和不可重复读相似，指一个事务（T1）读取几行记录后，另一个并发事务（T2）插入了一些记录，在后来的查询中，第一个事务（T1）就会发现一些原来没有的额外记录。</p>
<p><font color="orange">不可重复读重点在修改，幻读重点在新增或删除</font>。</p>
<p>在理想的情况下，事务之间需要完全隔离，从而防止这些问题的发生，但是，完全隔离要求事务互相等待来完成工作，会阻碍并发性。因为隔离经常涉及锁定在数据库中的记录（行锁），甚至有时是锁表（表锁）。因此，可以根据业务场景选择不同的隔离级别，下面是spring事务提供的几种隔离级别。</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">含义</th>
<th align="center">影响</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ISOLATION_DEFAULT</td>
<td align="center">使用数据库默认的隔离级别<font color="red">默认设置</font></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">ISOLATION_READ_UNCOMMITTED</td>
<td align="center">可以读取尚未提交的数据。（读未提交）</td>
<td align="center">可能导致脏读、不可重复读、幻读</td>
</tr>
<tr>
<td align="center">ISOLATION_READ_COMMITTED</td>
<td align="center">可以读取并发事务已经提交的数据（读已提交）<font color="red">Oracle默认级别</font></td>
<td align="center">可以防止脏读，但是不可重复读和幻读仍可能会发生</td>
</tr>
<tr>
<td align="center">ISOLATION_REPEATABLE_READ</td>
<td align="center">可以读取并发事务提交修改后的数据(可重复读)<font color="red">MySql默认级别</font></td>
<td align="center">可以防止脏读、不可重复读，但是幻读仍可能发生</td>
</tr>
<tr>
<td align="center">ISOLATION_SERIALIZABLE</td>
<td align="center">完全遵循ACID原则的隔离级别，可以读取并发事务提交新增或删除后的数据（可串行化）</td>
<td align="center">可以确保不发生脏读、不可重复读和幻读，但是因为它通常是通过当前事务所涉及的数据表来进行锁表完成的，所以它的效率在所有隔离级别中式最慢的。</td>
</tr>
</tbody></table></div>
</li>
</ul>

        <h3 id="事务只读"   >
          <a href="#事务只读" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务只读" class="headerlink" title="事务只读"></a>事务只读</h3>
      <p>一个事务如果只对数据库执行读操作，那么该数据库就可能利用该事务的只读特性，采取某些优化措施。通常建议查询时将事务声明设置为只读，可以给数据库一个机会来应用它认为合适的优化措施。由于只读的优化措施是在一个事务启动时由数据库实施的，因此，只有对于那些具有可能启动一个新事务的传播行为（REQUIRED、REQUES_NEW、NESTED）的方法来说，将事务声明为只读才有意义。</p>

        <h3 id="事务超时时间"   >
          <a href="#事务超时时间" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务超时时间" class="headerlink" title="事务超时时间"></a>事务超时时间</h3>
      <p>由于事务可能涉及对数据库的锁定，导致事务运行时间可能会变得很长，长时间运行的事务会不必要地占用数据库资源，这时就可以声明一个事务在特定时间（<font color="red">默认值是-1，没有超时限制。如果有设置，单位为秒</font>）后自动回滚，让它不必再继续等待它自己结束。这就是声明式事务的一个特性超时时间。</p>
<p>由于超时时间是在一个事务启动的时候开始的，因此，只有对于那些具有可能启动一个新事务的传播行为（REQUIRED、REQUES_NEW、NESTED）的方法来说，声明事务超时时间才有意义。</p>

        <h3 id="事务回滚规则"   >
          <a href="#事务回滚规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务回滚规则" class="headerlink" title="事务回滚规则"></a>事务回滚规则</h3>
      <p>在默认情况下，事务只在出现运行时异常(RunTime Exception)时才会回滚，而在出现受检查异常（编译时异常）时不会回滚。不过可以声明在出现特定异常时像运行时异常一样回滚，同样，也可以声明一个事务在出现特定的异常时不回滚。</p>
<p>Spring声明式事务配置案例：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事务的传播行为：</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line"><span class="comment">//事务的隔离级别：</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line"><span class="comment">//只读：</span></span><br><span class="line"><span class="meta">@Transactional(readOnly=true)</span></span><br><span class="line"><span class="comment">/*该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。 */</span></span><br><span class="line"><span class="comment">//事务的超时时间：</span></span><br><span class="line"><span class="meta">@Transactional(timeout=30)</span></span><br><span class="line"><span class="comment">//回滚规则：</span></span><br><span class="line"><span class="comment">//指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)</span></span><br><span class="line"><span class="comment">//指定多个异常类：@Transactional(rollbackFor=&#123;RuntimeException.class, Exception.class&#125;)  </span></span><br><span class="line"><span class="comment">/*该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。*/</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="Spring编程式事务管理"   >
          <a href="#Spring编程式事务管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring编程式事务管理" class="headerlink" title="Spring编程式事务管理"></a>Spring编程式事务管理</h3>
      <p>编程式事务管理是<font color="orange">侵入性事务管理</font>，使用TransactionTemplate或者直接使用PlatformTransactionManager接口，对于编程式事务管理，Spring推荐使用TransactionTemplate。</p>
<p>代码演示：</p>
<p>maven依赖</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--事务支持--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--jdbcTemplate--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>jdbc.properties:</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.initialSize</span> = <span class="string">3</span></span><br><span class="line"><span class="meta">jdbc.maxActive</span> = <span class="string">50</span></span><br><span class="line"><span class="meta">jdbc.minIdle</span> = <span class="string">3</span></span><br><span class="line"><span class="meta">jdbc.maxWait</span> = <span class="string">6000</span></span><br></pre></td></tr></table></div></figure>

<p>配置类：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载类路径下的 jdbc.properties 配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.initialSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.maxActive&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource =  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setInitialSize(initialSize);</span><br><span class="line">        dataSource.setMaxActive(maxActive);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  JdbcTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TransactionTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transactionManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionTemplate <span class="title">createTransactionTemplate</span><span class="params">(PlatformTransactionManager transactionManager)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransactionTemplate(transactionManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.spring.demo.tx&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>entiry实体类:</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>dao接口：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;insert into account(id,money) values(?,?)&quot;</span>,</span><br><span class="line">                account.getId(), account.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>service接口：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义回调函数</span></span><br><span class="line">        TransactionCallback&lt;Object&gt; callback = (TransactionStatus status) -&gt; &#123;</span><br><span class="line">            <span class="comment">//需要事务控制的逻辑写在这里</span></span><br><span class="line">            accountDao.save(account);</span><br><span class="line">            <span class="comment">//模拟异常</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//事务控制执行，传入回调函数</span></span><br><span class="line">        transactionTemplate.execute(callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>测试类：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring 整合 Junit 创建容器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;TxConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTx</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(<span class="number">2</span>);</span><br><span class="line">        account.setMoney(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        accountService.save(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="Spring声明式事务管理"   >
          <a href="#Spring声明式事务管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring声明式事务管理" class="headerlink" title="Spring声明式事务管理"></a>Spring声明式事务管理</h3>
      <p>声明式事务管理是建立在AOP的基础上，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或加入一个事务，执行完目标方法之后根据执行的情况提交或者回滚。</p>
<p>声明式事务属于<font color="orange">无侵入式事务管理</font>，不会影响业务逻辑的实现，只需要在配置文件中定义相关的事务规则声明或者通过注解的方式，便可将事务规则应用到业务逻辑中。</p>
<p>声明式事务管理是Spring倡导的非侵入式的编程方式，<font color="orange">唯一不足的地方就是声明式事务管理的粒度是方法级别，而编程式事务管理式可以到代码块级别的，</font>但是可以通过提取方法的方式完成声明式事务管理的配置。</p>

        <h4 id="XML配置方式实现"   >
          <a href="#XML配置方式实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#XML配置方式实现" class="headerlink" title="XML配置方式实现"></a>XML配置方式实现</h4>
      <p>maven依赖、entiry实体类、jdbc.properties文件与编程式代码演示一样</p>
<p>dao接口：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;insert into account(id,money) values(?,?)&quot;</span>,</span><br><span class="line">                account.getId(), account.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>service接口：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>spring_tx.xml配置文件：</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.demo.tx_xml.dao.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcTemplate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.demo.tx_xml.service.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载jdbc.properties配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--dataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring事务管理器(切面类)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring事务通知规则配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    作用： Aop 拦截到方法以后，如何控制事务</span></span><br><span class="line"><span class="comment">    tx:advice 事务通知规则配置</span></span><br><span class="line"><span class="comment">    id 名称</span></span><br><span class="line"><span class="comment">    transaction-manager 引用的事务管理器</span></span><br><span class="line"><span class="comment">    tx:attributes 事务应用规则配置</span></span><br><span class="line"><span class="comment">    tx:method 对指定的方法，如何管理事务</span></span><br><span class="line"><span class="comment">    name=&quot;*&quot; * 表示所有方法</span></span><br><span class="line"><span class="comment">    read-only 是否只读事务，默认 false，表示读写操作</span></span><br><span class="line"><span class="comment">    propagation=&quot;REQUIRED&quot; 事务传播行为。REQUIRED 表示方法必须有事务环境</span></span><br><span class="line"><span class="comment">    isolation=&quot;DEFAULT&quot; 事务隔离级别</span></span><br><span class="line"><span class="comment">    rollback-for=&quot;&quot; 遇到指定的异常回滚。默认所有的异常都回滚</span></span><br><span class="line"><span class="comment">    no-rollback-for=&quot;java.lang.NullPointerException&quot; 遇到指定的异常不回滚(空指针不回滚)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;search*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Aop配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.spring.demo.tx_xml.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点表达式与通知的关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>测试类：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring_tx.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTx_xml</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;accountService代理对象：&quot;</span> + accountService.getClass());</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(<span class="number">3</span>);</span><br><span class="line">        account.setMoney(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        accountService.save(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="注解方式实现"   >
          <a href="#注解方式实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#注解方式实现" class="headerlink" title="注解方式实现"></a>注解方式实现</h4>
      <p>maven依赖、entiry实体类、jdbc.properties文件、dao接口与编程式代码演示一样</p>
<p>service接口：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Transactional</span> 事务注解</span></span><br><span class="line"><span class="comment"> * 定义位置：</span></span><br><span class="line"><span class="comment"> * 1. 接口、父类上</span></span><br><span class="line"><span class="comment"> * 表示实现当前接口的类、继承父类的子类都应用 spring 声明式事务</span></span><br><span class="line"><span class="comment"> * 2. 接口方法上</span></span><br><span class="line"><span class="comment"> * 接口的实现类，重写了方法，也应用接口中的事务定义注解</span></span><br><span class="line"><span class="comment"> * 3. 实现类上</span></span><br><span class="line"><span class="comment"> * 该实现类的所有方法都应用事务</span></span><br><span class="line"><span class="comment"> * 4. 实现类的方法上， 实现类的方法应用事务</span></span><br><span class="line"><span class="comment"> * 事务属性：</span></span><br><span class="line"><span class="comment"> * readOnly = false 默认值，读写事务，可以进行 CRUD 操作</span></span><br><span class="line"><span class="comment"> * propagation = Propagation.REQUIRED 默认值表示当前执行的方法必须有事务环境。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = false,propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        accountDao.save(account);</span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>配置类：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>  表示配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ComponentScan</span>  开启spring注解包扫描</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Import</span> 引入其他配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableTransactionManagement</span> 开启spring声明式事务管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.spring.demo.tx_annotation&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载类路径下的 jdbc.properties 配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.initialSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initialSize;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.maxActive&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxActive;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource =  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setInitialSize(initialSize);</span><br><span class="line">        dataSource.setMaxActive(maxActive);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  JdbcTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">createTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>测试类：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring 整合 Junit 创建容器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;TxConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTx_Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(<span class="number">2</span>);</span><br><span class="line">        account.setMoney(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        accountService.save(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ单机版安装篇</title>
    <url>/2021/08/14/RocketMQ%E5%8D%95%E6%9C%BA%E7%89%88%E5%AE%89%E8%A3%85%E7%AF%87/</url>
    <content><![CDATA[
        <h3 id="单机版安装"   >
          <a href="#单机版安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#单机版安装" class="headerlink" title="单机版安装"></a>单机版安装</h3>
      
        <h4 id="软硬件要求"   >
          <a href="#软硬件要求" class="heading-link"><i class="fas fa-link"></i></a><a href="#软硬件要求" class="headerlink" title="软硬件要求"></a>软硬件要求</h4>
      <p>系统要求是64位的，JDK要求是1.8版本及以上，Maven 3.2x版本以上。详情可查看官网：<span class="exturl"><a class="exturl__link"   href="http://rocketmq.apache.org/docs/quick-start/" >Quick Start - Apache RocketMQ</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><img src="/mdimages/image-20211029091320179.png" alt="image-20211029091320179"></p>

        <h4 id="下载RocketMQ安装包"   >
          <a href="#下载RocketMQ安装包" class="heading-link"><i class="fas fa-link"></i></a><a href="#下载RocketMQ安装包" class="headerlink" title="下载RocketMQ安装包"></a>下载RocketMQ安装包</h4>
      <p>官网下载地址：<span class="exturl"><a class="exturl__link"   href="http://rocketmq.apache.org/release_notes/release-notes-4.8.0/" >Release Notes - Apache RocketMQ - Version 4.8.0 - Apache RocketMQ</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><img src="/mdimages/image-20211029091619322.png" alt="image-20211029091619322"></p>

        <h4 id="解压安装包"   >
          <a href="#解压安装包" class="heading-link"><i class="fas fa-link"></i></a><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h4>
      <p>将下载好的安装包上传到Linux，路径根据自己习惯存放，笔者习惯存放在/usr/local/soft。</p>
<p><img src="/mdimages/image-20211029092113991.png" alt="image-20211029092113991"></p>
<p>使用unzip命令解压压缩包</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">unzip rocketmq-all-4.8.0-bin-release.zip</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029092514059.png" alt="image-20211029092514059"></p>
<span id="more"></span>


        <h4 id="修改初始内存配置"   >
          <a href="#修改初始内存配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改初始内存配置" class="headerlink" title="修改初始内存配置"></a>修改初始内存配置</h4>
      <p>修改runserver.sh</p>
<p>使用vim命令打开bin/runserver.sh文件，修改以下参数：</p>
<p><img src="/mdimages/image-20211029094705761.png" alt="image-20211029094705761"></p>
<p>修改runbroker.sh</p>
<p>使用vim命令打开bin/runbroker.sh文件，修改以下参数：</p>
<p><img src="/mdimages/image-20211029095053634.png" alt="image-20211029095053634"></p>

        <h4 id="启动"   >
          <a href="#启动" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动" class="headerlink" title="启动"></a>启动</h4>
      
        <h5 id="启动NameServer"   >
          <a href="#启动NameServer" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动NameServer" class="headerlink" title="启动NameServer"></a>启动NameServer</h5>
      <figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nohup sh bin/mqnamesrv &amp;</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029095748077.png" alt="image-20211029095748077"></p>

        <h5 id="查看NameServer启动日志信息"   >
          <a href="#查看NameServer启动日志信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#查看NameServer启动日志信息" class="headerlink" title="查看NameServer启动日志信息"></a>查看NameServer启动日志信息</h5>
      <figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029095842022.png" alt="image-20211029095842022"></p>

        <h5 id="启动Broker"   >
          <a href="#启动Broker" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动Broker" class="headerlink" title="启动Broker"></a>启动Broker</h5>
      <figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029100047749.png" alt="image-20211029100047749"></p>
<p>查看Broker启动日志信息</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029100220706.png" alt="image-20211029100220706"></p>

        <h4 id="消息发送-接收测试"   >
          <a href="#消息发送-接收测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息发送-接收测试" class="headerlink" title="消息发送/接收测试"></a>消息发送/接收测试</h4>
      
        <h5 id="发送消息"   >
          <a href="#发送消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h5>
      <figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></div></figure>


        <h5 id="接收消息"   >
          <a href="#接收消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h5>
      <figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></div></figure>


        <h4 id="关闭"   >
          <a href="#关闭" class="heading-link"><i class="fas fa-link"></i></a><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4>
      <p>无论是关闭NameServer还是Broker,都是使用bin/mqshutdown命令。</p>
<p><img src="/mdimages/image-20211029101140151.png" alt="image-20211029101140151"></p>

        <h4 id="可视化控制台安装"   >
          <a href="#可视化控制台安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#可视化控制台安装" class="headerlink" title="可视化控制台安装"></a>可视化控制台安装</h4>
      <p>下载地址：<span class="exturl"><a class="exturl__link"   href="https://github.com/apache/rocketmq-externals" >https://github.com/apache/rocketmq-externals</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>解压rocketmq-externals-master.zip压缩包。</p>
<p>rocketmq-externals-master包中的rocketmq-console包就是可视化控制台。</p>

        <h5 id="修改配置"   >
          <a href="#修改配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5>
      <p>修改src/main/resources中的application.properties配置文件。</p>
<ul>
<li>默认端口号为8080，修改为一个不常用的端口号</li>
<li>指定RocketMQ的NameServer地址</li>
</ul>
<p><img src="/mdimages/image-20211029132739794.png" alt="image-20211029132739794"></p>

        <h5 id="打包"   >
          <a href="#打包" class="heading-link"><i class="fas fa-link"></i></a><a href="#打包" class="headerlink" title="打包"></a>打包</h5>
      <p>在rocketmq-console目录下打开cmd命令窗口，运行maven的打包命令。</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029104120792.png" alt="image-20211029104120792"></p>
<p>如果出现以下错误，请检查本地环境配置的JDK版本是否是1.8，因为Maven中指定使用的JDK版本是根据本地环境变量名为JAVA_HOME指定的。</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project rocketmq-console-ng: Fatal error compiling: 无效的目标发行版: 1.8 -&gt; [Help 1]</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029132330510.png" alt="image-20211029132330510"></p>

        <h5 id="启动-1"   >
          <a href="#启动-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5>
      <p>启动前需要确认NameServer和Broker是否成功启动。</p>
<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-2.0.0.jar</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029134820511.png" alt="image-20211029134820511"></p>
<p><img src="/mdimages/image-20211029134753323.png" alt="image-20211029134753323"></p>

        <h5 id="访问"   >
          <a href="#访问" class="heading-link"><i class="fas fa-link"></i></a><a href="#访问" class="headerlink" title="访问"></a>访问</h5>
      <p><img src="/mdimages/image-20211029134927369.png" alt="image-20211029134927369"></p>
<p>如果出现以下弹框报错，请检查防火墙是否开放了9876端口，或者关闭防火墙，再重新刷新</p>
<p><img src="/mdimages/image-20211029134319539.png" alt="image-20211029134319539"></p>
]]></content>
      <categories>
        <category>消息中间件</category>
      </categories>
  </entry>
  <entry>
    <title>分布式事务基础概念</title>
    <url>/2021/09/11/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[
        <h3 id="什么是事务"   >
          <a href="#什么是事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3>
      <p>事务（transaction）是一组执行单元，这个执行单元的各个组成部分要么同时执行成功，要么同时执行失败。</p>

        <h3 id="本地事务"   >
          <a href="#本地事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3>
      <p>在计算机系统中，更多的是通过关系型数据库来控制事务，这是利用数据库本身的事务特性来实现的，因此叫数据库事务，由于应用主要靠关系型数据库来控制事务，且数据库通常喝应用在同一个服务器，所以基于关系型数据库的事务又被称为本地事务。</p>
<p>数据库事务的四大特性ACID：</p>
<p><b>A（Atomic）: 原子性</b>，构成事务的所有操作，要么都执行完成，要么全部不执行，不可能出现部分成功部分失败的情况。</p>
<p><b>C（Consistency）:一致性</b>，在事务执行前后，数据库的一致性约束没有被破坏。比如银行转账，转账前和转账后，总金额不变。</p>
<p><b>I（Isolation）:隔离性</b>，一个事务的执行不能被其他的事务影响。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，多个并发事务之间不能互相干扰。</p>
<p><b>D（Durability）:持久性</b>，事务完成之后，该事务对数据的更改会被持久化到数据库，且不会被回滚。</p>
<span id="more"></span>


        <h3 id="分布式事务"   >
          <a href="#分布式事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3>
      <p>随着互联网的快速发展，软件系统由原来的单体应用转变为分布式应用，如下图描述了单体应用向微服务的演变：</p>
<p><img src="/mdimages/image-20211103214412223.png" alt="image-20211103214412223"></p>
<p>分布式系统会把一个应用系统拆分为可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操作，这种分布式系统环境下由不同的服务之间通过网络远程协作完成的事务称之为<b>分布式事务</b>。例如用户注册送积分事务、创建订单减库存事务，银行转账事务都是分布式事务。</p>
<p>我们知道本地事务依赖数据库本身提供的事务特性来实现，因此可以进行以下逻辑控制本地事务：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span> transaction;</span><br><span class="line">   <span class="number">1.</span>本地数据库操作：张三减少金额</span><br><span class="line">   <span class="number">2.</span>本地数据库操作：李四增加金额</span><br><span class="line"><span class="keyword">commit</span> transaction;   </span><br></pre></td></tr></table></div></figure>

<p>但是在分布式环境下，会变成如下：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span> transaction;</span><br><span class="line">   <span class="number">1.</span>本地数据库操作：张三减少金额</span><br><span class="line">   <span class="number">2.</span>远程调用：李四增加金额</span><br><span class="line"><span class="keyword">commit</span> transaction;  </span><br></pre></td></tr></table></div></figure>

<p>可以设想，当远程调用让李四增加金额成功了，可是由于网络问题远程调用并没有返回（或者响应超时），此时本地事务提交失败就回滚了张三减少金额的操作，这时就会造成张三没有减少金额，而李四却增加了金额，导致数据不一致。</p>
<p>因此在分布式价格的基础上，传统数据库事务就无法使用了，张三和李四不在一个数据库中，甚至不在一个应用系统里，实现转账事务需要通过远程调用，由于网络问题就会导致分布式事务问题。</p>

        <h3 id="分布式事务产生的场景"   >
          <a href="#分布式事务产生的场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#分布式事务产生的场景" class="headerlink" title="分布式事务产生的场景"></a>分布式事务产生的场景</h3>
      <p>1、典型的场景就是在微服务架构中，微服务之间通过远程调用来完成事务操作。比如：订单微服务和库存微服务，下单的同时订单微服务请求库存微服务减库存。简而言之：<b>跨JVM进程产生分布式事务</b>。<img src="/mdimages/image-20211103231404546.png" alt="image-20211103231404546"></p>
<p>2、单体系统访问多个数据库实例，当单体系统需要访问多个数据库时就会产生分布式事务。比如：用户信息和订单信息分别在两个MySql数据库中存储，用户管理系统删除用户信息，需要分别删除用户信息及用户的订单信息，由于数据分布在不同的数据库（实例），需要通过不同的数据库链接去操作数据，此时产生分布式事务。简而言之：<b>跨数据库（实例）产生分布式事务</b>。</p>
<p><img src="/mdimages/image-20211103232005105.png" alt="image-20211103232005105"></p>
<p>3、多服务访问同一数据库实例，比如：订单微服务和库存微服务访问同一个数据库也会产生分布式事务，原因是跨JVM进程，两个微服务持有不同的数据库连接进行数据库操作，此时会产生分布式事务。</p>
<p><img src="/mdimages/image-20211103234727982.png" alt="image-20211103234727982"></p>

        <h3 id="CAP理论"   >
          <a href="#CAP理论" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3>
      <p>CAP是Consistency、Availability、Partition tolerance三个词语的缩写，分别表示一致性、可用性、分区容错性。</p>
<p>为了方便我们理解CAP理论，我们以一个业务场景的讲解来加深理解。</p>
<p>如下图，是商品信息管理的执行流程：</p>
<p><img src="/mdimages/image-20211104001752984.png" alt="image-20211104001752984"></p>
<p>整体执行流程：</p>
<p>1、商品服务请求主数据库写入商品信息(添加商品、修改商品、删除商品)。</p>
<p>2、主数据库向商品服务响应写入成功。</p>
<p>3、商品服务请求从数据库读取商品信息。</p>
<p><b>C - Consistency</b>:</p>
<p>一致性是指写操作后的读操作可以读取到最新的数据状态，当数据分布在多个节点上，从任意节点读取到的数据都是最新的状态。</p>
<p>从商品信息管理中我们知道读写要满足一致性就要实现：</p>
<ul>
<li>商品服务写入主数据库成功，则向从数据库查询新数据成功。</li>
<li>商品服务写入主数据库失败，则向从数据库查询新数据失败。</li>
</ul>
<p>如何实现数据一致性？</p>
<ul>
<li>写入主数据库后要将数据同步到从数据库。</li>
<li>写入主数据库后，在向从数据库同步的时候要将从数据库锁定，待同步完成后再释放锁，以免在新数据写入成功后，从从数据库查询到旧的数据。</li>
</ul>
<p>分布式系统一致性的特点：</p>
<ol>
<li>由于存在数据同步的过程，写操作的响应会有一定的延迟。</li>
<li>为了保证数据一致性会对资源暂时锁定，待数据同步完成释放锁定的资源。</li>
<li><font style="color:red">如果请求数据同步失败的节点则会返回错误信息，一定不会返回旧数据。</font></li>
</ol>
<p><b>A - Availability</b>:</p>
<p>可用性是指任何事务操作都可以得到响应结果，且不会出现响应超时或响应错误。</p>
<p>从商品信息管理中我们知道商品信息读取满足可用性就要实现：</p>
<ul>
<li>从数据库接收到数据查询的请求则立即能够响应数据查询结果。</li>
<li>从数据库不允许出现响应超时或响应错误。</li>
</ul>
<p>如何实现可用性？</p>
<ul>
<li>写入主数据库后要将数据同步到从数据库。</li>
<li>由于要保证从数据库的可用性，不可将从数据库中的资源锁定。</li>
<li>即使数据还没有同步完成，从数据库也要返回要查询的数据，哪怕是旧数据，如果连旧数据也没有则可以按照约定返回一个默认信息，但不能返回错误或响应超时。</li>
</ul>
<p>分布式系统可用性的特点：</p>
<ol>
<li><font style="color:red">所有请求都有响应，且不会出现响应超时或响应错误。</font></li>
</ol>
<p><b>P - Partition tolerance</b>:</p>
<p>在分布式系统中，多个节点之间的网络本来是连通的，但是因为某些故障（比如部分节点网络出现问题），某些节点之间不连通了，整个网络就分成了几块区域，这就是网络分区。不可避免的会出现由于网络问题而导致节点之间通信失败，此时仍可对外提供服务，这就是分区容忍性。</p>
<p>从商品信息管理中我们知道商品信息读取满足分区容忍性就要实现：</p>
<ul>
<li>主数据库向从数据库同步数据失败不影响读写操作。</li>
<li>其中一个节点挂了不影响另一个节点对外提供服务。</li>
</ul>
<p>如何实现分区容忍性？</p>
<ul>
<li>尽量使用异步取代同步操作，例如使用异步方式将数据从主数据库同步到从数据库，这样节点之间能有效的实现松耦合。</li>
<li>添加从数据库节点，其中一个从节点挂掉其它从节点可以继续提供服务。</li>
</ul>
<p>分布式系统分区容忍性的特点：</p>
<ol>
<li><font style="color:red">分布式系统出现网络分区的时候，仍然能够对外提供服务。</font></li>
</ol>

        <h3 id="CAP组合方式"   >
          <a href="#CAP组合方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAP组合方式" class="headerlink" title="CAP组合方式"></a>CAP组合方式</h3>
      <p><b>在所有分布式系统中不会同时具备CAP三个特性，因为在具备了P的前提下C和A是不能共存的。</b></p>
<p>在发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能2选1。也就是说当网络分区之后P是前提，决定了P之后才有C和A的选择。也就是说分区容忍性是我们必须要实现的基础。（简而言之:CAP理论中分区容忍性P是一定要满足的，在此基础上，只能满足可用性A或者一致性C。）</p>
<p>因此，<b>分布式系统理论上不可能选择CA架构，只能选择CP或者AP架构</b>。比如ZooKeeper、HBase就是CP架构，Cassandra、Eureka就是AP架构，Nacos不仅支持CP架构也支持AP架构。</p>
<p><b>为什么不可能选择CA架构呢？</b>举个例子：若系统出现”分区”，系统中的某个节点进行写操作，为了保证C，那么必须禁止其它节点的读写操作，这就和A发生冲突了。如果为了保证A，其它节点的读写操作正常的话，那就和C发生冲突了。</p>
<p>另外补充一点：如果网络分区正常的话（系统在绝大部分时候所处的状态），也就是说不需要保证P的时候，C和A能够同时保证。</p>
<p><b>总结</b>：</p>
<p>如果系统发生”分区”的情况下，CAP理论只能满足CP或者AP。而在一个分布式系统中分区容忍性P是我们必须要实现的基础，所以在分布式系统中，要么是CP组合，要么是AP组合。通常，在追求强一致性的业务场景下就选择CP组合，如跨行转账，一次转账请求要等待双方银行系统都完成整个事务才算完成。对于多数互联网应用的场景，节点众多，部署分散，而且集群规模越来越大，所以节点故障、网络故障是常态，所以要保证服务的可用性来提高用户体验，因此一般都是选择AP组合，舍弃C强一致性，保证最终一致性。</p>
<p>C - 一致性：所有节点访问同一份最新的数据副本。</p>
<p>A - 可用性：非故障的节点在合理的时间内返回合理的响应（不是错误或者响应超时）。</p>
<p>P - 分区容忍性：分布式系统出现网络分区的时候，仍然能够对外提供服务。</p>
<p>小贴士：</p>
<ol>
<li><b>ZooKeeper保证的是CP</b>。任何时刻对ZooKeeper的读请求都能得到一致性的结果，但是，ZooKeeper不保证每次请求的可用性，比如在Leader选举过程中或者半数以上的机器不可用的时候，服务就是不可用的。</li>
<li><b>Eureka保证的则是AP</b>。Eureka在设计的时候就是优先保证A（可用性）。在Eureka中不存在什么Leader节点，每个节点都是一样的、平等的。因此Eureka不会像ZooKeeper那样出现选举过程中或者半数以上的机器不可用的时候服务就算不可用的情况。Eureka保证即使大部分节点挂掉也不会影响正常提供服务，只要有一个节点是可用的就行了，只不过这个节点上的数据可能并不是最新的。</li>
<li><b>Nacos不仅支持CP也支持AP</b>。</li>
</ol>

        <h3 id="BASE理论"   >
          <a href="#BASE理论" class="heading-link"><i class="fas fa-link"></i></a><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3>
      
        <h4 id="强一致性和最终一致性的理解："   >
          <a href="#强一致性和最终一致性的理解：" class="heading-link"><i class="fas fa-link"></i></a><a href="#强一致性和最终一致性的理解：" class="headerlink" title="强一致性和最终一致性的理解："></a>强一致性和最终一致性的理解：</h4>
      <p>CAP理论告诉我们一个分布式系统最多只能同时满足一致性C、可用性A和分区容忍性P这三项中的两项，其中AP在实际应用中较多，AP既舍弃一致性，保证可用性和分区容忍性，但是最终也要将数据同步成功来保证数据一致性，这种一致性和CAP中的一致性不同，<b>CAP中的一致性要求在任何时间查询任何节点数据都必须一致，它强调的是强一致性，但是最终一致性是允许可以在一段时间内每个节点的数据不一致，但是经过一段时间后每个节点的数据必须一致，它强调的是最终数据的一致性。</b></p>

        <h4 id="Base理论"   >
          <a href="#Base理论" class="heading-link"><i class="fas fa-link"></i></a><a href="#Base理论" class="headerlink" title="Base理论"></a>Base理论</h4>
      <p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。BASE理论是对CAP中AP的一个扩展，通过牺牲强一致性来获得可用性，当出现故障允许部分不可用但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终达到一致状态。满足BASE理论的事务，我们称之为”<b>柔性事务</b>“。(备注：严格遵循ACID事务特性的事务，我们称之为”<b>刚性事务</b>“)</p>
<p>1.基本可用：</p>
<p>分布式系统在出现故障时，允许损失部分可用功能，保证核心功能可用。如，电商网站交易付款出现问题了，商品依然可以正常浏览。</p>
<p>2.软状态：</p>
<p>软状态指允许系统中的数据存在中间状态（CAP理论中的数据不一致），并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。如，订单的”支付中”、”数据同步中”等状态，待数据最终一致后状态改为”成功”状态。</p>
<p>3.最终一致性：</p>
<p>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。如，订单的”支付中”状态，最终会变为”支付成功”或者”支付失败”，使订单状态与实际交易结果达到一致，但需要一定时间的延迟、等待。</p>

        <h3 id="总结"   >
          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>
      <p><b>ACID是数据库事务完整性的理论，CAP是分布式系统设计理论，BASE是CAP理论中AP方案的延伸。</b></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>分布式事务解决方案总结</title>
    <url>/2021/10/23/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[
        <h3 id="分布式事务解决方案对比分析"   >
          <a href="#分布式事务解决方案对比分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#分布式事务解决方案对比分析" class="headerlink" title="分布式事务解决方案对比分析"></a>分布式事务解决方案对比分析</h3>
      <p><b>2PC</b>最大的诟病就是一个阻塞协议。RM在执行分支事务后需要等待TM的决定，此时服务会阻塞并锁定资源。由于其阻塞机制和最差时间复杂度高，因此这种设计不能适应随着事务涉及的服务数量增加而扩展的需要，很难用于并发较高以及子事务生命周期较长的分布式服务中。（而传统的XA方案的问题在Seata中得到了解决，它通过对本地关系型数据库的分支事务的协调来驱动完成全局事务，是工作在应用层的中间件，主要优点是性能好，且不长时间占用连接资源，它以高效并且对业务0侵入的方式解决了微服务场景下面临的分布式事务问题。）</p>
<p><b>TCC</b>,如果拿TCC事务的处理流程与传统2PC两阶段提交方案做比较，2PC通常都是在跨库的DB层面，而TCC则是在应用层的处理，需要通过业务逻辑来实现。这种分布式事务的实现方式的优势在于，可以让<b>应用自己定义数据操作的粒度，使得降低锁冲突，提高吞吐量</b>。而不足之处也很明显，就是在于对应用的侵入性非常强，业务逻辑的每个分支都需要实现try、confirm、cancel三个操作。此外，其实现难度也比较大，需要按照网络状态、系统故障等不同的失败原因实现不同的回滚策略（常见的三种异常如<b>空回滚、幂等、悬挂</b>）。</p>
<span id="more"></span>

<p><b>可靠消息最终一致性</b>事务适合执行周期长且实时性要求不高的场景。引入消息机制后，同步的事务操作变为基于消息执行的异步操作，避免了分布式事务中的同步阻塞操作的影响，并实现了服务与服务之间的解耦。</p>
<p><b>最大努力通知</b>事务是分布式事务中要求最低的一种，适用于一些最终一致性时间敏感度低的业务；允许发起通知方处理业务失败，在接收通知方收到通知后积极进行失败处理，无论发起通知方处理结果如何都不会影响到接收通知方的后续处理；发起通知方需要提供查询执行结果的接口，用于接收通知方校对结果。</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">2PC</th>
<th align="center">TCC</th>
<th align="center">可靠消息最终一致性</th>
<th align="center">最大努力通知</th>
</tr>
</thead>
<tbody><tr>
<td align="center">一致性</td>
<td align="center">强一致性</td>
<td align="center">最终一致</td>
<td align="center">最终一致</td>
<td align="center">最终一致</td>
</tr>
<tr>
<td align="center">吞吐量</td>
<td align="center">低</td>
<td align="center">中</td>
<td align="center">高</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">实现复杂度</td>
<td align="center">易</td>
<td align="center">难</td>
<td align="center">中</td>
<td align="center">易</td>
</tr>
</tbody></table></div>

        <h3 id="其它分布式事务解决方案"   >
          <a href="#其它分布式事务解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#其它分布式事务解决方案" class="headerlink" title="其它分布式事务解决方案"></a>其它分布式事务解决方案</h3>
      
        <h4 id="3PC"   >
          <a href="#3PC" class="heading-link"><i class="fas fa-link"></i></a><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h4>
      <p><b>第一阶段（can commit）</b></p>
<ul>
<li><p>询问是否能够提交</p>
<p>TM向RM询问是否能够提交，RM全部响应”YES”后才进入第二阶段</p>
</li>
</ul>
<p><b>第二阶段（pre commit）</b></p>
<ul>
<li><p>事务的预提交</p>
<p>与2PC的第一阶段类似，进行事务的预提交</p>
</li>
</ul>
<p><b>第三阶段（do commit）</b></p>
<ul>
<li>正常：集体提交</li>
<li>异常：集体回滚</li>
</ul>
<p>定义：TM：事务管理器；RM：资源管理器；</p>
<p>总结：</p>
<ol>
<li>增加了can commit阶段，降低锁定资源的概率和时长（当RM异常的时候，无需像2PC一样一开始就锁定资源，而是确认RM都正常的情况下才执行预提交，锁定资源）</li>
<li>增加超时机制<ul>
<li>TM超时未收到RM的反馈，主动给RM发送中断命令</li>
<li>RM在第三阶段超时未收到TM命令，默认提交</li>
</ul>
</li>
</ol>

        <h4 id="消息队列-事件表"   >
          <a href="#消息队列-事件表" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息队列-事件表" class="headerlink" title="消息队列+事件表"></a>消息队列+事件表</h4>
      <p>当一个请求涉及到多个微服务系统时，可以采取消息队列加事件表的形式进行处理。</p>
<p>以接收第三方支付回调请求，更新支付流水记录、订单状态为例：</p>
<p><b>支付系统</b></p>
<ul>
<li><p>接收第三方请求，处理本地事务</p>
</li>
<li><p>插入支付事件到事件表，状态为”新建”</p>
<p>当前两个动作作为一个事务，当处理失败一起回滚后，返回错误响应给第三方，等待第三方再次调起（支付回调接口有多次重试机制）</p>
</li>
</ul>
<p><b>定时任务</b></p>
<ul>
<li><p>查询事件表，”新建”状态的支付事件</p>
</li>
<li><p>更新事件表状态为”已发送”</p>
</li>
<li><p>发送消息到消息队列</p>
<p>当前三个动作作为一个事务，消息发送失败可以让事务回滚，该”新建”事件等待下一次定时任务周期调用</p>
</li>
</ul>
<p><b>订单系统</b></p>
<ul>
<li><p>消息监听者消费消息</p>
</li>
<li><p>将消息插入事件表，状态为”已接收”，同时要解决幂等问题</p>
<p>当前几个动作作为一个事务，失败回滚，同时响应给MQ，让MQ重试</p>
<p>事件表唯一键冲突时，提交消息，不让MQ重试</p>
</li>
</ul>
<p><b>定时任务</b></p>
<ul>
<li><p>查询”已接收”状态的事件</p>
</li>
<li><p>根据事件处理本地事务</p>
</li>
<li><p>修改事件状态为”已处理”</p>
<p>当前几个动作作为一个事务，失败回滚，该”已接收”状态事件等待下一次定时任务周期调用</p>
</li>
</ul>
<p>业务流程图：</p>
<p><img src="/mdimages/image-20211207164848656.png" alt="image-20211207164848656"></p>
<p>注：该方案不适用数据量特别大的场景，可以在中小型系统中应用。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>分布式事务解决方案之2PC(两阶段提交)</title>
    <url>/2021/09/18/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8B2PC-%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[
        <h3 id="什么是2PC"   >
          <a href="#什么是2PC" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是2PC" class="headerlink" title="什么是2PC"></a>什么是2PC</h3>
      <p>2PC即两阶段提交协议，是将整个事务流程分为两个阶段，准备阶段（Prepare phase）、提交阶段（commit phase），2是指两个阶段，P是指准备阶段，C是指提交阶段。</p>
<p>在计算机中关系型数据库如Oracle、MySql都支持两阶段提交协议，</p>
<ol>
<li>准备阶段（Prepare phase）：事务管理器给每个参与者发送Prepare消息，每个数据库参与者在本地执行事务，并写入本地的Undo/Redo日志，此时事务没有提交。<br>（Undo日志是记录修改前的数据，用于数据库回滚；Redo日志是记录修改后的数据，用于提交事务后写入数据文件）</li>
<li>提交阶段（commit phase）：如果事务管理器收到了参与者的执行失败或者超时消息时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据事务管理器的指令执行提交或者回滚操作，并释放事务处理过程中使用的锁资源。注意：必须在最后阶段释放锁资源。</li>
</ol>
<span id="more"></span>

<p>下图展示2PC的两个阶段，分为成功和失败两种情况说明：</p>
<p>成功：</p>
<p><img src="/mdimages/image-20211109221521353.png" alt="image-20211109221521353"></p>
<p>失败：</p>
<p><img src="/mdimages/image-20211109221605679.png" alt="image-20211109221605679"></p>

        <h3 id="解决方案"   >
          <a href="#解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3>
      
        <h4 id="XA方案"   >
          <a href="#XA方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#XA方案" class="headerlink" title="XA方案"></a>XA方案</h4>
      <p>2PC的传统方案是在数据库层面实现的，如Oracle、MySQL都支持2PC协议，为了统一标准减少行业内不必要的对接成本，需要制定标准化的处理模型及接口标准，国际开放标准组织Open Group定义了分布式事务处理模型<b>DTP</b>（Distributed Transaction Processing Reference Model）。</p>
<p>下面以新用户注册送积分为例来说明XA方案的内容流程：</p>
<p><img src="/mdimages/image-20211109224747626.png" alt="image-20211109224747626"></p>
<p>执行流程如下：</p>
<ol>
<li>应用程序（AP）持有用户库和积分库两个数据源。</li>
<li>应用程序（AP）通过TM通知用户库（RM）新增用户，同时通知积分库（RM）新增积分，RM此时并未提交事务，此时用户和积分资源锁定。</li>
<li>TM收到执行回复，只要有一方失败则分别向其他RM发起回滚事务，回滚完毕，资源锁释放。</li>
<li>TM收到执行回复，全部成功，此时向所有RM发起提交事务，提交完毕，资源锁释放。</li>
</ol>
<p><b>DTP</b>模型定义如下：</p>
<ul>
<li><p><b>AP</b>（Application  Program）：即应用程序，可以理解为使用DTP分布式事务的程序。</p>
</li>
<li><p><b>RM</b>（Resource Manager）：即资源管理器，可以理解为事务的参与者，一般情况下是指一个数据库实例，通过资源管理器对该数据库进行控制，资源管理器控制着分支事务。</p>
</li>
<li><p><b>TM</b>（Transaction Manager）：事务管理器，负责协调和管理事务，事务管理器控制着全局事务，管理事务生命周期，并协调各个RM。<b>全局事务</b>是指分布式事务处理环境中，需要操作多个数据库共同完成一个工作，这个工作即是一个全局事务。</p>
</li>
<li><p>DTP模型定义TM和RM之间通讯的接口规范叫<b>XA</b>，简单理解为数据库提供的2PC接口协议，<b>基于数据库的XA协议来实现2PC又称为XA方案</b>。</p>
</li>
<li><p>以上三个角色之间的交互如下：</p>
<p>1）TM向AP提供应用程序编程接口，AP通过TM提交及回滚事务。</p>
<p>2）TM基于中间件通过XA接口来通知RM数据库事务的开始、结束以及提交、回滚等。</p>
</li>
</ul>
<p>总结：</p>
<p>整个2PC的事务流程涉及到三个角色AP、RM、TM。AP指的是使用2PC分布式事务的应用程序；RM指的是资源管理器，它控制着分支事务；TM指的是事务管理器，它控制着整个全局事务。</p>
<p>1）在<b>准备阶段</b>RM执行实际的业务操作逻辑，但不提交事务，资源锁定；</p>
<p>2）在<b>提交阶段</b>TM会接收RM在准备阶段的执行回复，只要有任何一个RM执行失败，TM就会通知所有RM执行回滚操作，否则，TM将会通知所有RM提交该事务。提交阶段结束资源锁释放。</p>
<p>XA方案的问题：</p>
<ol>
<li>需要本地数据库支持XA协议。</li>
<li>资源锁需要等到两个阶段结束才释放，性能较差。</li>
</ol>

        <h4 id="Seata方案"   >
          <a href="#Seata方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#Seata方案" class="headerlink" title="Seata方案"></a>Seata方案</h4>
      <p>Seata是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata为用户 提供了AT、TCC、SAGA和XA事务模式，为用户打造一站式的分布式解决方案。</p>
<p><span class="exturl"><a class="exturl__link"   href="http://seata.io/zh-cn/docs/dev/mode/at-mode.html" >Seata AT 模式</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="http://seata.io/zh-cn/docs/dev/mode/tcc-mode.html" >Seata Tcc 模式</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="http://seata.io/zh-cn/docs/user/saga.html" >Seata Saga 模式</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="http://seata.io/zh-cn/docs/dev/mode/xa-mode.html" >Seata XA 模式</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>传统XA方案的问题在Seata中得到了解决，它通过对本地关系型数据库的分支事务的协调来驱动完成全局事务，是工作在应用层的中间件。主要优点是性能较好，且不长时间占用连接资源，它以高效并且对业务0侵入的方式解决了微服务场景下面临的分布式事务问题。</p>
<p>Seata把一个分布式事务理解成一个包含了若干<b>分支事务</b>的<b>全局事务</b>。全局事务的职责是协调其下管辖的分支事务达成一致，要么一起成功提交，要么一起失败回滚。通常 分支事务本身就是一个关系型数据库的本地事务，下图是全局事务和分支事务的关系图：</p>
<p><img src="/mdimages/image-20211111165428307.png" alt="image-20211111165428307"></p>
<p>与传统2PC的模型类似，Seata定义了3个组件来协调分布式事务的处理过程：</p>
<p><img src="/mdimages/image-20211111165639371.png" alt="image-20211111165639371"></p>
<p><b>TC</b>（Transaction Coordinator）：事务协调器，它是独立的中间件，需要独立部署运行，它维护全局事务的运行状态，接收TM指令发起全局事务的提交与回滚，负责与RM通信协调各个分支事务的提交或回滚。</p>
<p><b>TM</b>（Transaction Manager）：事务管理器，TM需要嵌入应用程序中工作，它负责开启一个全局事务，并最终向TC发起全局提交或全局回滚的指令。</p>
<p><b>RM</b>（Resource Manager）：资源管理器，控制分支事务，负责分支注册、状态汇报、并接收事务协调器TC的指令，驱动分支（本地）事务的提交和回滚。</p>
<p>我们以<b>新用户注册送积分</b>举例Seata的分布式事务过程：</p>
<p><img src="/mdimages/image-20211111221916085.png" alt="image-20211111221916085"></p>
<p>具体的执行流程如下：</p>
<ol>
<li>用户服务的TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID。</li>
<li>用户服务的RM向TC注册分支事务，该分支事务在用户服务执行新增用户逻辑，并将其纳入XID对应全局事务的管辖。</li>
<li>用户服务执行分支事务，向用户表插入一条记录。</li>
<li>逻辑执行到远程调用积分服务时（XID在微服务调用链路的上下文中传播）。积分服务的RM向TC注册分支事务，该分支事务执行增加积分的逻辑，并将其纳入XID对应全局事务的管辖。</li>
<li>积分服务执行分支事务，向积分记录表插入一条记录，执行完毕后，返回用户服务。</li>
<li>用户服务分支事务执行完毕。</li>
<li>TM向TC发起针对XID的全局提交或回滚决议。</li>
<li>TC调度XID下管辖的全部分支事务完成提交或回滚请求。</li>
</ol>
<p><b>Seata实现2PC与传统2PC的差别</b>：</p>
<p>架构方面，传统2PC方案的RM实际上是在数据库层，RM本质上就是数据库自身，通过XA协议实现的，而Seata的RM是以jar包的形式作为中间件层部署在应用程序的。</p>
<p>两阶段提交方面，传统2PC无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保持到第二阶段完成才释放。而Seata的做法是在第一阶段就将本地事务提交，这样就可以省去第二阶段持锁的时间，整体提高效率。</p>

        <h3 id="Seata实现2PC事务"   >
          <a href="#Seata实现2PC事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#Seata实现2PC事务" class="headerlink" title="Seata实现2PC事务"></a>Seata实现2PC事务</h3>
      
        <h4 id="业务说明"   >
          <a href="#业务说明" class="heading-link"><i class="fas fa-link"></i></a><a href="#业务说明" class="headerlink" title="业务说明"></a>业务说明</h4>
      <p>本案例通过Seata中间件实现分布式事务，模拟两个账户的转账交易过程。</p>
<p>两个账户在两个不同的银行（张三在bank1，李四在bank2），bank1和bank2是两个微服务。业务是张三给李四转账指定金额。</p>
<p>上述交易步骤，要么一起成功，要么一起失败，必须是一个完整性的事务。</p>
<p><img src="/mdimages/image-20211111225910470.png" alt="image-20211111225910470"></p>

        <h4 id="项目搭建准备"   >
          <a href="#项目搭建准备" class="heading-link"><i class="fas fa-link"></i></a><a href="#项目搭建准备" class="headerlink" title="项目搭建准备"></a>项目搭建准备</h4>
      <p>数据库：MySQL-5.7.25，需要创建bank1和bank2两个数据库；</p>
<p>JDK：1.8；</p>
<p>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE；</p>
<p>Seata客户端（RM、TM）：spring-cloud-alibaba-seata-2.1.0.RELEASE；</p>
<p>seata服务端(TC)：seata-server-0.7.1；</p>
<p>bank1sql脚本：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `bank1` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`account_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;户</span></span><br><span class="line"><span class="string">主姓名&#x27;</span>,</span><br><span class="line">`account_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;银行</span></span><br><span class="line"><span class="string">卡号&#x27;</span>,</span><br><span class="line">`account_password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT</span><br><span class="line"><span class="string">&#x27;帐户密码&#x27;</span>,</span><br><span class="line">`account_balance` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;帐户余额&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span></span><br><span class="line"><span class="keyword">Dynamic</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_info` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;张三的账户&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">10000</span>);</span><br></pre></td></tr></table></div></figure>

<p>bank2sql脚本：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `bank2` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`account_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;户</span></span><br><span class="line"><span class="string">主姓名&#x27;</span>,</span><br><span class="line">`account_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;银行</span></span><br><span class="line"><span class="string">卡号&#x27;</span>,</span><br><span class="line">`account_password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT</span><br><span class="line"><span class="string">&#x27;帐户密码&#x27;</span>,</span><br><span class="line">`account_balance` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;帐户余额&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span></span><br><span class="line"><span class="keyword">Dynamic</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_info` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;李四的账户&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="keyword">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></div></figure>

<p>分别在bank1、bank2库中创建<b>undo_log</b>表，此表为seata框架使用：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 注意此处0.7.0+ 增加字段 context</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`xid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`log_created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`log_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`ext` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></div></figure>


        <h4 id="技术架构"   >
          <a href="#技术架构" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h4>
      <p><img src="/mdimages/image-20211111230807234.png" alt="image-20211111230807234"></p>
<p>交互流程：</p>
<ol>
<li>请求bank1进行转账，传入转账金额；</li>
<li>bank1减少转账金额，调用bank2，传入转账金额；</li>
</ol>

        <h4 id="启动TC（事务协调器）"   >
          <a href="#启动TC（事务协调器）" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动TC（事务协调器）" class="headerlink" title="启动TC（事务协调器）"></a>启动TC（事务协调器）</h4>
      <p>（1）下载Seata服务端</p>
<p>下载地址：    <span class="exturl"><a class="exturl__link"   href="https://github.com/seata/seata/releases/download/v0.7.1/seata-server-0.7.1.zip" >https://github.com/seata/seata/releases/download/v0.7.1/seata-server-0.7.1.zip</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> </p>
<p>（2）启动</p>
<p>Seata服务端解压路径/bin/seata-server.bat -p 8888 -m file</p>
<p>备注：其中8888为服务服务端口号；file为启动模式，这里指Seata服务将采用文件的方式存储信息。</p>
<p><img src="/mdimages/image-20211114215416965.png" alt="image-20211114215416965"></p>
<p>如上图出现”Server started…”则表示启动成功。</p>

        <h4 id="代码演示"   >
          <a href="#代码演示" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4>
      <p><b>父工程</b>(seata_2pc_demo)</p>
<p>pom.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata_2pc_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>seata_2pc_demo_bank1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>seata_2pc_demo_bank2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>discover-server-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.spring.boot.starter.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.spring.boot.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.spring.boot.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--工程名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>seata_2pc_demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p><b>注册中心</b>(discover-server-demo)：</p>
<p>pom.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata_2pc_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>discover-server-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>代码</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoverServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DiscoverServer.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.yml</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">seata-discovery-demo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">56080</span> <span class="comment">#启动端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span>    <span class="comment">#关闭服务器自我保护，客户端心跳检测15分钟内错误达到80%服务会保护，导致别人还认为是好用的服务</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">10000</span> <span class="comment">#清理间隔（单位毫秒，默认是60*1000）5秒将客户端剔除的服务在服务注册列表中剔除# </span></span><br><span class="line">    <span class="attr">shouldUseReadOnlyResponseCache:</span> <span class="literal">true</span> <span class="comment">#eureka是CAP理论种基于AP策略，为了保证强一致性关闭此切换CP 默认不关闭 false关闭</span></span><br><span class="line">    <span class="attr">response-cache-update-interval-ms:</span> <span class="number">3000</span>  <span class="comment">#eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上 #eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上默认30s</span></span><br><span class="line">    <span class="attr">response-cache-auto-expiration-in-seconds:</span> <span class="number">180</span>   <span class="comment">#eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。</span></span><br><span class="line">  <span class="attr">client:</span> </span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment">#false:不作为一个客户端注册到注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>      <span class="comment">#为true时，可以启动，但报异常：Cannot execute request on any known server</span></span><br><span class="line">    <span class="attr">instance-info-replication-interval-seconds:</span> <span class="number">10</span> </span><br><span class="line">    <span class="attr">serviceUrl:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span>    <span class="comment">#续约更新时间间隔（默认30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 续约到期时间（默认90秒）</span></span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line"><span class="attr">logging:</span> </span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:log4j2-dev.xml</span></span><br></pre></td></tr></table></div></figure>

<p>log4j2-dev.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;180&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prjname&quot;</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logdir&quot;</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PATTERN&quot;</span>&gt;</span> %date&#123;YYYY-MM-dd HH:mm:ss,SSS&#125; %level [%thread][%file:%line] - %msg%n%throwable<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;ErrorAppender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;logdir&#125;/$&#123;prjname&#125;_error.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;logdir&#125;/$$&#123;date:yyyy-MM-dd&#125;/$&#123;prjname&#125;_error.%d&#123;yyyy-MM-dd-HH&#125;.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;DebugAppender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;logdir&#125;/$&#123;prjname&#125;_info.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;logdir&#125;/$$&#123;date:yyyy-MM-dd&#125;/$&#123;prjname&#125;_info.%d&#123;yyyy-MM-dd-HH&#125;.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--异步appender--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">Async</span> <span class="attr">name</span>=<span class="string">&quot;AsyncAppender&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;ErrorAppender&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;DebugAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Async</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;springfox&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.http&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.netflix.discovery&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;AsyncAppender&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p><b>Bank1模块</b>(seata_2pc_demo_bank1)</p>
<p>pom.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata_2pc_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata_2pc_demo_bank1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-javanica<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>代码</p>
<p>主启动</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.pc.demo.spring&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank1Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Bank1Server.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>实体类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="keyword">private</span> String accountPassword;</span><br><span class="line">    <span class="keyword">private</span> Double accountBalance;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>dao</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update account_info set account_balance = account_balance + #&#123;amount&#125; where account_no = #&#123;accountNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateAccountBalance</span><span class="params">(<span class="meta">@Param(&quot;accountNo&quot;)</span> String accountNo, <span class="meta">@Param(&quot;amount&quot;)</span> Double amount)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>service</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 张三扣减金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(String accountNo, Double amount)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pc.demo.dao.AccountInfoDao;</span><br><span class="line"><span class="keyword">import</span> com.pc.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> com.pc.demo.spring.Bank2Client;</span><br><span class="line"><span class="keyword">import</span> io.seata.core.context.RootContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountInfoDao accountInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Bank2Client bank2Client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span><span class="comment">//开启全局事务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(String accountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印全局事务ID</span></span><br><span class="line">        log.info(<span class="string">&quot;bank1 service XID：&#123;&#125;&quot;</span>, RootContext.getXID());</span><br><span class="line">        <span class="comment">//扣减张三的金额</span></span><br><span class="line">        accountInfoDao.updateAccountBalance(accountNo,amount * -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//调用李四微服务，转账</span></span><br><span class="line">        String transfer = bank2Client.transfer(amount);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;fallback&quot;</span>.equals(transfer))&#123;</span><br><span class="line">            <span class="comment">//调用李四微服务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;调用李四微服务异常...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(amount == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//人为制造异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;bank1 exception...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p><b>将@GlobalTransactional注解标注在全局事务发起的Service实现方法上，开启全局事务：</b></p>
<p>GlobalTransactionalInterceptor会拦截@GlobalTransactional注解标注的方法，生成全局事务ID(XID)，XID会在整个分布式事务中传递。</p>
<p>在远程调用时，spring-clound-alibaba-seata会拦截Feign调用将XID传递到下游服务。</p>
<p>配置类</p>
<p>创建代理数据源</p>
<p>Seata的RM通过DataSourceProxy才能在业务代码的事务提交时，通过这个切入点，与TC进行通信交互、记录undo_log等。</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseConfiguration</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.ds0&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">ds0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DruidDataSource ds0)</span> </span>&#123;</span><br><span class="line">        DataSourceProxy dataSourceProxy = <span class="keyword">new</span> DataSourceProxy(ds0);</span><br><span class="line">        <span class="keyword">return</span> dataSourceProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>远程调用（Feign）</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;seata-2pc-demo-bank2&quot;,fallback = Bank2ClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bank2Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 远程调用李四的微服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/bank2/transfer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transfer</span><span class="params">(<span class="meta">@RequestParam(&quot;amount&quot;)</span> Double amount)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank2ClientFallback</span> <span class="keyword">implements</span> <span class="title">Bank2Client</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transfer</span><span class="params">(Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fallback&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>controller</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pc.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank1Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountInfoService accountInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 张三转账</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/transfer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transfer</span><span class="params">(Double amount)</span></span>&#123;</span><br><span class="line">        accountInfoService.updateAccountBalance(<span class="string">&quot;1&quot;</span>,amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bank1 &quot;</span>+amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.yml</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-2pc-demo-bank1</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/bank1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">preferIpAddress:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span>    <span class="comment"># 续约更新时间间隔（默认30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 续约到期时间（默认90秒）</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 抓取服务列表</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">refresh,health,info,env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 配置请求GZIP压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> [<span class="string">&quot;text/xml&quot;</span>,<span class="string">&quot;application/xml&quot;</span>,<span class="string">&quot;application/json&quot;</span>] <span class="comment"># 配置压缩支持的MIME TYPE</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 配置压缩数据大小的下限</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 配置响应GZIP压缩</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">1000</span>  <span class="comment"># 设置熔断超时时间  default 1000</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 打开超时熔断功能 default true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">600</span> <span class="comment"># 设置连接超时时间 default 2000</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">6000</span>    <span class="comment"># 设置读取超时时间  default 5000</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 对所有操作请求都进行重试  default false</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span>    <span class="comment"># 切换实例的重试次数  default 1</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span>     <span class="comment"># 对当前实例的重试次数 default 0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>application-local.yml</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">10081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:56080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">##################### DB #####################</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">ds0:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/bank1?useUnicode=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="string">user()</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  cloud:</span></span><br><span class="line"><span class="comment">#   alibaba:</span></span><br><span class="line"><span class="comment">#      seata:</span></span><br><span class="line"><span class="comment">#        tx-service-group: seata-demo-bank1-fescar-service-group</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">org:</span></span><br><span class="line">      <span class="attr">springframework:</span></span><br><span class="line">        <span class="attr">cloud:</span></span><br><span class="line">          <span class="attr">alibaba:</span></span><br><span class="line">            <span class="attr">seata:</span></span><br><span class="line">              <span class="attr">web:</span> <span class="string">DEBUG</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>file.conf</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">transport</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # tcp udt unix-domain-socket</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;TCP&quot;</span></span><br><span class="line"><span class="comment">  #NIO NATIVE</span></span><br><span class="line">  <span class="attr">server</span> = <span class="string">&quot;NIO&quot;</span></span><br><span class="line"><span class="comment">  #enable heartbeat</span></span><br><span class="line">  <span class="attr">heartbeat</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">  #thread factory for netty</span></span><br><span class="line">  <span class="meta">thread-factory</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">boss-thread-prefix</span> = <span class="string">&quot;NettyBoss&quot;</span></span><br><span class="line">    <span class="meta">worker-thread-prefix</span> = <span class="string">&quot;NettyServerNIOWorker&quot;</span></span><br><span class="line">    <span class="meta">server-executor-thread-prefix</span> = <span class="string">&quot;NettyServerBizHandler&quot;</span></span><br><span class="line">    <span class="meta">share-boss-worker</span> = <span class="string">false</span></span><br><span class="line">    <span class="meta">client-selector-thread-prefix</span> = <span class="string">&quot;NettyClientSelector&quot;</span></span><br><span class="line">    <span class="meta">client-selector-thread-size</span> = <span class="string">1</span></span><br><span class="line">    <span class="meta">client-worker-thread-prefix</span> = <span class="string">&quot;NettyClientWorkerThread&quot;</span></span><br><span class="line"><span class="comment">    # netty boss thread size,will not be used for UDT</span></span><br><span class="line">    <span class="meta">boss-thread-size</span> = <span class="string">1</span></span><br><span class="line"><span class="comment">    #auto default pin or 8</span></span><br><span class="line">    <span class="meta">worker-thread-size</span> = <span class="string">8</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment">## transaction log store</span></span><br><span class="line"><span class="attr">store</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  ## store mode: file、db</span></span><br><span class="line">  <span class="attr">mode</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ## file store</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">dir</span> = <span class="string">&quot;sessionStore&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class="line">    <span class="meta">max-branch-session-size</span> = <span class="string">16384</span></span><br><span class="line"><span class="comment">    # globe session size , if exceeded throws exceptions</span></span><br><span class="line">    <span class="meta">max-global-session-size</span> = <span class="string">512</span></span><br><span class="line"><span class="comment">    # file buffer size , if exceeded allocate new buffer</span></span><br><span class="line">    <span class="meta">file-write-buffer-cache-size</span> = <span class="string">16384</span></span><br><span class="line"><span class="comment">    # when recover batch read size</span></span><br><span class="line">    <span class="meta">session.reload.read_size</span> = <span class="string">100</span></span><br><span class="line"><span class="comment">    # async, sync</span></span><br><span class="line">    <span class="meta">flush-disk-mode</span> = <span class="string">async</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ## database store</span></span><br><span class="line"><span class="meta">//</span>  <span class="string">db &#123;</span></span><br><span class="line"><span class="meta">//</span>    <span class="string">driver_class = &quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line"><span class="meta">//</span>    <span class="string">url = &quot;jdbc:mysql://127.0.0.1:3306/bank?useUnicode=true&quot;</span></span><br><span class="line"><span class="meta">//</span>    <span class="string">user = &quot;root&quot;</span></span><br><span class="line"><span class="meta">//</span>    <span class="string">password = &quot;root&quot;</span></span><br><span class="line"><span class="meta">//</span>  <span class="string">&#125;</span></span><br><span class="line">  <span class="attr">db</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span></span><br><span class="line">    <span class="attr">datasource</span> = <span class="string">&quot;dbcp&quot;</span></span><br><span class="line"><span class="comment">    ## mysql/oracle/h2/oceanbase etc.</span></span><br><span class="line">    <span class="meta">db-type</span> = <span class="string">&quot;mysql&quot;</span></span><br><span class="line">    <span class="attr">url</span> = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span></span><br><span class="line">    <span class="attr">user</span> = <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="meta">min-conn</span> = <span class="string">1</span></span><br><span class="line">    <span class="meta">max-conn</span> = <span class="string">3</span></span><br><span class="line">    <span class="meta">global.table</span> = <span class="string">&quot;global_table&quot;</span></span><br><span class="line">    <span class="meta">branch.table</span> = <span class="string">&quot;branch_table&quot;</span></span><br><span class="line">    <span class="meta">lock-table</span> = <span class="string">&quot;lock_table&quot;</span></span><br><span class="line">    <span class="meta">query-limit</span> = <span class="string">100</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  #vgroup-&gt;rgroup</span></span><br><span class="line">  <span class="meta">vgroup_mapping.seata-2pc-demo-bank1-fescar-service-group</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line"><span class="comment">  #only support single node</span></span><br><span class="line">  <span class="meta">default.grouplist</span> = <span class="string">&quot;127.0.0.1:8888&quot;</span></span><br><span class="line"><span class="comment">  #degrade current not support</span></span><br><span class="line">  <span class="attr">enableDegrade</span> = <span class="string">false</span></span><br><span class="line"><span class="comment">  #disable</span></span><br><span class="line">  <span class="attr">disable</span> = <span class="string">false</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">client</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="meta">async.commit.buffer.limit</span> = <span class="string">10000</span></span><br><span class="line">  <span class="attr">lock</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">retry.internal</span> = <span class="string">10</span></span><br><span class="line">    <span class="meta">retry.times</span> = <span class="string">30</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></div></figure>

<p>registry.conf</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">registry</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;public&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">eureka</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serviceUrl</span> = <span class="string">&quot;http://localhost:1001/eureka&quot;</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">weight</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">redis</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost:6379&quot;</span></span><br><span class="line">    <span class="attr">db</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">zk</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    <span class="meta">session.timeout</span> = <span class="string">6000</span></span><br><span class="line">    <span class="meta">connect.timeout</span> = <span class="string">2000</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">consul</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8500&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">etcd3</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;http://localhost:2379&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">sofa</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:9603&quot;</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">region</span> = <span class="string">&quot;DEFAULT_ZONE&quot;</span></span><br><span class="line">    <span class="attr">datacenter</span> = <span class="string">&quot;DefaultDataCenter&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    <span class="attr">addressWaitTime</span> = <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">config</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # file、nacos 、apollo、zk</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;public&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">apollo</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">app.id</span> = <span class="string">&quot;seata-server&quot;</span></span><br><span class="line">    <span class="meta">apollo.meta</span> = <span class="string">&quot;http://192.168.1.204:8801&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">zk</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    <span class="meta">session.timeout</span> = <span class="string">6000</span></span><br><span class="line">    <span class="meta">connect.timeout</span> = <span class="string">2000</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></div></figure>

<p>要点注意：</p>
<p>在src/main/resource中，新增的registry.conf、file.conf文件，内容可以拷贝seata-server-0.7.1的配置文件。</p>
<p>在registry.conf中registry.type使用file:</p>
<p><img src="/mdimages/image-20211117164524809.png" alt="image-20211117164524809"></p>
<p>在file.conf中修改service.vgroup_mapping.[springcloud服务名]-fescar-service-group = “default”，并修改service.default.grouplist = [seata服务地址]</p>
<p><img src="/mdimages/image-20211117165028482.png" alt="image-20211117165028482"></p>
<p>关于vgroup_mapping的配置：</p>
<p>vgroup_mapping.事务分组服务名 = Seata Server集群名称（默认名称为default）</p>
<p>default.grouplist = Seata Server集群地址</p>
<p>在 org.springframework.cloud:spring-cloud-starter-alibaba-seata 的 org.springframework.cloud.alibaba.seata.GlobalTransactionAutoConfiguration 类中，默认会使用 ${spring.application.name}-fescar-service-group 作为事务分组服务名注册到 Seata Server上，如果和 file.conf 中的配置不一致，会提示 no available server to connect 错误 也可以通过配置 spring.cloud.alibaba.seata.tx-service-group 修改后缀，但是必须和 file.conf 中的配置保持 一致。</p>
<p><b>Bank2模块</b>(seata_2pc_demo_bank2)</p>
<p>配置类、实体类、dao与Bank1一样；</p>
<p>service</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 李四增加金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(String accountNo, Double amount)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pc.demo.dao.AccountInfoDao;</span><br><span class="line"><span class="keyword">import</span> com.pc.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> io.seata.core.context.RootContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountInfoDao accountInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(String accountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;bank2 service XID：&#123;&#125;&quot;</span>, RootContext.getXID());</span><br><span class="line">        <span class="comment">//李四增加金额</span></span><br><span class="line">        accountInfoDao.updateAccountBalance(accountNo,amount);</span><br><span class="line">        <span class="comment">//人为制造异常</span></span><br><span class="line">        <span class="keyword">if</span>(amount == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;bank2 make exception...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>controller</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pc.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank2Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountInfoService accountInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收张三的转账</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/transfer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transfer</span><span class="params">(Double amount)</span></span>&#123;</span><br><span class="line">        <span class="comment">//李四增加金额</span></span><br><span class="line">        accountInfoService.updateAccountBalance(<span class="string">&quot;2&quot;</span>,amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bank2 &quot;</span>+amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>主启动</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pc.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank2Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Bank2Server.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.yml</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-2pc-demo-bank2</span></span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/bank2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">preferIpAddress:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span>    <span class="comment"># 续约更新时间间隔（默认30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 续约到期时间（默认90秒）</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span> <span class="comment"># 抓取服务列表</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">refresh,health,info,env</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 配置请求GZIP压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> [<span class="string">&quot;text/xml&quot;</span>,<span class="string">&quot;application/xml&quot;</span>,<span class="string">&quot;application/json&quot;</span>] <span class="comment"># 配置压缩支持的MIME TYPE</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 配置压缩数据大小的下限</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 配置响应GZIP压缩</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">1000</span>  <span class="comment"># 设置熔断超时时间  default 1000</span></span><br><span class="line">        <span class="attr">timeout:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 打开超时熔断功能 default true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">600</span> <span class="comment"># 设置连接超时时间 default 2000</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">6000</span>    <span class="comment"># 设置读取超时时间  default 5000</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment"># 对所有操作请求都进行重试  default false</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span>    <span class="comment"># 切换实例的重试次数  default 1</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span>     <span class="comment"># 对当前实例的重试次数 default 0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>application-local.yml</p>
<figure class="highlight yml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">10082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:56080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">##################### DB #####################</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">ds0:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/bank2?useUnicode=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="string">user()</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  cloud:</span></span><br><span class="line"><span class="comment">#   alibaba:</span></span><br><span class="line"><span class="comment">#      seata:</span></span><br><span class="line"><span class="comment">#        tx-service-group: seata-demo-bank1-fescar-service-group</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">org:</span></span><br><span class="line">      <span class="attr">springframework:</span></span><br><span class="line">        <span class="attr">cloud:</span></span><br><span class="line">          <span class="attr">alibaba:</span></span><br><span class="line">            <span class="attr">seata:</span></span><br><span class="line">              <span class="attr">web:</span> <span class="string">DEBUG</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>file.conf</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">transport</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # tcp udt unix-domain-socket</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;TCP&quot;</span></span><br><span class="line"><span class="comment">  #NIO NATIVE</span></span><br><span class="line">  <span class="attr">server</span> = <span class="string">&quot;NIO&quot;</span></span><br><span class="line"><span class="comment">  #enable heartbeat</span></span><br><span class="line">  <span class="attr">heartbeat</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">  #thread factory for netty</span></span><br><span class="line">  <span class="meta">thread-factory</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">boss-thread-prefix</span> = <span class="string">&quot;NettyBoss&quot;</span></span><br><span class="line">    <span class="meta">worker-thread-prefix</span> = <span class="string">&quot;NettyServerNIOWorker&quot;</span></span><br><span class="line">    <span class="meta">server-executor-thread-prefix</span> = <span class="string">&quot;NettyServerBizHandler&quot;</span></span><br><span class="line">    <span class="meta">share-boss-worker</span> = <span class="string">false</span></span><br><span class="line">    <span class="meta">client-selector-thread-prefix</span> = <span class="string">&quot;NettyClientSelector&quot;</span></span><br><span class="line">    <span class="meta">client-selector-thread-size</span> = <span class="string">1</span></span><br><span class="line">    <span class="meta">client-worker-thread-prefix</span> = <span class="string">&quot;NettyClientWorkerThread&quot;</span></span><br><span class="line"><span class="comment">    # netty boss thread size,will not be used for UDT</span></span><br><span class="line">    <span class="meta">boss-thread-size</span> = <span class="string">1</span></span><br><span class="line"><span class="comment">    #auto default pin or 8</span></span><br><span class="line">    <span class="meta">worker-thread-size</span> = <span class="string">8</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="comment">## transaction log store</span></span><br><span class="line"><span class="attr">store</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  ## store mode: file、db</span></span><br><span class="line">  <span class="attr">mode</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ## file store</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">dir</span> = <span class="string">&quot;sessionStore&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class="line">    <span class="meta">max-branch-session-size</span> = <span class="string">16384</span></span><br><span class="line"><span class="comment">    # globe session size , if exceeded throws exceptions</span></span><br><span class="line">    <span class="meta">max-global-session-size</span> = <span class="string">512</span></span><br><span class="line"><span class="comment">    # file buffer size , if exceeded allocate new buffer</span></span><br><span class="line">    <span class="meta">file-write-buffer-cache-size</span> = <span class="string">16384</span></span><br><span class="line"><span class="comment">    # when recover batch read size</span></span><br><span class="line">    <span class="meta">session.reload.read_size</span> = <span class="string">100</span></span><br><span class="line"><span class="comment">    # async, sync</span></span><br><span class="line">    <span class="meta">flush-disk-mode</span> = <span class="string">async</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ## database store</span></span><br><span class="line">  <span class="attr">db</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span></span><br><span class="line">    <span class="attr">datasource</span> = <span class="string">&quot;dbcp&quot;</span></span><br><span class="line"><span class="comment">    ## mysql/oracle/h2/oceanbase etc.</span></span><br><span class="line">    <span class="meta">db-type</span> = <span class="string">&quot;mysql&quot;</span></span><br><span class="line">    <span class="attr">url</span> = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span></span><br><span class="line">    <span class="attr">user</span> = <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;mysql&quot;</span></span><br><span class="line">    <span class="meta">min-conn</span> = <span class="string">1</span></span><br><span class="line">    <span class="meta">max-conn</span> = <span class="string">3</span></span><br><span class="line">    <span class="meta">global.table</span> = <span class="string">&quot;global_table&quot;</span></span><br><span class="line">    <span class="meta">branch.table</span> = <span class="string">&quot;branch_table&quot;</span></span><br><span class="line">    <span class="meta">lock-table</span> = <span class="string">&quot;lock_table&quot;</span></span><br><span class="line">    <span class="meta">query-limit</span> = <span class="string">100</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  #vgroup-&gt;rgroup</span></span><br><span class="line">  <span class="meta">vgroup_mapping.seata-2pc-demo-bank2-fescar-service-group</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line"><span class="comment">  #only support single node</span></span><br><span class="line">  <span class="meta">default.grouplist</span> = <span class="string">&quot;127.0.0.1:8888&quot;</span></span><br><span class="line"><span class="comment">  #degrade current not support</span></span><br><span class="line">  <span class="attr">enableDegrade</span> = <span class="string">false</span></span><br><span class="line"><span class="comment">  #disable</span></span><br><span class="line">  <span class="attr">disable</span> = <span class="string">false</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">client</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="meta">async.commit.buffer.limit</span> = <span class="string">10000</span></span><br><span class="line">  <span class="attr">lock</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">retry.internal</span> = <span class="string">10</span></span><br><span class="line">    <span class="meta">retry.times</span> = <span class="string">30</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></div></figure>

<p>registry.conf</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">registry</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;public&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">eureka</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serviceUrl</span> = <span class="string">&quot;http://localhost:1001/eureka&quot;</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">weight</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">redis</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost:6379&quot;</span></span><br><span class="line">    <span class="attr">db</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">zk</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    <span class="meta">session.timeout</span> = <span class="string">6000</span></span><br><span class="line">    <span class="meta">connect.timeout</span> = <span class="string">2000</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">consul</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8500&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">etcd3</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;http://localhost:2379&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">sofa</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:9603&quot;</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">region</span> = <span class="string">&quot;DEFAULT_ZONE&quot;</span></span><br><span class="line">    <span class="attr">datacenter</span> = <span class="string">&quot;DefaultDataCenter&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    <span class="attr">addressWaitTime</span> = <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">config</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # file、nacos 、apollo、zk</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;public&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">apollo</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">app.id</span> = <span class="string">&quot;seata-server&quot;</span></span><br><span class="line">    <span class="meta">apollo.meta</span> = <span class="string">&quot;http://192.168.1.204:8801&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">zk</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    <span class="meta">session.timeout</span> = <span class="string">6000</span></span><br><span class="line">    <span class="meta">connect.timeout</span> = <span class="string">2000</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="Seata执行流程"   >
          <a href="#Seata执行流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Seata执行流程" class="headerlink" title="Seata执行流程"></a>Seata执行流程</h4>
      <p>1、正常提交流程</p>
<p><img src="/mdimages/image-20211117223902359.png" alt="image-20211117223902359"></p>
<p>2、回滚流程</p>
<p><img src="/mdimages/image-20211117224139143.png" alt="image-20211117224139143"></p>
<p>要点说明：</p>
<p>1、每个RM使用DataSourceProxy连接数据库，其目的是使用ConnectionProxy，使用数据源和数据连接代理的目的就是在第一阶段将undo_log和业务数据放在一个本地事务提交，这样就保证了只要有业务操作就一定有undo_log。</p>
<p>2、在第一阶段undo_log中存放了数据修改前和修改后的值，为事务回滚作好准备，所以第一阶段完成就已经将分支事务提交，也就释放了锁资源。</p>
<p>3、TM开启全局事务开始，将XID全局事务ID放在事务上下文中，通过Feign调用也将XID传入下游分支事务，每个分支事务将自己的Branch ID分支事务ID与XID关联。</p>
<p>4、第二阶段全局事务提交，TC会通知各个分支参与者提交分支事务，<font style="color:red">在第一阶段就已经提交了分支事务，这里各个参与者只需要删除undo_log即可</font>，并且可以异步执行，第二阶段很快可以完成。</p>
<p>5、第二阶段全局事务回滚，TC会通知各个分支参与者回滚分支事务，通过XID和Branch ID找到相应的回滚日志，通过回滚日志生成反向的SQL并执行，以完成分支事务回滚到之前的状态，如果回滚失败则会重试回滚操作。</p>

        <h4 id="测试场景"   >
          <a href="#测试场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h4>
      <ul>
<li>张三向李四转账成功</li>
<li>张三事务失败，李四事务回滚成功</li>
<li>李四事务失败，张三事务回滚成功</li>
<li>分支事务超时测试</li>
</ul>

        <h4 id="小结"   >
          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结" class="headerlink" title="小结"></a>小结</h4>
      <p>本章节讲解了传统2PC（基于数据库XA协议）和Seata实现2PC的两种方案，由于Seata的0侵入性并且解决了传统2PC长期锁资源的问题，所以推荐采用Seata实现2PC。</p>
<p>Seata实现2PC要点：</p>
<ol>
<li>全局事务开始使用@GlobalTransactional注解标注。</li>
<li>每个本地事务方案仍然使用@Transactional注解标注。</li>
<li>每个数据库都需要创建undo_log表，此表是Seata保证本地事务一致性的关键。</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>分布式事务解决方案之可靠消息最终一致性</title>
    <url>/2021/10/09/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8B%E5%8F%AF%E9%9D%A0%E6%B6%88%E6%81%AF%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    <content><![CDATA[
        <h3 id="什么是可靠消息最终一致性事务"   >
          <a href="#什么是可靠消息最终一致性事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是可靠消息最终一致性事务" class="headerlink" title="什么是可靠消息最终一致性事务"></a>什么是可靠消息最终一致性事务</h3>
      <p>可靠消息最终一致性方案是指当事务发起方执行完成本地事务后并发出一条消息，事务参与方（消息消费者）一定能够接收消息并处理事务成功，强调的是只要消息发给事务参与方最终事务要达到一致。</p>
<p>此方案需要利用消息中间件来完成，如下图所示：</p>
<p><img src="/mdimages/image-20211129140530246.png" alt="image-20211129140530246"></p>
<p>事务发起方（消息生产者）将消息发给消息中间件，事务参与方（消息消费者）从消息中间件接收消息，事务发起方（消息生产者）和消息中间件之间、事务参与方（消息消费者）和消息中间件之间都是通过<b>网络通信</b>，由于网络通信的不确定性会导致分布式事务问题。</p>
<p>因此可靠消息最终一致性方案要解决以下几个问题：</p>
<span id="more"></span>

<p><b>1.本地事务与消息发送的原子性问题</b></p>
<p>本地事务与消息发送的原子性问题即：事务发起方在本地事务执行成功后消息必须发出去，否则就丢失消息。即实现本地事务和消息发送的原子性，要么都成功，要么都失败。本地事务与消息发送的原子性问题是实现可靠消息最终一致性方案的关键问题。</p>
<p><b>2.事务参与方接收消息的可靠性问题</b></p>
<p>事务参与方必须能够从消息队列接收到消息，如果接收消息失败可以重复接收消息。</p>
<p><b>3.消息重复消费的问题</b></p>
<p>由于网络的不确定性，若某一个消费节点超时但是消费成功，此时消息中间件会重复投递此消息，就会导致了消息的重复消费。</p>
<p>要解决消息重复消费的问题就要实现事务参与方的方法幂等性。</p>

        <h3 id="解决方案"   >
          <a href="#解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3>
      
        <h4 id="1-本地消息表方案"   >
          <a href="#1-本地消息表方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-本地消息表方案" class="headerlink" title="1.本地消息表方案"></a>1.本地消息表方案</h4>
      <p>本地消息表方案最初是eBay提出的，此方案的核心是通过本地事务保证数据业务操作和消息的一致性，然后通过定时任务将消息发送至消息中间件，待确认消息发给消费方成功再将消息删除。</p>
<p>下面以注册送积分为例来说明：</p>
<p>两个微服务交互，用户服务和积分服务，用户服务负责添加用户，积分服务负责添加积分。</p>
<p><img src="/mdimages/image-20211129143957343.png" alt="image-20211129143957343"></p>
<p>交互流程：</p>
<p><b>1、用户注册</b></p>
<p>用户服务在本地事务新增用户和增加”积分消息日志”。（用户表和消息表通过本地事务保证一致）</p>
<p>这种情况下，新增用户操作与存储积分信息日志处于同一个事务中，具备原子性。</p>
<p><b>2、定时任务扫描日志</b></p>
<p>经过第一步消息已经写到消息日志表中，可以启动独立的线程，定时对消息日志表中的消息进行扫描并发送至消息中间件，在消息中间件反馈发送成功后删除该消息日志，否则等待定时任务下一周期重试。（保证将消息发送给消息队列）</p>
<p><b>3.消费消息</b></p>
<p>这里可以使用MQ（消息中间件）的ack（消息确认）机制，消费者监听MQ，如果消费者接收到消息并且业务处理完成后向MQ发送ack（消息确认），此时说明消费者正常消费消息完成，MQ将不再向消费者推送该消息，否则MQ会不断重试向消费者发送该消息。（保证消费者一定能够消费到消息）</p>
<p>积分服务接收到”增加积分”消息，开始增加积分，积分增加成功后向消息中间件回应ack，否则消息中间件将重复投递该消息。由于消息会重复投递，积分服务的”增加积分”功能需要实现幂等性。</p>

        <h4 id="2-RocketMQ事务消息方案"   >
          <a href="#2-RocketMQ事务消息方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-RocketMQ事务消息方案" class="headerlink" title="2.RocketMQ事务消息方案"></a>2.RocketMQ事务消息方案</h4>
      <p>RocketMQ是一个来自阿里巴巴的分布式消息中间件，RocketMQ 4.3之后的版本正式支持事务消息。</p>
<p>RocketMQ事务消息设计主要是为了解决Producer端的消息发送与本地事务执行的原子性问题，RocketMQ设计中broker与producer端的双向通信能力，使得broker天生可以作为一个事务协调者存在；而RocketMQ本身提供的存储机制为事务消息提供了持久化能力；RocketMQ的高可用机制以及可靠消息设计则为事务消息在系统发生异常时依然会能够保证达成事务的最终一致性。</p>
<p>在RocketMQ4.3后实现了完整的事务消息，实际上其实是对本地消息表的一个封装，将本地消息表移动到了MQ内部，解决Producer端消息发送与本地事务执行的原子性问题。</p>
<p><img src="/mdimages/image-20211129153402562.png" alt="image-20211129153402562"></p>
<p>执行流程：</p>
<p>以注册送积分为例子描述整个流程。</p>
<p>Producer：在例子中用户服务就是消息发送方（消息生产者），负责新增用户。在本例中积分服务就说消息消费方，负责新增积分。</p>
<ol>
<li><p>Producer发送事务消息</p>
<p>Producer（消息发送方）发送事务消息至MQ Server，MQ Server将消息状态标记为Prepared(预备状态)，注意此时这条消息消费者（消息消费方）是无法消费到的。</p>
<p>本例中，Producer发送”增加积分消息”到MQ Server。</p>
</li>
<li><p>MQ Server回应消息发送成功与否</p>
<p>MQ Server接收到Producer发送的消息则回应发送成功表示MQ已经接收到消息。</p>
</li>
<li><p>Producer执行本地事务</p>
<p>Producer端执行业务代码逻辑，通过本地数据库事务控制。</p>
<p>本例中，Producer执行添加用户操作。</p>
</li>
<li><p>消息投递</p>
<p>若Producer本地事务执行成功则自动向MQ Server发送commit消息，MQ Server接收到commit消息后将”增加积分消息”状态标记为可消费，此时消息消费方（积分服务）即正常消费消息；</p>
<p>若Producer本地事务执行失败则自动向MQ Server发送rollback消息，MQ Server接收到rollback消息后将删除”增加积分消息”。</p>
<p>消息消费方（积分服务）消费消息，消费成功则向MQ Server回应ack，否则将重复接收消息。<b>这里ack默认是自动回应，即程序执行正常则自动回应ack</b>。</p>
</li>
<li><p>事务回查</p>
<p>如果执行Producer端本地事务过程中，producer端挂掉了，或者超时了，MQ Server将会不停的询问同组的其他Producer来获取事务执行状态，这个过程叫<b>事务回查</b>。MQ Server会根据事务回查结果来决定是否投递消息。</p>
<p>以上主干流程已由RocketMQ实现，对于用户侧而言，用户需要分别实现 本地事务执行 以及 本地事务回查 方法，因此只需关注本地事务的执行状态即可。</p>
<p>RocketMQ提供<b>RocketMQLocalTransactionListener</b>接口：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RocketMQLocalTransactionListener</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">‐ 发送prepare消息成功此方法被回调，该方法用于执行本地事务</span></span><br><span class="line"><span class="comment">‐ <span class="doctag">@param</span> msg 回传的消息，利用transactionId即可获取到该消息的唯一Id</span></span><br><span class="line"><span class="comment">‐ <span class="doctag">@param</span> arg 调用send方法时传递的参数，当send的时候若有额外的参数可以传递到send方法中，这里能获取到</span></span><br><span class="line"><span class="comment">‐ <span class="doctag">@return</span> 返回事务状态，COMMIT：提交 ROLLBACK：回滚 UNKNOW：回调</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">RocketMQLocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">‐ <span class="doctag">@param</span> msg 通过获取transactionId来判断这条消息的本地事务执行状态</span></span><br><span class="line"><span class="comment">‐ <span class="doctag">@return</span> 返回事务状态，COMMIT：提交 ROLLBACK：回滚 UNKNOW：回调</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">RocketMQLocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(Message msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>发送事务消息demo：</p>
<p>以下是RocketMQ提供用于发送事务消息的API：</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line">TransactionMQProducer producer = <span class="keyword">new</span> TransactionMQProducer(<span class="string">&quot;ProducerGroup&quot;</span>);</span><br><span class="line">producer.setNamesrvAddr(<span class="string">&quot;127.0.0.1:9876&quot;</span>);</span><br><span class="line">producer.start();</span><br><span class="line"><span class="comment">//设置TransactionListener实现</span></span><br><span class="line">producer.setTransactionListener(transactionListener）；</span><br><span class="line"><span class="comment">//发送事务消息</span></span><br><span class="line">SendResult sendResult = producer.sendMessageInTransaction(msg, <span class="keyword">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure></li>
</ol>

        <h3 id="RocketMQ实现可靠消息最终一致性事务"   >
          <a href="#RocketMQ实现可靠消息最终一致性事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#RocketMQ实现可靠消息最终一致性事务" class="headerlink" title="RocketMQ实现可靠消息最终一致性事务"></a>RocketMQ实现可靠消息最终一致性事务</h3>
      <p>【转账场景】：张三向李四转账。</p>
<p>业务流程图：</p>
<p><img src="/mdimages/image-20211206234944696.png" alt="image-20211206234944696"></p>
<p>交互流程：</p>
<ol>
<li>Bank1向MQ发送转账消息</li>
<li>Bank1执行本地事务，扣减金额</li>
<li>Bank2接收消息，执行本地事务，添加金额</li>
</ol>

        <h4 id="技术框架"   >
          <a href="#技术框架" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h4>
      <p>数据库：MySQL-5.7.25 </p>
<p>JDK：64位 jdk1.8</p>
<p>Rocketmq： 服务端RocketMQ-4.8.0；客户端rocketmq-spring-boot-starter </p>
<p>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE</p>

        <h4 id="sql脚本"   >
          <a href="#sql脚本" class="heading-link"><i class="fas fa-link"></i></a><a href="#sql脚本" class="headerlink" title="sql脚本"></a>sql脚本</h4>
      <p>创建bank1库，并导入以下表结构和数据(包含张三账户)</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `bank1` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`account_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;户</span></span><br><span class="line"><span class="string">主姓名&#x27;</span>,</span><br><span class="line">`account_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;银行</span></span><br><span class="line"><span class="string">卡号&#x27;</span>,</span><br><span class="line">`account_password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT</span><br><span class="line"><span class="string">&#x27;帐户密码&#x27;</span>,</span><br><span class="line">`account_balance` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;帐户余额&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span></span><br><span class="line"><span class="keyword">Dynamic</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_info` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;张三的账户&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">10000</span>);</span><br></pre></td></tr></table></div></figure>

<p>创建bank2库，并导入以下表结构和数据(包含李四账户)</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `bank2` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`account_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;户</span></span><br><span class="line"><span class="string">主姓名&#x27;</span>,</span><br><span class="line">`account_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;银行</span></span><br><span class="line"><span class="string">卡号&#x27;</span>,</span><br><span class="line">`account_password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT</span><br><span class="line"><span class="string">&#x27;帐户密码&#x27;</span>,</span><br><span class="line">`account_balance` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;帐户余额&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span></span><br><span class="line"><span class="keyword">Dynamic</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_info` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;李四的账户&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="keyword">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></div></figure>

<p>在bank1、bank2数据库中新增de_duplication交易记录表(去重表)，用于交易幂等控制。</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `de_duplication`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `de_duplication` (</span><br><span class="line">`tx_no` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`tx_no`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br></pre></td></tr></table></div></figure>


        <h4 id="启动RocketMQ服务端和RocketMQ控制台"   >
          <a href="#启动RocketMQ服务端和RocketMQ控制台" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动RocketMQ服务端和RocketMQ控制台" class="headerlink" title="启动RocketMQ服务端和RocketMQ控制台"></a>启动RocketMQ服务端和RocketMQ控制台</h4>
      <p>详细操作请参考;<span class="exturl"><a class="exturl__link"   href="https://clownotm.github.io/2021/08/14/RocketMQ%E5%8D%95%E6%9C%BA%E7%89%88%E5%AE%89%E8%A3%85%E7%AF%87/" >RocketMQ单机版安装篇 | Clown’s bolg (clownotm.github.io)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>启动NameServer</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nohup sh bin/mqnamesrv &amp;</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029095748077.png" alt="image-20211029095748077"></p>
<p>查看NameServer启动日志信息</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029095842022.png" alt="image-20211029095842022"></p>
<p>启动Broker</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029100047749.png" alt="image-20211029100047749"></p>
<p>查看Broker启动日志信息</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029100220706.png" alt="image-20211029100220706"></p>
<p>启动可视化控制台</p>
<p>启动前需要确认NameServer和Broker是否成功启动。</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-2.0.0.jar</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029134820511.png" alt="image-20211029134820511"></p>
<p><img src="/mdimages/image-20211029134753323.png" alt="image-20211029134753323"></p>
<p>访问</p>
<p><img src="/mdimages/image-20211029134927369.png" alt="image-20211029134927369"></p>

        <h4 id="父工程【rocketmq-transaction-message-demo】"   >
          <a href="#父工程【rocketmq-transaction-message-demo】" class="heading-link"><i class="fas fa-link"></i></a><a href="#父工程【rocketmq-transaction-message-demo】" class="headerlink" title="父工程【rocketmq_transaction_message_demo】"></a>父工程【rocketmq_transaction_message_demo】</h4>
      <p>maven依赖（pom.xml）</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_transaction_message_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>transaction_message_demo_bank1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>transaction_message_demo_bank2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.spring.boot.starter.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.spring.boot.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.spring.boot.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="微服务Bank1【transaction-message-demo-bank1】"   >
          <a href="#微服务Bank1【transaction-message-demo-bank1】" class="heading-link"><i class="fas fa-link"></i></a><a href="#微服务Bank1【transaction-message-demo-bank1】" class="headerlink" title="微服务Bank1【transaction_message_demo_bank1】"></a>微服务Bank1【transaction_message_demo_bank1】</h4>
      <p>maven依赖（pom.xml）</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_transaction_message_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transaction_message_demo_bank1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>主启动类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.txmsg.demo.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxMsgBank1Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TxMsgBank1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>实体类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2939471631535097671L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="keyword">private</span> String accountPassword;</span><br><span class="line">    <span class="keyword">private</span> Double accountBalance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeDuplication</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">902116166105074044L</span>;</span><br><span class="line">    <span class="keyword">private</span> String txNo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountChangeEvent</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1112037476233134453L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变动金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double amount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String txNo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>dao</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.entity.AccountInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">updateAccountBalance</span><span class="params">(<span class="meta">@Param(&quot;accountNo&quot;)</span> String accountNo, <span class="meta">@Param(&quot;amount&quot;)</span> Double amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">AccountInfo <span class="title">findByAccountNo</span><span class="params">(<span class="meta">@Param(&quot;accountNo&quot;)</span> String accountNo)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeDuplicationMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">isExistTx</span><span class="params">(String txNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">addTx</span><span class="params">(String txNo)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>service</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.model.AccountChangeEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向MQ发送转账消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountChangeEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendUpdateAccountBalance</span><span class="params">(AccountChangeEvent accountChangeEvent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  更新账户，扣减金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountChangeEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdateAccountBalance</span><span class="params">(AccountChangeEvent accountChangeEvent)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.dao.AccountInfoMapper;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.dao.DeDuplicationMapper;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.model.AccountChangeEvent;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoMapper accountInfoMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RocketMQTemplate rocketMQTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DeDuplicationMapper deDuplicationMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向MQ发送转账消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountChangeEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendUpdateAccountBalance</span><span class="params">(AccountChangeEvent accountChangeEvent)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);</span><br><span class="line">        String dateStr = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        log.info(dateStr+ <span class="string">&quot; bank1 向MQ发送转账消息.......1&quot;</span>);</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;accountChange&quot;</span>,accountChangeEvent);</span><br><span class="line">        String jsonString = jsonObject.toJSONString();</span><br><span class="line">        <span class="comment">//生成Message类型</span></span><br><span class="line">        Message&lt;String&gt; message = MessageBuilder.withPayload(jsonString).build();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * String txProducerGroup 生产组</span></span><br><span class="line"><span class="comment">         * String destination topic</span></span><br><span class="line"><span class="comment">         * Message&lt;?&gt; message, 消息内容</span></span><br><span class="line"><span class="comment">         * Object arg 参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rocketMQTemplate.sendMessageInTransaction(<span class="string">&quot;producer_group_transactionmsg_bank1&quot;</span>,<span class="string">&quot;topic_transaction_message&quot;</span>,</span><br><span class="line">                message,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户，扣减金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountChangeEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdateAccountBalance</span><span class="params">(AccountChangeEvent accountChangeEvent)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);</span><br><span class="line">        String dateStr = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        log.info(dateStr+ <span class="string">&quot; bank1 更新账户，扣减金额.......3&quot;</span>);</span><br><span class="line">        <span class="comment">//由于重试机制，这里需要做幂等处理</span></span><br><span class="line">        <span class="keyword">if</span>(deDuplicationMapper.isExistTx(accountChangeEvent.getTxNo()) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扣减金额</span></span><br><span class="line">        accountInfoMapper.updateAccountBalance(accountChangeEvent.getAccountNo(),accountChangeEvent.getAmount() * -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//添加事务日志</span></span><br><span class="line">        deDuplicationMapper.addTx(accountChangeEvent.getTxNo());</span><br><span class="line">        <span class="keyword">if</span>(accountChangeEvent.getAmount() == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;模拟异常发生......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>message</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.dao.DeDuplicationMapper;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.model.AccountChangeEvent;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.annotation.RocketMQTransactionListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQLocalTransactionListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQLocalTransactionState;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//生产者组名称 producer_group_transactionmsg_bank1</span></span><br><span class="line"><span class="meta">@RocketMQTransactionListener(txProducerGroup = &quot;producer_group_transactionmsg_bank1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTxmsgListener</span> <span class="keyword">implements</span> <span class="title">RocketMQLocalTransactionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoService accountInfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DeDuplicationMapper deDuplicationMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务消息发送后的回调方法，当消息发送给mq成功，此方法会被回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RocketMQLocalTransactionState <span class="title">executeLocalTransaction</span><span class="params">(Message message, Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);</span><br><span class="line">            String dateStr = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">            log.info(dateStr+ <span class="string">&quot; bank1 事务消息发送后的回调方法.......2&quot;</span>);</span><br><span class="line">            <span class="comment">//解析Message</span></span><br><span class="line">            String messageString = <span class="keyword">new</span> String((<span class="keyword">byte</span>[]) message.getPayload());</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(messageString);</span><br><span class="line">            AccountChangeEvent accountChangeEvent = jsonObject.getObject(<span class="string">&quot;accountChange&quot;</span>, AccountChangeEvent.class);</span><br><span class="line">            <span class="comment">//执行本地事务，扣减金额</span></span><br><span class="line">            accountInfoService.doUpdateAccountBalance(accountChangeEvent);</span><br><span class="line">            <span class="comment">//当返回RocketMQLocalTransactionState.COMMIT,自动向mq发送commit消息，mq将消息的状态改为可消费</span></span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;事务消息发送后的回调方法出错拉------&gt;&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.ROLLBACK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务状态回查</span></span><br><span class="line"><span class="comment">     * 查询是否扣减了金额</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RocketMQLocalTransactionState <span class="title">checkLocalTransaction</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//解析Message</span></span><br><span class="line">        String messageString = <span class="keyword">new</span> String((<span class="keyword">byte</span>[]) message.getPayload());</span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(messageString);</span><br><span class="line">        AccountChangeEvent accountChangeEvent = jsonObject.getObject(<span class="string">&quot;accountChange&quot;</span>, AccountChangeEvent.class);</span><br><span class="line">        <span class="comment">//事务id</span></span><br><span class="line">        String txNo = accountChangeEvent.getTxNo();</span><br><span class="line">        Integer existTx = deDuplicationMapper.isExistTx(txNo);</span><br><span class="line">        <span class="keyword">if</span> (existTx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.UNKNOWN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>controller</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.model.AccountChangeEvent;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoService accountInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/transfer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">transfer</span><span class="params">(<span class="meta">@RequestParam(&quot;accountNo&quot;)</span> String accountNo,<span class="meta">@RequestParam(&quot;amount&quot;)</span> Double amount)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建事务id，作为消息内容发送到MQ</span></span><br><span class="line">        String tx_no = UUID.randomUUID().toString();</span><br><span class="line">        AccountChangeEvent accountChangeEvent = <span class="keyword">new</span> AccountChangeEvent(accountNo, amount, tx_no);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        accountInfoService.sendUpdateAccountBalance(accountChangeEvent);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;转账成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>mapper包</p>
<p>AccountInfoMapper.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.txmsg.demo.dao.AccountInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAccountBalance&quot;</span>&gt;</span></span><br><span class="line">        update account_info</span><br><span class="line">        set account_balance = account_balance + #&#123;amount&#125;</span><br><span class="line">        where account_no = #&#123;accountNo&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByAccountNo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.txmsg.demo.entity.AccountInfo&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM account_info</span><br><span class="line">        WHERE account_no = #&#123;accountNo&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>DeDuplicationMapper.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.txmsg.demo.dao.DeDuplicationMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;isExistTx&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(*)</span><br><span class="line">        from de_duplication</span><br><span class="line">        where tx_no = #&#123;txNo&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addTx&quot;</span>&gt;</span></span><br><span class="line">        insert into de_duplication</span><br><span class="line">        values(#&#123;txNo&#125;,now());</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>application.properties</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span> = <span class="string">rocketmq-transaction_msg-demo-bank1</span></span><br><span class="line"><span class="meta">spring.profiles.active</span> = <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.servlet.context-path</span> = <span class="string">/bank1</span></span><br><span class="line"><span class="meta">spring.http.encoding.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.http.encoding.charset</span> = <span class="string">UTF-8</span></span><br><span class="line"><span class="meta">spring.http.encoding.force</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">server.tomcat.remote_ip_header</span> = <span class="string">x-forwarded-for</span></span><br><span class="line"><span class="meta">server.tomcat.protocol_header</span> = <span class="string">x-forwarded-proto</span></span><br><span class="line"><span class="meta">server.use-forward-headers</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.mvc.throw-exception-if-no-handler-found</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.add-mappings</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.suffix</span> = <span class="string">.html</span></span><br><span class="line"><span class="meta">spring.freemarker.request-context-attribute</span> = <span class="string">rc</span></span><br><span class="line"><span class="meta">spring.freemarker.content-type</span> = <span class="string">text/html</span></span><br><span class="line"><span class="meta">spring.freemarker.charset</span> = <span class="string">UTF-8</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>application-local.properties</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9001</span></span><br><span class="line"><span class="meta">swagger.enable</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span> = <span class="string">jdbc:mysql://localhost:3306/bank1?useUnicode=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span> = <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="meta">rocketmq.producer.group</span> = <span class="string">producer_bank1</span></span><br><span class="line"><span class="meta">rocketmq.name-server</span> = <span class="string">192.168.138.129:9876</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logging.level.root</span> = <span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.org.springframework.web</span> = <span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.cn.itcast.wanxintx.ensuredemo</span>  = <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h4 id="微服务Bank2【transaction-message-demo-bank2】"   >
          <a href="#微服务Bank2【transaction-message-demo-bank2】" class="heading-link"><i class="fas fa-link"></i></a><a href="#微服务Bank2【transaction-message-demo-bank2】" class="headerlink" title="微服务Bank2【transaction_message_demo_bank2】"></a>微服务Bank2【transaction_message_demo_bank2】</h4>
      <p>maven依赖（pom.xml）</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_transaction_message_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transaction_message_demo_bank2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>主启动类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.txmsg.demo.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxMsgBank2Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TxMsgBank2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>实体类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2939471631535097671L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="keyword">private</span> String accountPassword;</span><br><span class="line">    <span class="keyword">private</span> Double accountBalance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountChangeEvent</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6815553177027760752L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变动金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double amount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String txNo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>dao</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update account_info set account_balance=account_balance+#&#123;amount&#125; where account_no=#&#123;accountNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateAccountBalance</span><span class="params">(<span class="meta">@Param(&quot;accountNo&quot;)</span> String accountNo, <span class="meta">@Param(&quot;amount&quot;)</span> Double amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select count(1) from de_duplication where tx_no = #&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isExistTx</span><span class="params">(String txNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into de_duplication values(#&#123;txNo&#125;,now());&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addTx</span><span class="params">(String txNo)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>service</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.model.AccountChangeEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户，增加金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountChangeEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccountInfoBalance</span><span class="params">(AccountChangeEvent accountChangeEvent)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.dao.AccountInfoDao;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.model.AccountChangeEvent;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoDao accountInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户，增加金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountChangeEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAccountInfoBalance</span><span class="params">(AccountChangeEvent accountChangeEvent)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);</span><br><span class="line">        String dateStr = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        log.info(dateStr+<span class="string">&quot; bank2 更新账户，账户：&quot;</span>+accountChangeEvent.getAccountNo()+<span class="string">&quot;; 金额：&quot;</span>+accountChangeEvent.getAmount());</span><br><span class="line">        <span class="comment">//由于重试机制，这里需要做幂等处理</span></span><br><span class="line">        <span class="keyword">if</span>(accountInfoDao.isExistTx(accountChangeEvent.getTxNo()) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增加金额</span></span><br><span class="line">        accountInfoDao.updateAccountBalance(accountChangeEvent.getAccountNo(),accountChangeEvent.getAmount());</span><br><span class="line">        <span class="comment">//添加事务记录，用于幂等</span></span><br><span class="line">        accountInfoDao.addTx(accountChangeEvent.getTxNo());</span><br><span class="line">        <span class="keyword">if</span>(accountChangeEvent.getAmount() == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;模拟异常发生......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>message</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.txmsg.demo.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.model.AccountChangeEvent;</span><br><span class="line"><span class="keyword">import</span> com.txmsg.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.annotation.RocketMQMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(consumerGroup = &quot;consumer_group_txmsg_bank2&quot;,topic = &quot;topic_transaction_message&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTxmsgListener</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoService accountInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);</span><br><span class="line">        String dateStr = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        log.info(dateStr+ <span class="string">&quot; bank2 接收消息,开始消费.......4&quot;</span>);</span><br><span class="line">        <span class="comment">//解析消息</span></span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(message);</span><br><span class="line">        AccountChangeEvent accountChangeEvent = jsonObject.getObject(<span class="string">&quot;accountChange&quot;</span>, AccountChangeEvent.class);</span><br><span class="line">        <span class="comment">//李四账户为2</span></span><br><span class="line">        accountChangeEvent.setAccountNo(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="comment">//更新账户，增加金额</span></span><br><span class="line">        accountInfoService.addAccountInfoBalance(accountChangeEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.properties</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span> = <span class="string">rocketmq-transaction_msg-demo-bank2</span></span><br><span class="line"><span class="meta">spring.profiles.active</span> = <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.servlet.context-path</span> = <span class="string">/bank2</span></span><br><span class="line"><span class="meta">spring.http.encoding.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.http.encoding.charset</span> = <span class="string">UTF-8</span></span><br><span class="line"><span class="meta">spring.http.encoding.force</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">server.tomcat.remote_ip_header</span> = <span class="string">x-forwarded-for</span></span><br><span class="line"><span class="meta">server.tomcat.protocol_header</span> = <span class="string">x-forwarded-proto</span></span><br><span class="line"><span class="meta">server.use-forward-headers</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.mvc.throw-exception-if-no-handler-found</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.add-mappings</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.suffix</span> = <span class="string">.html</span></span><br><span class="line"><span class="meta">spring.freemarker.request-context-attribute</span> = <span class="string">rc</span></span><br><span class="line"><span class="meta">spring.freemarker.content-type</span> = <span class="string">text/html</span></span><br><span class="line"><span class="meta">spring.freemarker.charset</span> = <span class="string">UTF-8</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>application-local.properties</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9002</span></span><br><span class="line"><span class="meta">swagger.enable</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span> = <span class="string">jdbc:mysql://localhost:3306/bank2?useUnicode=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span> = <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="meta">rocketmq.producer.group</span> = <span class="string">producer_bank2</span></span><br><span class="line"><span class="meta">rocketmq.name-server</span> = <span class="string">192.168.138.129:9876</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logging.level.root</span> = <span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.org.springframework.web</span> = <span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.cn.itcast.wanxintx.ensuredemo</span>  = <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>测试场景：</p>
<ul>
<li>bank1本地事务失败，则bank1不发送转账消息。</li>
<li>bank2接收转账消息失败，会进行重试发送消息。</li>
<li>bank2多次消费同一个消息，实现幂等。</li>
</ul>
<p>总结：</p>
<p>可靠消息最终一致性就是保证消息从生产方经过消息中间件传递到消费方的一致性；</p>
<p>RocketMQ主要解决了两个问题：</p>
<p>1、本地事务与消息发送的原子性问题。</p>
<p>2、事务参与方接收消息的可靠性。</p>
<p>可靠消息最终一致性事务适合执行周期长且实时性要求不高的场景。引入消息机制后，同步的事务操作变为基于消息执行的异步操作，避免了分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>分布式事务解决方案之最大努力通知</title>
    <url>/2021/10/16/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8B%E6%9C%80%E5%A4%A7%E5%8A%AA%E5%8A%9B%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[
        <h3 id="什么是最大努力通知"   >
          <a href="#什么是最大努力通知" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是最大努力通知" class="headerlink" title="什么是最大努力通知"></a>什么是最大努力通知</h3>
      <p>最大努力通知也是一种解决分布式事务的方案，发起通知方尽最大的努力将业务处理结果发给接收通知方，但是可能消息接收不到，此时需要接收通知方主动调用发起通知方的接口查询业务处理结果，通知的可靠性关键在接收通知方。</p>
<p>下面以充值为例子来说明：</p>
<p><img src="/mdimages/image-20211204174526309.png" alt="image-20211204174526309"></p>
<span id="more"></span>

<p>交互流程：</p>
<ol>
<li><p>账户系统调用充值系统接口</p>
</li>
<li><p>充值系统完成支付处理向账户系统发起充值结果通知</p>
<p>若通知失败，则充值系统按策略进行重复通知</p>
</li>
<li><p>账户系统接收到充值系统结果通知后修改充值状态</p>
</li>
<li><p>账户系统未接收到通知会主动调用充值系统的接口查询充值结果</p>
</li>
</ol>
<p>通过上边的例子，总结最大努力通知方案的目标：</p>
<p>发起通知方通过一定的机制最大努力将业务处理结果通知到接收方。</p>
<p>具体包括：</p>
<ul>
<li><p><b>有一定的消息重复通知机制（重试机制）</b></p>
<p>因为接收通知方可能没有接收到通知，此时要有一定的机制对消息重复通知。</p>
</li>
<li><p><b>消息校对机制</b></p>
<p>如果尽最大努力也没有通知到接收方，或者接收方消费消息后要再次消费，此时可由接收方主动向通知方查询消息信息来满足。</p>
</li>
</ul>

        <h3 id="最大努力通知与可靠消息最终一致性的不同之处"   >
          <a href="#最大努力通知与可靠消息最终一致性的不同之处" class="heading-link"><i class="fas fa-link"></i></a><a href="#最大努力通知与可靠消息最终一致性的不同之处" class="headerlink" title="最大努力通知与可靠消息最终一致性的不同之处"></a>最大努力通知与可靠消息最终一致性的不同之处</h3>
      <ol>
<li><p>解决方案思想不同</p>
<p>可靠消息最终一致性，发起通知方需要保证将消息发出去，并且将消息发到接收通知方，消息的可靠性由发起通知方来保证。</p>
<p>最大努力通知，发起通知方尽最大努力将业务处理结果通知给接收通知方，但是消息可能接收不到，此时需要接收通知方主动调用发起通知方的接口查询业务处理结果，通知的可靠性关键在接收通知方。</p>
</li>
<li><p>业务应用场景不同</p>
<p>可靠消息最终一致性关注的是交易过程的事务一致，以异步的方式完成交易。</p>
<p>最大努力通知关注的是交易后的通知事务，即将交易结果可靠的通知出去。</p>
</li>
<li><p>技术解决方向不同</p>
<p>可靠消息一致性要解决消息从发出到接收的一致性，即消息发出并且被接收到。</p>
<p>最大努力通知无法保证消息从发出到接收的一致性，只提供消息接收的可靠性机制。可靠性机制是，最大努力的将消息通知给接收方，当消息无法被接收方接收时，由接收方主动查询消息（业务处理结果）。</p>
</li>
</ol>

        <h3 id="解决方案"   >
          <a href="#解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3>
      <p><b>方案1</b>：</p>
<p><img src="/mdimages/image-20211205151737053.png" alt="image-20211205151737053"></p>
<p>该方案利用MQ的ack机制由MQ向接收通知方发送通知。流程如下：</p>
<ol>
<li><p>发起通知方将通知发给MQ。</p>
<p>使用普通消息将通知发给MQ</p>
<p>注意：如果消息没有发出去可由接收通知方主动请求发起通知方查询业务执行结果。</p>
</li>
<li><p>接收通知方监听MQ。</p>
</li>
<li><p>接收通知方接收消息，业务处理完成回应ack。</p>
</li>
<li><p>接收通知方若没有回应ack，则MQ会重复通知。</p>
<p>MQ会按<b>时间间隔1min、5min、10min、30min、1h、2h、5h、10h的方式，逐步拉大通知间隙</b>（如果MQ采用RocketMq,在broker中可以进行配置），直到达到通知要求的时间窗口上限。</p>
</li>
<li><p>接收通知方可通过消息校对接口来校对消息的一致性。</p>
</li>
</ol>
<p><b>方案2</b>：</p>
<p><img src="/mdimages/image-20211205154544346.png" alt="image-20211205154544346"></p>
<p>该方案也是利用MQ的ack机制，由通知程序向接收通知方发送通知。流程如下：</p>
<ol>
<li><p>发起通知方将通知发给MQ。</p>
<p>使用事务消息保证本地事务与消息的原子性，最终将通知发给MQ。</p>
</li>
<li><p>通知程序监听MQ，接收MQ的消息。</p>
<p>通知程序若没用回应ack，则MQ会重复通知。</p>
</li>
<li><p>通知程序通过互联网接口协议（如http、webservice）调用接收通知方接口，完成通知。</p>
<p>通知程序调用接收通知方接口成功则表示通知成功，即消费MQ消息成功，MQ将不再向通知程序投递通知消息。</p>
</li>
<li><p>接收通知方可通过消息校对接口来校对消息的一致性。</p>
</li>
</ol>
<p><b>方案1和方案2的不同之处</b>：</p>
<ul>
<li>方案1中，接收通知方直接监听MQ，此方案主要应用在与内部应用之间的通知。</li>
<li>方案2中，由通知程序监听MQ，收到MQ的消息后由通知程序通过互联网接口协议调用接收通知方进行通知。此方案主要应用于外部应用之间的通知，例如支付宝、微信的支付结果通知。</li>
</ul>

        <h3 id="RocketMQ实现最大努力通知事务"   >
          <a href="#RocketMQ实现最大努力通知事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#RocketMQ实现最大努力通知事务" class="headerlink" title="RocketMQ实现最大努力通知事务"></a>RocketMQ实现最大努力通知事务</h3>
      <p>demo演示：【充值场景】</p>
<p>业务流程图：</p>
<p><img src="/mdimages/image-20211206234443950.png" alt="image-20211206234443950"></p>
<p>交互流程：</p>
<ol>
<li>用户发起充值请求</li>
<li>充值系统完成充值，并将充值结果发给MQ</li>
<li>账户系统监听MQ，接收到充值结果通知，如果接收不到消息，MQ会重复发送通知。接收到充值结果通知账户系统增加充值金额</li>
<li>账户系统也可以主动查询充值系统的充值结果（如果账户系统没有接收到消息，那么主动查询充值结果会增加充值金额【注：幂等】）</li>
</ol>

        <h4 id="技术框架"   >
          <a href="#技术框架" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h4>
      <p>数据库：MySQL-5.7.25 </p>
<p>JDK：64位 jdk1.8</p>
<p>Rocketmq： 服务端RocketMQ-4.8.0；客户端rocketmq-spring-boot-starter </p>
<p>微服务框架：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE</p>

        <h4 id="sql脚本"   >
          <a href="#sql脚本" class="heading-link"><i class="fas fa-link"></i></a><a href="#sql脚本" class="headerlink" title="sql脚本"></a>sql脚本</h4>
      <p>创建bank1库，并导入以下表结构和数据(包含张三账户)</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `bank1` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`account_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;户</span></span><br><span class="line"><span class="string">主姓名&#x27;</span>,</span><br><span class="line">`account_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;银行</span></span><br><span class="line"><span class="string">卡号&#x27;</span>,</span><br><span class="line">`account_password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT</span><br><span class="line"><span class="string">&#x27;帐户密码&#x27;</span>,</span><br><span class="line">`account_balance` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;帐户余额&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span></span><br><span class="line"><span class="keyword">Dynamic</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_info` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;张三的账户&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">10000</span>);</span><br></pre></td></tr></table></div></figure>

<p>去重表</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `de_duplication`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `de_duplication` (</span><br><span class="line">`tx_no` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`create_time` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`tx_no`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>创建bank1_pay库，并导入以下表结构：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `bank1_pay` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_pay` (</span><br><span class="line">`id` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`account_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">`pay_amount` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;充值余额&#x27;</span>,</span><br><span class="line">`<span class="keyword">result</span>` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;充值结果:success，fail&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span></span><br><span class="line"><span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></div></figure>


        <h4 id="启动RocketMQ服务端和RocketMQ可视化控制台"   >
          <a href="#启动RocketMQ服务端和RocketMQ可视化控制台" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动RocketMQ服务端和RocketMQ可视化控制台" class="headerlink" title="启动RocketMQ服务端和RocketMQ可视化控制台"></a>启动RocketMQ服务端和RocketMQ可视化控制台</h4>
      <p>详细操作请参考;<span class="exturl"><a class="exturl__link"   href="https://clownotm.github.io/2021/08/14/RocketMQ%E5%8D%95%E6%9C%BA%E7%89%88%E5%AE%89%E8%A3%85%E7%AF%87/" >RocketMQ单机版安装篇 | Clown’s bolg (clownotm.github.io)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>启动NameServer</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nohup sh bin/mqnamesrv &amp;</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029095748077.png" alt="image-20211029095748077"></p>
<p>查看NameServer启动日志信息</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029095842022.png" alt="image-20211029095842022"></p>
<p>启动Broker</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029100047749.png" alt="image-20211029100047749"></p>
<p>查看Broker启动日志信息</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029100220706.png" alt="image-20211029100220706"></p>
<p>启动可视化控制台</p>
<p>启动前需要确认NameServer和Broker是否成功启动。</p>
<figure class="highlight shell"><div class="table-container"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-2.0.0.jar</span><br></pre></td></tr></table></div></figure>

<p><img src="/mdimages/image-20211029134820511.png" alt="image-20211029134820511"></p>
<p><img src="/mdimages/image-20211029134753323.png" alt="image-20211029134753323"></p>
<p>访问</p>
<p><img src="/mdimages/image-20211029134927369.png" alt="image-20211029134927369"></p>

        <h4 id="父工程【rocketmq-notifymsg-demo】"   >
          <a href="#父工程【rocketmq-notifymsg-demo】" class="heading-link"><i class="fas fa-link"></i></a><a href="#父工程【rocketmq-notifymsg-demo】" class="headerlink" title="父工程【rocketmq_notifymsg_demo】"></a>父工程【rocketmq_notifymsg_demo】</h4>
      <p>maven依赖（pom.xml）</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_notifymsg_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rocketmq_notifymsg_demo_bank1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>rocketmq_notifymsg_demo_pay<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>discover-server-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.spring.boot.starter.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.spring.boot.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.spring.boot.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="注册中心【discover-server-demo】"   >
          <a href="#注册中心【discover-server-demo】" class="heading-link"><i class="fas fa-link"></i></a><a href="#注册中心【discover-server-demo】" class="headerlink" title="注册中心【discover-server-demo】"></a>注册中心【discover-server-demo】</h4>
      <p>maven依赖（pom.xml）</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_notifymsg_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>discover-server-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>主启动类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoverServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DiscoverServer.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.yml</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">rocketmq-discovery-demo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">56080 #启动端口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">server</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">enable-self-preservation</span>: <span class="string">false    #关闭服务器自我保护，客户端心跳检测15分钟内错误达到80%服务会保护，导致别人还认为是好用的服务</span></span><br><span class="line">    <span class="meta">eviction-interval-timer-in-ms</span>: <span class="string">10000 #清理间隔（单位毫秒，默认是60*1000）5秒将客户端剔除的服务在服务注册列表中剔除# </span></span><br><span class="line">    <span class="attr">shouldUseReadOnlyResponseCache</span>: <span class="string">true #eureka是CAP理论种基于AP策略，为了保证强一致性关闭此切换CP 默认不关闭 false关闭</span></span><br><span class="line">    <span class="meta">response-cache-update-interval-ms</span>: <span class="string">3000  #eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上 #eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上默认30s</span></span><br><span class="line">    <span class="meta">response-cache-auto-expiration-in-seconds</span>: <span class="string">180   #eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。</span></span><br><span class="line">  <span class="attr">client</span>: <span class="string"></span></span><br><span class="line">    <span class="meta">register-with-eureka</span>: <span class="string">false  #false:不作为一个客户端注册到注册中心</span></span><br><span class="line">    <span class="meta">fetch-registry</span>: <span class="string">false      #为true时，可以启动，但报异常：Cannot execute request on any known server</span></span><br><span class="line">    <span class="meta">instance-info-replication-interval-seconds</span>: <span class="string">10 </span></span><br><span class="line">    <span class="attr">serviceUrl</span>: <span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://localhost:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br><span class="line">    <span class="meta">prefer-ip-address</span>: <span class="string">true</span></span><br><span class="line">    <span class="meta">instance-id</span>: <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="meta">lease-renewal-interval-in-seconds</span>: <span class="string">5    #续约更新时间间隔（默认30秒）</span></span><br><span class="line">    <span class="meta">lease-expiration-duration-in-seconds</span>: <span class="string">10 # 续约到期时间（默认90秒）</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="attr">logging</span>: <span class="string"></span></span><br><span class="line">  <span class="attr">config</span>: <span class="string">classpath:log4j2-dev.xml</span></span><br></pre></td></tr></table></div></figure>

<p>log4j2-dev.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;180&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prjname&quot;</span>&gt;</span>注册中心<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logdir&quot;</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PATTERN&quot;</span>&gt;</span> %date&#123;YYYY-MM-dd HH:mm:ss,SSS&#125; %level [%thread][%file:%line] - %msg%n%throwable<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;ErrorAppender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;logdir&#125;/$&#123;prjname&#125;_error.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;logdir&#125;/$$&#123;date:yyyy-MM-dd&#125;/$&#123;prjname&#125;_error.%d&#123;yyyy-MM-dd-HH&#125;.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;DebugAppender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;logdir&#125;/$&#123;prjname&#125;_info.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;logdir&#125;/$$&#123;date:yyyy-MM-dd&#125;/$&#123;prjname&#125;_info.%d&#123;yyyy-MM-dd-HH&#125;.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--异步appender--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">Async</span> <span class="attr">name</span>=<span class="string">&quot;AsyncAppender&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;ErrorAppender&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;DebugAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Async</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;springfox&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.http&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.netflix.discovery&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;AsyncAppender&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h4 id="微服务【rocketmq-notifymsg-demo-bank1】"   >
          <a href="#微服务【rocketmq-notifymsg-demo-bank1】" class="heading-link"><i class="fas fa-link"></i></a><a href="#微服务【rocketmq-notifymsg-demo-bank1】" class="headerlink" title="微服务【rocketmq_notifymsg_demo_bank1】"></a>微服务【rocketmq_notifymsg_demo_bank1】</h4>
      <p>maven依赖（pom.xml）</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_notifymsg_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_notifymsg_demo_bank1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>主启动类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.notifymsg.demo.spring&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NotifyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>实体类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="keyword">private</span> String accountPassword;</span><br><span class="line">    <span class="keyword">private</span> Double accountBalance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountPay</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  事务号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变动金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> payAmount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 充值结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountChangeEvent</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变动金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String txNo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>dao</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update account_info set account_balance=account_balance+#&#123;amount&#125; where account_no=#&#123;accountNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateAccountBalance</span><span class="params">(<span class="meta">@Param(&quot;accountNo&quot;)</span> String accountNo, <span class="meta">@Param(&quot;amount&quot;)</span> Double amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询幂等记录，用于幂等控制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(1) from de_duplication where tx_no = #&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isExistTx</span><span class="params">(String txNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加事务记录，用于幂等控制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into de_duplication values(#&#123;txNo&#125;,now());&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addTx</span><span class="params">(String txNo)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>service</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.model.AccountChangeEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * /更新账户金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountChange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(AccountChangeEvent accountChange)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询充值结果（远程调用）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx_no</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">queryPayResult</span><span class="params">(String tx_no)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.dao.AccountInfoDao;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.model.AccountChangeEvent;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.spring.PayClient;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoDao accountInfoDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PayClient payClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountChange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(AccountChangeEvent accountChange)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//幂等判断</span></span><br><span class="line">        <span class="keyword">if</span> (accountInfoDao.isExistTx(accountChange.getTxNo()) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = accountInfoDao.updateAccountBalance(accountChange.getAccountNo(), accountChange.getAmount());</span><br><span class="line">        <span class="comment">//插入事务记录，用于幂等判断</span></span><br><span class="line">        accountInfoDao.addTx(accountChange.getTxNo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 远程调用查询充值结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx_no</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">queryPayResult</span><span class="params">(String tx_no)</span> </span>&#123;</span><br><span class="line">        AccountPay payResult = payClient.payResult(tx_no);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;fail&quot;</span>.equals(payResult.getResult()))&#123;</span><br><span class="line">            <span class="keyword">return</span> payResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新账户金额</span></span><br><span class="line">        AccountChangeEvent accountChangeEvent = <span class="keyword">new</span> AccountChangeEvent();</span><br><span class="line">        accountChangeEvent.setAccountNo(payResult.getAccountNo());</span><br><span class="line">        accountChangeEvent.setAmount(payResult.getPayAmount());</span><br><span class="line">        accountChangeEvent.setTxNo(payResult.getId());</span><br><span class="line">        updateAccountBalance(accountChangeEvent);</span><br><span class="line">        <span class="keyword">return</span> payResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>spring</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 远程调用pay充值系统</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;notifymsg-demo-pay&quot;,fallbackFactory = PayFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 远程调用充值系统的接口查询充值结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/pay/payResult/&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">payResult</span><span class="params">(<span class="meta">@PathVariable(&quot;txNo&quot;)</span> String txNo)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayFallback</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">PayClient</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PayClient <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PayClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> AccountPay <span class="title">payResult</span><span class="params">(String txNo)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">&quot;------------&gt;&quot;</span>,throwable);</span><br><span class="line">                AccountPay accountPay = <span class="keyword">new</span> AccountPay();</span><br><span class="line">                accountPay.setResult(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> accountPay;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>message</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.model.AccountChangeEvent;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.annotation.RocketMQMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;topic_notifymsg&quot;,consumerGroup = &quot;consumer_group_notifymsg_demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyMsgListener</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">AccountPay</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoService accountInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountPay</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(AccountPay accountPay)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收到消息：&#123;&#125;&quot;</span>, JSON.toJSONString(accountPay));</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;success&quot;</span>.equals(accountPay.getResult()))&#123;</span><br><span class="line">            <span class="comment">//更新账户金额</span></span><br><span class="line">            AccountChangeEvent accountChangeEvent = <span class="keyword">new</span> AccountChangeEvent();</span><br><span class="line">            accountChangeEvent.setAccountNo(accountPay.getAccountNo());</span><br><span class="line">            accountChangeEvent.setAmount(accountPay.getPayAmount());</span><br><span class="line">            accountChangeEvent.setTxNo(accountPay.getId());</span><br><span class="line">            accountInfoService.updateAccountBalance(accountChangeEvent);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;处理消息完成：&#123;&#125;&quot;</span>, JSON.toJSONString(accountPay));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>controller</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.notifymsg.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> com.notifymsg.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoService accountInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主动查询充值结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payResult/&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">result</span><span class="params">(<span class="meta">@PathVariable(&quot;txNo&quot;)</span> String txNo)</span></span>&#123;</span><br><span class="line">        AccountPay payResult = accountInfoService.queryPayResult(txNo);</span><br><span class="line">        <span class="keyword">return</span> payResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.properties</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span> = <span class="string">rocketmq-notifymsg-demo</span></span><br><span class="line"><span class="meta">spring.profiles.active</span> = <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.servlet.context-path</span> = <span class="string">/notifymsg</span></span><br><span class="line"><span class="meta">spring.http.encoding.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.http.encoding.charset</span> = <span class="string">UTF-8</span></span><br><span class="line"><span class="meta">spring.http.encoding.force</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">server.tomcat.remote_ip_header</span> = <span class="string">x-forwarded-for</span></span><br><span class="line"><span class="meta">server.tomcat.protocol_header</span> = <span class="string">x-forwarded-proto</span></span><br><span class="line"><span class="meta">server.use-forward-headers</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.mvc.throw-exception-if-no-handler-found</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.add-mappings</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.suffix</span> = <span class="string">.html</span></span><br><span class="line"><span class="meta">spring.freemarker.request-context-attribute</span> = <span class="string">rc</span></span><br><span class="line"><span class="meta">spring.freemarker.content-type</span> = <span class="string">text/html</span></span><br><span class="line"><span class="meta">spring.freemarker.charset</span> = <span class="string">UTF-8</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>application-local.properties</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9001</span></span><br><span class="line"><span class="meta">swagger.enable</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>: <span class="string">http://localhost:56080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span> = <span class="string">jdbc:mysql://localhost:3306/bank1?useUnicode=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span> = <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">rocketmq.producer.group</span> = <span class="string">producer_notifymsg_bank1</span></span><br><span class="line"><span class="meta">rocketmq.name-server</span> = <span class="string">192.168.138.129:9876</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logging.level.root</span> = <span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.org.springframework.web</span> = <span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.cn.itcast.wanxintx.effortdemo</span>  = <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h4 id="微服务【rocketmq-notifymsg-demo-pay】"   >
          <a href="#微服务【rocketmq-notifymsg-demo-pay】" class="heading-link"><i class="fas fa-link"></i></a><a href="#微服务【rocketmq-notifymsg-demo-pay】" class="headerlink" title="微服务【rocketmq_notifymsg_demo_pay】"></a>微服务【rocketmq_notifymsg_demo_pay】</h4>
      <p>maven依赖（pom.xml）</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_notifymsg_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq_notifymsg_demo_pay<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.interceptor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.interceptor-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>主启动类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pay.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyPayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NotifyPayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>实体类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pay.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountPay</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  事务号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变动金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> payAmount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 充值结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>dao</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pay.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pay.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountPayDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into account_pay(id,account_no,pay_amount,result) values(#&#123;id&#125;,#&#123;accountNo&#125;,#&#123;payAmount&#125;,#&#123;result&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertAccountPay</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> String id, <span class="meta">@Param(&quot;accountNo&quot;)</span> String accountNo, <span class="meta">@Param(&quot;payAmount&quot;)</span> Double pay_amount, <span class="meta">@Param(&quot;result&quot;)</span> String result)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select id,account_no accountNo,pay_amount payAmount,result from account_pay where id=#&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function">AccountPay <span class="title">findByIdTxNo</span><span class="params">(<span class="meta">@Param(&quot;txNo&quot;)</span> String txNo)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>service</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pay.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pay.demo.entity.AccountPay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountPayService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 充值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountPay</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">insertAccountPay</span><span class="params">(AccountPay accountPay)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询充值结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">getAccountPay</span><span class="params">(String txNo)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pay.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pay.demo.dao.AccountPayDao;</span><br><span class="line"><span class="keyword">import</span> com.pay.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> com.pay.demo.service.AccountPayService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountPayServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountPayService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountPayDao accountPayDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入充值记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountPay</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">insertAccountPay</span><span class="params">(AccountPay accountPay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = accountPayDao.insertAccountPay(accountPay.getId(), accountPay.getAccountNo(),</span><br><span class="line">                accountPay.getPayAmount(), <span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//发送通知，使用普通消息发送通知</span></span><br><span class="line">            accountPay.setResult(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            rocketMQTemplate.convertAndSend(<span class="string">&quot;topic_notifymsg&quot;</span>,accountPay);</span><br><span class="line">            <span class="keyword">return</span> accountPay;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询充值记录</span></span><br><span class="line"><span class="comment">     * 接收通知方调用该方法查询充值结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">getAccountPay</span><span class="params">(String txNo)</span> </span>&#123;</span><br><span class="line">        AccountPay result = accountPayDao.findByIdTxNo(txNo);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>controller</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pay.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pay.demo.entity.AccountPay;</span><br><span class="line"><span class="keyword">import</span> com.pay.demo.service.AccountPayService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountPayController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountPayService accountPayService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 充值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountPay</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/dopay&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">pay</span><span class="params">(AccountPay accountPay)</span></span>&#123;</span><br><span class="line">        <span class="comment">//生成事务编号</span></span><br><span class="line">        String txNo = UUID.randomUUID().toString();</span><br><span class="line">        accountPay.setId(txNo);</span><br><span class="line">        <span class="keyword">return</span> accountPayService.insertAccountPay(accountPay);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询充值结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> txNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payresult/&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountPay <span class="title">payResult</span><span class="params">(<span class="meta">@PathVariable(&quot;txNo&quot;)</span> String txNo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountPayService.getAccountPay(txNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.properties</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span> = <span class="string">rocketmq-notifymsg-demo-pay</span></span><br><span class="line"><span class="meta">spring.profiles.active</span> = <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.servlet.context-path</span> = <span class="string">/pay</span></span><br><span class="line"><span class="meta">spring.http.encoding.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.http.encoding.charset</span> = <span class="string">UTF-8</span></span><br><span class="line"><span class="meta">spring.http.encoding.force</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">server.tomcat.remote_ip_header</span> = <span class="string">x-forwarded-for</span></span><br><span class="line"><span class="meta">server.tomcat.protocol_header</span> = <span class="string">x-forwarded-proto</span></span><br><span class="line"><span class="meta">server.use-forward-headers</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.mvc.throw-exception-if-no-handler-found</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.add-mappings</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.enabled</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">spring.freemarker.suffix</span> = <span class="string">.html</span></span><br><span class="line"><span class="meta">spring.freemarker.request-context-attribute</span> = <span class="string">rc</span></span><br><span class="line"><span class="meta">spring.freemarker.content-type</span> = <span class="string">text/html</span></span><br><span class="line"><span class="meta">spring.freemarker.charset</span> = <span class="string">UTF-8</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>application-local.properties</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9002</span></span><br><span class="line"><span class="meta">swagger.enable</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">eureka.client.serviceUrl.defaultZone</span>: <span class="string">http://localhost:56080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span> = <span class="string">jdbc:mysql://localhost:3306/bank1_pay?useUnicode=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span> = <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">rocketmq.producer.group</span> = <span class="string">producer_notifymsg_pay</span></span><br><span class="line"><span class="meta">rocketmq.name-server</span> = <span class="string">192.168.138.129:9876</span></span><br><span class="line"></span><br><span class="line"><span class="meta">logging.level.root</span> = <span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.org.springframework.web</span> = <span class="string">info</span></span><br><span class="line"><span class="meta">logging.level.cn.itcast.wanxintx.effortdemo</span>  = <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>测试场景：</p>
<ul>
<li>充值系统充值成功，发送消息，账户系统接收到消息，修改账户金额。</li>
<li>充值系统充值成功（睡眠1分钟后再发送消息），账户系统主动查询充值结果并修改账户金额。</li>
<li>账户系统修改账户金额幂等测试。</li>
</ul>
<p>总结：</p>
<p><b>最大努力通知方案是分布式事务中对一致性要求最低的一种方案，适用于一些最终一致性时间敏感度低的业务场景。</b></p>
<p>最大努力通知方案需要实现以下功能：</p>
<ol>
<li>消息重复通知机制</li>
<li>消息校对机制</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>分布式事务解决方案之TCC</title>
    <url>/2021/09/25/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8BTCC/</url>
    <content><![CDATA[
        <h3 id="什么是TCC事务"   >
          <a href="#什么是TCC事务" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是TCC事务" class="headerlink" title="什么是TCC事务"></a>什么是TCC事务</h3>
      <p>TCC是Try、Confirm、Cancel三个词语的缩写，TCC要求每个分支事务实现三个操作：预处理Try、确认Confirm、撤销Cancel。Try操作做业务检查及资源预留，Confirm做业务确认操作，Cancel实现一个与Try相反的操作即回滚操作。TM首先发起所有的分支事务的try操作，任何一个分支事务的try操作执行失败，TM将会发起所有分支事务的Cancel操作，若try操作全部成功，TM将会发起所有分支事务的Confirm操作，其中Confirm/Cancel操作若执行失败，TM会进行重试。</p>
<p>分支事务成功的情况：</p>
<p><img src="/mdimages/image-20211125161812247.png" alt="image-20211125161812247"></p>
<p>分支事务失败的情况：</p>
<p><img src="/mdimages/image-20211125162156715.png" alt="image-20211125162156715"></p>
<span id="more"></span>

<p>TCC分为三个阶段：</p>
<ol>
<li><p><b>Try</b>阶段是做业务检查（一致性）及资源预留（隔离），此阶段仅是一个初步操作，它和后续的Confirm一起才能真正构成一个完整的业务逻辑。</p>
</li>
<li><p><b>Confirm</b>阶段是做确认提交，Try阶段所有分支事务执行成功后开始执行Confirm。<font style="color:red">通常情况下，采用TCC则认为Confirm阶段是不会出错的。</font>即：只要Try成功，Confirm一定成功。若Confirm阶段真的出错了，需引入重试机制或人工处理。</p>
</li>
<li><p>Cancel阶段是在业务执行错误需要回滚的状态下执行分支事务的业务取消，预留资源释放。<font style="color:red">通常情况下，采用TCC则认为Cancel阶段也是一定成功的。</font>若Cancel阶段真的出错了，需引入重试机制或人工处理。</p>
</li>
<li><p>TM事务管理器</p>
<p>TM事务管理器可以实现为独立的服务，也可以让<b>全局事务发起方</b>充当TM的角色。</p>
<p>TM在发起全局事务时生成全局事务记录，全局事务ID贯穿整个分布式事务调用链路，用来记录事务上下文，追踪和记录状态，<font style="color:red">由于Confirm和Cancel失败需要进行重试，因此需要实现幂等，幂等性是指同一个操作无论请求多少次，其结果都相同。</font></p>
</li>
</ol>

        <h3 id="TCC解决方案"   >
          <a href="#TCC解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#TCC解决方案" class="headerlink" title="TCC解决方案"></a>TCC解决方案</h3>
      <p>以下几个框架均支持TCC全局事务：</p>
<div class="table-container"><table>
<thead>
<tr>
<th>框架名称</th>
<th>Github地址</th>
</tr>
</thead>
<tbody><tr>
<td>tcc-transaction</td>
<td><span class="exturl"><a class="exturl__link"   href="https://github.com/changmingxie/tcc-transaction" >https://github.com/changmingxie/tcc-transaction</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>Alibaba Seata</td>
<td><span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https://github.com/seata/seata" >https://github.com/seata/seata</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>LCN</td>
<td><span class="exturl"><a class="exturl__link"   href="https://links.jianshu.com/go?to=https://github.com/codingapi/tx-lcn" >https://github.com/codingapi/tx-lcn</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>Hmily</td>
<td><span class="exturl"><a class="exturl__link"   href="https://github.com/yangyz/hmily" >yangyz/hmily: TCC分布式事务框架(try,confirm,cancel) (github.com)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>ByteTCC</td>
<td><span class="exturl"><a class="exturl__link"   href="https://github.com/liuyangming/ByteTCC" >https://github.com/liuyangming/ByteTCC</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
<tr>
<td>EasyTransaction</td>
<td><span class="exturl"><a class="exturl__link"   href="https://github.com/QNJR-GROUP/EasyTransaction" >https://github.com/QNJR-GROUP/EasyTransaction</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td>
</tr>
</tbody></table></div>
<p>本篇选择Hmily框架来讲解TCC的原理以及事务协调运作的过程（后续会增加seata和LCN）。</p>
<p>Hmily是一个高性能分布式事务TCC开源框架。基于Java语言开发（JDK1.8），支持Dubbo，Spring Cloud等RPC框架进行分布式事务。它目前支持以下特性：</p>
<ul>
<li><p>支持嵌套事务（Nested transaction support）。</p>
</li>
<li><p>采用disruptor框架进行事务日志的异步读写，与RPC框架的性能毫无差别。</p>
</li>
<li><p>支持SpringBoot-starter项目启动，使用简单。</p>
</li>
<li><p>RPC框架支持：dubbo，motan，springcloud。</p>
</li>
<li><p>本地事务存储支持：redis，mongodb，zookeeper，file，mysql。</p>
</li>
<li><p>采用Aspect AOP切面思想与Spring无缝集成，天然支持集群。</p>
</li>
<li><p>RPC事务恢复，超时异常恢复等。</p>
<p>Hmily利用AOP对参与分布式事务的本地方法与远程方法进行拦截处理，通过多方拦截，事务参与者能透明的调用到另一方的Try、Confirm、Cancel方法；传递事务上下文；并记录事务日志，进行补偿，重试等。</p>
<p>Hmily不需要事务协调服务，但需要提供一个数据库（mysql/mongodb/zookeeper/redis/file）来进行日志存储。</p>
<p>Hmily实现的TCC服务与普通的服务一样，只需要暴露一个接口，也就是它的Try业务。Confirm/Cancel业务逻辑只是因为全局事务提交/回滚的需要才提供的，因此Confirm/Cancel业务只需要被Hmily TCC事务框架发现即可，不需要被调用它的其它业务服务所感知。</p>
<p>详细介绍请参照官网：<span class="exturl"><a class="exturl__link"   href="https://dromara.org/website/zh-cn/docs/hmily/index.html" >https://dromara.org/website/zh-cn/docs/hmily/index.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</li>
</ul>

        <h3 id="TCC需要注意的三种异常"   >
          <a href="#TCC需要注意的三种异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#TCC需要注意的三种异常" class="headerlink" title="TCC需要注意的三种异常"></a>TCC需要注意的三种异常</h3>
      
        <h4 id="空回滚："   >
          <a href="#空回滚：" class="heading-link"><i class="fas fa-link"></i></a><a href="#空回滚：" class="headerlink" title="空回滚："></a><b style="color:red">空回滚：</b></h4>
      <p>出现原因：在没有调用TCC参与方Try方法的情况下，调用了二阶段的Cancel方法，Cancel方法需要识别出此时Try有没有执行，如果Try还没执行，表示这个Cancel操作是无效的，即本次Cancel属于空回滚；如果Try已经执行，那么执行的是正常的回滚；</p>
<p>总而言之，Try方法没有执行成功，然而此时这笔分布式事务和分支事务已经落库。有两种情况会触发分布式事务的回滚：</p>
<ol>
<li>发起方认为当前分布式事务无法成功，主动通知TC回滚</li>
<li>TC发现分布式事务超时，被动触发回滚</li>
</ol>
<p>解决思路：关键就是要识别出这个空回滚。思路很简单就是需要知道一阶段Try是否执行了，如果执行了，那就是正常回滚，如果没执行，那就是空回滚。前面已经说过TM在发起全局事务时会生成全局事务记录，全局事务ID贯穿整个分布式事务调用链路。再额外增加一张分支事务记录表，其中有全局事务ID和分支事务ID，第一阶段Try方法里会插入一条记录，表示一阶段执行了。Cancel接口里读取该记录，如果该记录存在，则正常回滚；如果该记录不存在，则是空回滚。</p>

        <h4 id="幂等："   >
          <a href="#幂等：" class="heading-link"><i class="fas fa-link"></i></a><a href="#幂等：" class="headerlink" title="幂等："></a><b style="color:red">幂等：</b></h4>
      <p>为了保证TCC二阶段提交重试机制不会引发数据不一致，要求TCC的二阶段Confirm、Cancel接口保证幂等，这样才不会重复使用或者释放资源。如果幂等控制没做好，很有可能导致数据不一致等严重问题。</p>
<p>解决思路：</p>
<p>方案一</p>
<p>在上述”分支事务记录”中增加执行状态，每次执行前都查询该状态（如字段tcc_statuc，值为try，confirm，cancel）。</p>
<p>方案二</p>
<p>再额外增加2张分支事务记录表local_confirm_log和local_cancel_log，每次执行完confrim和cancel都插入一条数据，在执行confrim和cancel之前都查询对应表中是否有记录。</p>

        <h4 id="悬挂："   >
          <a href="#悬挂：" class="heading-link"><i class="fas fa-link"></i></a><a href="#悬挂：" class="headerlink" title="悬挂："></a><b style="color:red">悬挂：</b></h4>
      <p>悬挂就是对于一个分布式事务，其二阶段Cancel接口比Try接口先执行。</p>
<p>出现原因：在RPC调用分支事务try时，先注册分支事务，再执行RPC调用，如果此时RPC调用的网络发生拥堵，通常RPC调用是有超时时间的，RPC超时以后，TM就会通知RM回滚该分布式事务，可能回滚完成后，RPC请求才到达参与者真正执行，而一个Try方法预留的业务资源，只有该分布式事务才能使用，该分布式事务第一阶段预留的业务资源就再也没有人能够处理了，对于这种情况，我们就称为悬挂，即业务资源预留后没法继续处理。</p>
<p>可能性：</p>
<ol>
<li>全局事务发起方通过RPC调用参与者一阶段Try，但是发生网络阻塞导致RPC超时</li>
<li>RPC超时后，TC会回滚分布式事务(可能是发起方主动通知TC回滚或者是TC发现事务超时后回滚)，调用已注册的各个参与方的二阶段Cancel</li>
<li>参与方空回滚后，发起方对参与者的一阶段Try才开始执行，进行资源预留从而形成悬挂</li>
</ol>
<p>解决思路：如果二阶段执行完成，那一阶段就不能再继续执行。在执行一阶段事务时判断在该全局事务下，”分支事务记录”表中是否已经有二阶段事务记录，如果有则不执行Try。</p>

        <h3 id="Hmily实现TCC事务案例"   >
          <a href="#Hmily实现TCC事务案例" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hmily实现TCC事务案例" class="headerlink" title="Hmily实现TCC事务案例"></a>Hmily实现TCC事务案例</h3>
      <p>【转账场景】：张三向李四转账。</p>
<p><img src="/mdimages/image-20211206235249891.png" alt="image-20211206235249891"></p>
<p>【业务要求】：张三和李四是两个微服务，交易过程要求要么一起成功，要么一起失败。</p>

        <h4 id="技术框架"   >
          <a href="#技术框架" class="heading-link"><i class="fas fa-link"></i></a><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h4>
      <p>数据库：MySQL-5.7.25 J</p>
<p>DK：64位 jdk1.8</p>
<p>微服务：spring-boot-2.1.3、spring-cloud-Greenwich.RELEASE </p>
<p>Hmily：hmily-springcloud.2.0.4-RELEASE</p>

        <h4 id="sql脚本"   >
          <a href="#sql脚本" class="heading-link"><i class="fas fa-link"></i></a><a href="#sql脚本" class="headerlink" title="sql脚本"></a>sql脚本</h4>
      <p>创建hmily数据库，用于存储hmily框架记录的数据。</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `hmily` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></div></figure>

<p>创建bank1库，并导入以下表结构和数据(包含张三账户)</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `bank1` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`account_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;户</span></span><br><span class="line"><span class="string">主姓名&#x27;</span>,</span><br><span class="line">`account_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;银行</span></span><br><span class="line"><span class="string">卡号&#x27;</span>,</span><br><span class="line">`account_password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT</span><br><span class="line"><span class="string">&#x27;帐户密码&#x27;</span>,</span><br><span class="line">`account_balance` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;帐户余额&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span></span><br><span class="line"><span class="keyword">Dynamic</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_info` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;张三的账户&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>创建bank2库，并导入以下表结构和数据(包含李四账户)</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `bank2` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`account_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;户</span></span><br><span class="line"><span class="string">主姓名&#x27;</span>,</span><br><span class="line">`account_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;银行</span></span><br><span class="line"><span class="string">卡号&#x27;</span>,</span><br><span class="line">`account_password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT</span><br><span class="line"><span class="string">&#x27;帐户密码&#x27;</span>,</span><br><span class="line">`account_balance` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;帐户余额&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span></span><br><span class="line"><span class="keyword">Dynamic</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_info` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;李四的账户&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="keyword">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></div></figure>

<p>分别在bank1和bank2数据库都创建try、confirm、cancel三张日志表：</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `local_try_log` (</span><br><span class="line">`tx_no` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;事务id&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`tx_no`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `local_confirm_log` (</span><br><span class="line">`tx_no` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;事务id&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `local_cancel_log` (</span><br><span class="line">`tx_no` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;事务id&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`tx_no`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></div></figure>


        <h4 id="父工程【hmily-tcc-demo】"   >
          <a href="#父工程【hmily-tcc-demo】" class="heading-link"><i class="fas fa-link"></i></a><a href="#父工程【hmily-tcc-demo】" class="headerlink" title="父工程【hmily_tcc_demo】"></a>父工程【hmily_tcc_demo】</h4>
      <p>maven依赖(pom.xml)</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily_tcc_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>hmily_tcc_bank1_demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>hmily_tcc_bank2_demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>discover-server-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.spring.boot.starter.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.spring.boot.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.spring.boot.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dromara<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily-springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--工程名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>hmily_tcc_demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="注册中心【discover-server-demo】"   >
          <a href="#注册中心【discover-server-demo】" class="heading-link"><i class="fas fa-link"></i></a><a href="#注册中心【discover-server-demo】" class="headerlink" title="注册中心【discover-server-demo】"></a>注册中心【discover-server-demo】</h4>
      <p>maven依赖(pom.xml)</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily_tcc_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>discover-server-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>主启动类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoverServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DiscoverServer.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.yml</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">hmily-discovery-demo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">56080 #启动端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">server</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">enable-self-preservation</span>: <span class="string">false    #关闭服务器自我保护，客户端心跳检测15分钟内错误达到80%服务会保护，导致别人还认为是好用的服务</span></span><br><span class="line">    <span class="meta">eviction-interval-timer-in-ms</span>: <span class="string">10000 #清理间隔（单位毫秒，默认是60*1000）5秒将客户端剔除的服务在服务注册列表中剔除# </span></span><br><span class="line">    <span class="attr">shouldUseReadOnlyResponseCache</span>: <span class="string">true #eureka是CAP理论种基于AP策略，为了保证强一致性关闭此切换CP 默认不关闭 false关闭</span></span><br><span class="line">    <span class="meta">response-cache-update-interval-ms</span>: <span class="string">3000  #eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上 #eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上默认30s</span></span><br><span class="line">    <span class="meta">response-cache-auto-expiration-in-seconds</span>: <span class="string">180   #eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。</span></span><br><span class="line">  <span class="attr">client</span>: <span class="string"></span></span><br><span class="line">    <span class="meta">register-with-eureka</span>: <span class="string">false  #false:不作为一个客户端注册到注册中心</span></span><br><span class="line">    <span class="meta">fetch-registry</span>: <span class="string">false      #为true时，可以启动，但报异常：Cannot execute request on any known server</span></span><br><span class="line">    <span class="meta">instance-info-replication-interval-seconds</span>: <span class="string">10 </span></span><br><span class="line">    <span class="attr">serviceUrl</span>: <span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://localhost:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">$&#123;spring.cloud.client.ip-address&#125;</span></span><br><span class="line">    <span class="meta">prefer-ip-address</span>: <span class="string">true</span></span><br><span class="line">    <span class="meta">instance-id</span>: <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="meta">lease-renewal-interval-in-seconds</span>: <span class="string">5    #续约更新时间间隔（默认30秒）</span></span><br><span class="line">    <span class="meta">lease-expiration-duration-in-seconds</span>: <span class="string">10 # 续约到期时间（默认90秒）</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="attr">logging</span>: <span class="string"></span></span><br><span class="line">  <span class="attr">config</span>: <span class="string">classpath:log4j2-dev.xml</span></span><br></pre></td></tr></table></div></figure>

<p>log4j2-dev.xml</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;180&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prjname&quot;</span>&gt;</span>$&#123;spring.application.name&#125;<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logdir&quot;</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PATTERN&quot;</span>&gt;</span> %date&#123;YYYY-MM-dd HH:mm:ss,SSS&#125; %level [%thread][%file:%line] - %msg%n%throwable<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;ErrorAppender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;logdir&#125;/$&#123;prjname&#125;_error.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;logdir&#125;/$$&#123;date:yyyy-MM-dd&#125;/$&#123;prjname&#125;_error.%d&#123;yyyy-MM-dd-HH&#125;.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;DebugAppender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;logdir&#125;/$&#123;prjname&#125;_info.log&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;logdir&#125;/$$&#123;date:yyyy-MM-dd&#125;/$&#123;prjname&#125;_info.%d&#123;yyyy-MM-dd-HH&#125;.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--异步appender--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">Async</span> <span class="attr">name</span>=<span class="string">&quot;AsyncAppender&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;ErrorAppender&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;DebugAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Async</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;springfox&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.http&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.netflix.discovery&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;AsyncAppender&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h4 id="微服务Bank1【hmily-tcc-bank1-demo】"   >
          <a href="#微服务Bank1【hmily-tcc-bank1-demo】" class="heading-link"><i class="fas fa-link"></i></a><a href="#微服务Bank1【hmily-tcc-bank1-demo】" class="headerlink" title="微服务Bank1【hmily_tcc_bank1_demo】"></a>微服务Bank1【hmily_tcc_bank1_demo】</h4>
      <p>maven依赖(pom.xml)</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily_tcc_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily_tcc_bank1_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dromara<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily-springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-javanica<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>主启动类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果有mongodb则打开</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = MongoAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.tcc.demo.spring&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.tcc.demo&quot;,&quot;org.dromara.hmily&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank1TccServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Bank1TccServer.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>配置类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.common.config.HmilyDbConfig;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.core.bootstrap.HmilyTransactionBootstrap;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.core.service.HmilyInitService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseConfiguration</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.ds0&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">ds0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HmilyTransactionBootstrap <span class="title">hmilyTransactionBootstrap</span><span class="params">(HmilyInitService hmilyInitService)</span> </span>&#123;</span><br><span class="line">        HmilyTransactionBootstrap hmilyTransactionBootstrap = <span class="keyword">new</span> HmilyTransactionBootstrap(hmilyInitService);</span><br><span class="line">        hmilyTransactionBootstrap.setSerializer(environment.getProperty(<span class="string">&quot;org.dromara.hmily.serializer&quot;</span>));</span><br><span class="line">        hmilyTransactionBootstrap.setRecoverDelayTime(Integer.parseInt(environment.getProperty(<span class="string">&quot;org.dromara.hmily.recoverDelayTime&quot;</span>)));</span><br><span class="line">        hmilyTransactionBootstrap.setRetryMax(Integer.parseInt(environment.getProperty(<span class="string">&quot;org.dromara.hmily.retryMax&quot;</span>)));</span><br><span class="line">        hmilyTransactionBootstrap.setScheduledDelay(Integer.parseInt(environment.getProperty(<span class="string">&quot;org.dromara.hmily.scheduledDelay&quot;</span>)));</span><br><span class="line">        hmilyTransactionBootstrap.setScheduledThreadMax(Integer.parseInt(environment.getProperty(<span class="string">&quot;org.dromara.hmily.scheduledThreadMax&quot;</span>)));</span><br><span class="line">        hmilyTransactionBootstrap.setRepositorySupport(environment.getProperty(<span class="string">&quot;org.dromara.hmily.repositorySupport&quot;</span>));</span><br><span class="line">        hmilyTransactionBootstrap.setStarted(Boolean.parseBoolean(environment.getProperty(<span class="string">&quot;org.dromara.hmily.started&quot;</span>)));</span><br><span class="line">        HmilyDbConfig hmilyDbConfig = <span class="keyword">new</span> HmilyDbConfig();</span><br><span class="line">        hmilyDbConfig.setDriverClassName(environment.getProperty(<span class="string">&quot;org.dromara.hmily.hmilyDbConfig.driverClassName&quot;</span>));</span><br><span class="line">        hmilyDbConfig.setUrl(environment.getProperty(<span class="string">&quot;org.dromara.hmily.hmilyDbConfig.url&quot;</span>));</span><br><span class="line">        hmilyDbConfig.setUsername(environment.getProperty(<span class="string">&quot;org.dromara.hmily.hmilyDbConfig.username&quot;</span>));</span><br><span class="line">        hmilyDbConfig.setPassword(environment.getProperty(<span class="string">&quot;org.dromara.hmily.hmilyDbConfig.password&quot;</span>));</span><br><span class="line">        hmilyTransactionBootstrap.setHmilyDbConfig(hmilyDbConfig);</span><br><span class="line">        <span class="keyword">return</span> hmilyTransactionBootstrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>实体类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String accountName;</span><br><span class="line">    <span class="keyword">private</span> String accountNo;</span><br><span class="line">    <span class="keyword">private</span> String accountPassword;</span><br><span class="line">    <span class="keyword">private</span> Double accountBalance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>dao</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣除金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo 账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    扣减的金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update account_info set account_balance = account_balance - #&#123;amount&#125; where account_balance &gt;= #&#123;amount&#125; and account_no = #&#123;accountNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subtractAccountBalance</span><span class="params">(<span class="meta">@Param(&quot;accountNo&quot;)</span> String accountNo, <span class="meta">@Param(&quot;amount&quot;)</span> Double amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo 账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    添加的金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update account_info set account_balance = account_balance + #&#123;amount&#125; where account_no = #&#123;accountNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addAccountBalance</span><span class="params">(<span class="meta">@Param(&quot;accountNo&quot;)</span> String accountNo, <span class="meta">@Param(&quot;amount&quot;)</span> Double amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加分支事务try执行记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localTradeNo 本地事务编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into local_try_log values (#&#123;txNo&#125; , now());&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addTry</span><span class="params">(String localTradeNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加分支事务confirm执行记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localTradeNo 本地事务编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into local_confirm_log values (#&#123;txNo&#125; , now());&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addConfirm</span><span class="params">(String localTradeNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加分支事务cancel执行记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localTradeNo 本地事务编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into local_cancel_log values (#&#123;txNo&#125; , now());&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addCancel</span><span class="params">(String localTradeNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询分支事务try是否已执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localTradeNo 本地事务编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(1) from local_try_log where tx_no = #&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isExistTry</span><span class="params">(String localTradeNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询分支事务confirm是否已执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localTradeNo 本地事务编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(1) from local_confirm_log where tx_no = #&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isExistConfirm</span><span class="params">(String localTradeNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询分支事务cancel是否已执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localTradeNo 本地事务编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(1) from local_cancel_log where tx_no = #&#123;txNo&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isExistCancel</span><span class="params">(String localTradeNo)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>service</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户扣款</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo 账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    扣款金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(String accountNo, Double amount)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tcc.demo.dao.AccountInfoDao;</span><br><span class="line"><span class="keyword">import</span> com.tcc.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> com.tcc.demo.spring.Bank2Client;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.annotation.Hmily;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.core.concurrent.threadlocal.HmilyTransactionContextLocal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoDao accountInfoDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Bank2Client bank2Client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo 账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    扣款金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Hmily</span>注解标准的方法就是try方法，在注解中可以指定confirm、cancel方法的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Hmily(confirmMethod = &quot;confirm&quot;, cancelMethod = &quot;cancel&quot;)</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(String accountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">&quot;bank1 service 【try】 ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="comment">//幂等判断 local_try_log表中是否有try日志记录，如果有则不再执行</span></span><br><span class="line">        <span class="keyword">if</span> (accountInfoDao.isExistTry(transId) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;bank1 service 【try】 已经执行，无需重复执行 ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//try 悬挂处理，如果cancel已经执行了，try不再执行</span></span><br><span class="line">        <span class="keyword">if</span> (accountInfoDao.isExistCancel(transId) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;bank1 service 【cancel】 已经执行，不允许再执行try ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查资源，并扣减金额</span></span><br><span class="line">        <span class="keyword">if</span> (accountInfoDao.subtractAccountBalance(accountNo, amount) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;bank1 service 【try】 扣减金额失败 ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入try执行记录</span></span><br><span class="line">        accountInfoDao.addTry(transId);</span><br><span class="line">        <span class="comment">//远程调用李四服务转账</span></span><br><span class="line">        <span class="keyword">if</span> (!bank2Client.transfer(amount)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;bank1 远程调用李四服务失败 ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (amount == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;模拟异常发生......xid:【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * confirm方法</span></span><br><span class="line"><span class="comment">     * 注意：confirm方法如果涉及到业务处理也需要进行幂等处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo 账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    扣款金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(String accountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">&quot;bank1 service 【confirm】  ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span> + <span class="string">&quot;;accountNo :【&quot;</span> + accountNo + <span class="string">&quot;】;amount:【&quot;</span> + amount + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cancel方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo 账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    扣款金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">(String accountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">&quot;bank1 service 【cancel】 ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="comment">//幂等判断 local_cancel_log表中是否有cancel日志记录，如果有则不再执行</span></span><br><span class="line">        <span class="keyword">if</span> (accountInfoDao.isExistCancel(transId) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;bank1 service 【cancel】 已经执行，无需重复执行 ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//空回滚处理，如果try没有执行，cancel不允许执行</span></span><br><span class="line">        <span class="keyword">if</span>(accountInfoDao.isExistTry(transId) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;bank1 service 空回归处理 try没有执行，不允许cancel执行......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增加金额</span></span><br><span class="line">        accountInfoDao.addAccountBalance(accountNo,amount);</span><br><span class="line">        <span class="comment">//插入cancel的执行记录</span></span><br><span class="line">        accountInfoDao.addCancel(transId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>feign</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.annotation.Hmily;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;tcc-demo-bank2&quot;,fallbackFactory = Bank2ClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bank2Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 远程调用李四</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/bank2/transfer&quot;)</span></span><br><span class="line">    <span class="meta">@Hmily</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">transfer</span><span class="params">(<span class="meta">@RequestParam(&quot;amount&quot;)</span> Double amount)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank2ClientFallback</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">Bank2Client</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bank2Client <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bank2Client() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">transfer</span><span class="params">(Double amount)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">&quot;===========================&gt;&quot;</span>,throwable);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>controller</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tcc.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank1Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoService accountInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/transfer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">transfer</span><span class="params">(<span class="meta">@RequestParam(&quot;amount&quot;)</span> Double amount)</span></span>&#123;</span><br><span class="line">        accountInfoService.updateAccountBalance(<span class="string">&quot;1&quot;</span>,amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.yml</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">tcc-demo-bank1</span></span><br><span class="line">  <span class="attr">profiles</span>: <span class="string"></span></span><br><span class="line">    <span class="attr">active</span>: <span class="string">local</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">allow-bean-definition-overriding</span>: <span class="string">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">jackson</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">date-format</span>: <span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">    <span class="meta">time-zone</span>: <span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">servlet</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">context-path</span>: <span class="string">/bank1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">preferIpAddress</span>: <span class="string">true</span></span><br><span class="line">    <span class="meta">instance-id</span>: <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="meta">lease-renewal-interval-in-seconds</span>: <span class="string">5    # 续约更新时间间隔（默认30秒）</span></span><br><span class="line">    <span class="meta">lease-expiration-duration-in-seconds</span>: <span class="string">10 # 续约到期时间（默认90秒）</span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">registry-fetch-interval-seconds</span>: <span class="string">5 # 抓取服务列表</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">endpoints</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">web</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">exposure</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">include</span>: <span class="string">refresh,health,info,env</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">feign</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">enabled</span>: <span class="string">true</span></span><br><span class="line">  <span class="attr">compression</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">request</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">enabled</span>: <span class="string">true # 配置请求GZIP压缩</span></span><br><span class="line">      <span class="meta">mime-types</span>: <span class="string">[&quot;text/xml&quot;,&quot;application/xml&quot;,&quot;application/json&quot;] # 配置压缩支持的MIME TYPE</span></span><br><span class="line">      <span class="meta">min-request-size</span>: <span class="string">2048 # 配置压缩数据大小的下限</span></span><br><span class="line">    <span class="attr">response</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">enabled</span>: <span class="string">true # 配置响应GZIP压缩</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">command</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">default</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">execution</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">isolation</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">thread</span>:<span class="string"></span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds</span>: <span class="string">1000  # 设置熔断超时时间  default 1000</span></span><br><span class="line">        <span class="attr">timeout</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">enabled</span>: <span class="string">true # 打开超时熔断功能 default true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">ConnectTimeout</span>: <span class="string">600 # 设置连接超时时间 default 2000</span></span><br><span class="line">  <span class="attr">ReadTimeout</span>: <span class="string">6000    # 设置读取超时时间  default 5000</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations</span>: <span class="string">true # 对所有操作请求都进行重试  default false</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer</span>: <span class="string">2    # 切换实例的重试次数  default 1</span></span><br><span class="line">  <span class="attr">MaxAutoRetries</span>: <span class="string">1     # 对当前实例的重试次数 default 0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>application-local.yml</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>: <span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">serviceUrl</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://localhost:56080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  ##################### DB #####################</span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">ds0</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/bank1?useUnicode=true</span></span><br><span class="line">      <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">      <span class="attr">password</span>: <span class="string">root</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="meta">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initialSize</span>: <span class="string">5</span></span><br><span class="line">      <span class="attr">minIdle</span>: <span class="string">5</span></span><br><span class="line">      <span class="attr">maxActive</span>: <span class="string">20</span></span><br><span class="line">      <span class="attr">maxWait</span>: <span class="string">60000</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis</span>: <span class="string">60000</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis</span>: <span class="string">300000</span></span><br><span class="line">      <span class="attr">validationQuery</span>: <span class="string">SELECT user()</span></span><br><span class="line">      <span class="attr">testWhileIdle</span>: <span class="string">true</span></span><br><span class="line">      <span class="attr">testOnBorrow</span>: <span class="string">false</span></span><br><span class="line">      <span class="attr">testOnReturn</span>: <span class="string">false</span></span><br><span class="line">      <span class="attr">poolPreparedStatements</span>: <span class="string">true</span></span><br><span class="line">      <span class="meta">connection-properties</span>: <span class="string">druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">dromara</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hmily</span> :<span class="string"></span></span><br><span class="line">      <span class="attr">serializer</span> : <span class="string">kryo</span></span><br><span class="line">      <span class="attr">recoverDelayTime</span> : <span class="string">30</span></span><br><span class="line">      <span class="attr">retryMax</span> : <span class="string">30</span></span><br><span class="line">      <span class="attr">scheduledDelay</span> : <span class="string">30</span></span><br><span class="line">      <span class="attr">scheduledThreadMax</span> :  <span class="string">10</span></span><br><span class="line">      <span class="attr">repositorySupport</span> : <span class="string">db</span></span><br><span class="line">      <span class="attr">started</span>: <span class="string">true</span></span><br><span class="line">      <span class="attr">hmilyDbConfig</span> :<span class="string"></span></span><br><span class="line">        <span class="attr">driverClassName</span>  : <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url</span> :  <span class="string">jdbc:mysql://localhost:3306/hmily?useUnicode=true</span></span><br><span class="line">        <span class="attr">username</span> : <span class="string">root</span></span><br><span class="line">        <span class="attr">password</span> : <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logging</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">level</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">root</span>: <span class="string">info</span></span><br><span class="line">    <span class="meta">org.springframework.web</span>: <span class="string">info</span></span><br><span class="line">    <span class="meta">org.apache.ibatis</span>: <span class="string">info</span></span><br><span class="line">    <span class="meta">org.dromara.hmily.bonuspoint</span>: <span class="string">debug</span></span><br><span class="line">    <span class="meta">org.dromara.hmily.lottery</span>: <span class="string">debug</span></span><br><span class="line">    <span class="meta">org.dromara.hmily</span>: <span class="string">debug</span></span><br><span class="line">    <span class="meta">io.netty</span>: <span class="string">info</span></span><br><span class="line">    <span class="meta">cn.itcast.wanxintx.seatademo.bank2</span>: <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>


        <h4 id="微服务Bank2【hmily-tcc-bank2-demo】"   >
          <a href="#微服务Bank2【hmily-tcc-bank2-demo】" class="heading-link"><i class="fas fa-link"></i></a><a href="#微服务Bank2【hmily-tcc-bank2-demo】" class="headerlink" title="微服务Bank2【hmily_tcc_bank2_demo】"></a>微服务Bank2【hmily_tcc_bank2_demo】</h4>
      <p>maven依赖(pom.xml)</p>
<figure class="highlight xml"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily_tcc_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily_tcc_bank2_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dromara<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hmily-springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-javanica<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>主启动类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果有mongodb则打开</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = MongoAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.tcc.demo&quot;,&quot;org.dromara.hmily&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank2TccServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Bank2TccServer.class, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>配置类</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.common.config.HmilyDbConfig;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.core.bootstrap.HmilyTransactionBootstrap;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.core.service.HmilyInitService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseConfiguration</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.ds1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">ds1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HmilyTransactionBootstrap <span class="title">hmilyTransactionBootstrap</span><span class="params">(HmilyInitService hmilyInitService)</span> </span>&#123;</span><br><span class="line">        HmilyTransactionBootstrap hmilyTransactionBootstrap = <span class="keyword">new</span> HmilyTransactionBootstrap(hmilyInitService);</span><br><span class="line">        hmilyTransactionBootstrap.setSerializer(environment.getProperty(<span class="string">&quot;org.dromara.hmily.serializer&quot;</span>));</span><br><span class="line">        hmilyTransactionBootstrap.setRecoverDelayTime(Integer.parseInt(environment.getProperty(<span class="string">&quot;org.dromara.hmily.recoverDelayTime&quot;</span>)));</span><br><span class="line">        hmilyTransactionBootstrap.setRetryMax(Integer.parseInt(environment.getProperty(<span class="string">&quot;org.dromara.hmily.retryMax&quot;</span>)));</span><br><span class="line">        hmilyTransactionBootstrap.setScheduledDelay(Integer.parseInt(environment.getProperty(<span class="string">&quot;org.dromara.hmily.scheduledDelay&quot;</span>)));</span><br><span class="line">        hmilyTransactionBootstrap.setScheduledThreadMax(Integer.parseInt(environment.getProperty(<span class="string">&quot;org.dromara.hmily.scheduledThreadMax&quot;</span>)));</span><br><span class="line">        hmilyTransactionBootstrap.setRepositorySupport(environment.getProperty(<span class="string">&quot;org.dromara.hmily.repositorySupport&quot;</span>));</span><br><span class="line">        hmilyTransactionBootstrap.setStarted(Boolean.parseBoolean(environment.getProperty(<span class="string">&quot;org.dromara.hmily.started&quot;</span>)));</span><br><span class="line">        HmilyDbConfig hmilyDbConfig = <span class="keyword">new</span> HmilyDbConfig();</span><br><span class="line">        hmilyDbConfig.setDriverClassName(environment.getProperty(<span class="string">&quot;org.dromara.hmily.hmilyDbConfig.driverClassName&quot;</span>));</span><br><span class="line">        hmilyDbConfig.setUrl(environment.getProperty(<span class="string">&quot;org.dromara.hmily.hmilyDbConfig.url&quot;</span>));</span><br><span class="line">        hmilyDbConfig.setUsername(environment.getProperty(<span class="string">&quot;org.dromara.hmily.hmilyDbConfig.username&quot;</span>));</span><br><span class="line">        hmilyDbConfig.setPassword(environment.getProperty(<span class="string">&quot;org.dromara.hmily.hmilyDbConfig.password&quot;</span>));</span><br><span class="line">        hmilyTransactionBootstrap.setHmilyDbConfig(hmilyDbConfig);</span><br><span class="line">        <span class="keyword">return</span> hmilyTransactionBootstrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>实体类、dao与【hmily_tcc_bank1_demo】一样</p>
<p>service</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo 账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    增加的金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(String accountNo, Double amount)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.service.imlp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tcc.demo.dao.AccountInfoDao;</span><br><span class="line"><span class="keyword">import</span> com.tcc.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.annotation.Hmily;</span><br><span class="line"><span class="keyword">import</span> org.dromara.hmily.core.concurrent.threadlocal.HmilyTransactionContextLocal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountInfoDao accountInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * try方法</span></span><br><span class="line"><span class="comment">     * 这里不做提交，防止资源被其它人使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo 账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount    增加的金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Hmily(confirmMethod = &quot;confirm&quot;, cancelMethod = &quot;cancel&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccountBalance</span><span class="params">(String accountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">&quot;bank2 service 【try】  ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span> + <span class="string">&quot;;accountNo :【&quot;</span> + accountNo + <span class="string">&quot;】;amount:【&quot;</span> + amount + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="comment">//模拟分支事务异常</span></span><br><span class="line">        <span class="keyword">if</span>(amount == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;模拟李四分支事务异常......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟分支事务超时</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * confirm方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(String accountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">&quot;bank2 service 【confirm】  ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span> + <span class="string">&quot;;accountNo :【&quot;</span> + accountNo + <span class="string">&quot;】;amount:【&quot;</span> + amount + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="comment">//幂等处理</span></span><br><span class="line">        <span class="keyword">if</span> (accountInfoDao.isExistConfirm(transId) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;bank2 service 【confirm】 已经执行，无需重复执行 ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增加金额</span></span><br><span class="line">        accountInfoDao.addAccountBalance(accountNo, amount);</span><br><span class="line">        <span class="comment">//增加一条confirm日志</span></span><br><span class="line">        accountInfoDao.addConfirm(transId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cancel方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">(String accountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">&quot;bank2 service 【cancel】  ......xid: 【&quot;</span> + transId + <span class="string">&quot;】&quot;</span> + <span class="string">&quot;;accountNo :【&quot;</span> + accountNo + <span class="string">&quot;】;amount:【&quot;</span> + amount + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>controller</p>
<figure class="highlight java"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tcc.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tcc.demo.service.AccountInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank2Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountInfoService accountInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/transfer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">transfer</span><span class="params">(<span class="meta">@RequestParam(&quot;amount&quot;)</span> Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountInfoService.updateAccountBalance(<span class="string">&quot;2&quot;</span>, amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>配置文件</p>
<p>application.yml</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">tcc-demo-bank2</span></span><br><span class="line">  <span class="attr">profiles</span>: <span class="string"></span></span><br><span class="line">    <span class="attr">active</span>: <span class="string">local</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">allow-bean-definition-overriding</span>: <span class="string">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">jackson</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">date-format</span>: <span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">    <span class="meta">time-zone</span>: <span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">servlet</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">context-path</span>: <span class="string">/bank2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">preferIpAddress</span>: <span class="string">true</span></span><br><span class="line">    <span class="meta">instance-id</span>: <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></span><br><span class="line">    <span class="meta">lease-renewal-interval-in-seconds</span>: <span class="string">5    # 续约更新时间间隔（默认30秒）</span></span><br><span class="line">    <span class="meta">lease-expiration-duration-in-seconds</span>: <span class="string">10 # 续约到期时间（默认90秒）</span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">registry-fetch-interval-seconds</span>: <span class="string">5 # 抓取服务列表</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">endpoints</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">web</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">exposure</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">include</span>: <span class="string">refresh,health,info,env</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">feign</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">enabled</span>: <span class="string">true</span></span><br><span class="line">  <span class="attr">compression</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">request</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">enabled</span>: <span class="string">true # 配置请求GZIP压缩</span></span><br><span class="line">      <span class="meta">mime-types</span>: <span class="string">[&quot;text/xml&quot;,&quot;application/xml&quot;,&quot;application/json&quot;] # 配置压缩支持的MIME TYPE</span></span><br><span class="line">      <span class="meta">min-request-size</span>: <span class="string">2048 # 配置压缩数据大小的下限</span></span><br><span class="line">    <span class="attr">response</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">enabled</span>: <span class="string">true # 配置响应GZIP压缩</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">command</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">default</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">execution</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">isolation</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">thread</span>:<span class="string"></span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds</span>: <span class="string">1000  # 设置熔断超时时间  default 1000</span></span><br><span class="line">        <span class="attr">timeout</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">enabled</span>: <span class="string">true # 打开超时熔断功能 default true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">ConnectTimeout</span>: <span class="string">600 # 设置连接超时时间 default 2000</span></span><br><span class="line">  <span class="attr">ReadTimeout</span>: <span class="string">6000    # 设置读取超时时间  default 5000</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations</span>: <span class="string">true # 对所有操作请求都进行重试  default false</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer</span>: <span class="string">2    # 切换实例的重试次数  default 1</span></span><br><span class="line">  <span class="attr">MaxAutoRetries</span>: <span class="string">1     # 对当前实例的重试次数 default 0</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>application-local.yml</p>
<figure class="highlight properties"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">9002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">serviceUrl</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://localhost:56080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  ##################### DB #####################</span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">ds1</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/bank2?useUnicode=true</span></span><br><span class="line">      <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">      <span class="attr">password</span>: <span class="string">root</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="meta">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initialSize</span>: <span class="string">5</span></span><br><span class="line">      <span class="attr">minIdle</span>: <span class="string">5</span></span><br><span class="line">      <span class="attr">maxActive</span>: <span class="string">20</span></span><br><span class="line">      <span class="attr">maxWait</span>: <span class="string">60000</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis</span>: <span class="string">60000</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis</span>: <span class="string">300000</span></span><br><span class="line">      <span class="attr">validationQuery</span>: <span class="string">SELECT user()</span></span><br><span class="line">      <span class="attr">testWhileIdle</span>: <span class="string">true</span></span><br><span class="line">      <span class="attr">testOnBorrow</span>: <span class="string">false</span></span><br><span class="line">      <span class="attr">testOnReturn</span>: <span class="string">false</span></span><br><span class="line">      <span class="attr">poolPreparedStatements</span>: <span class="string">true</span></span><br><span class="line">      <span class="meta">connection-properties</span>: <span class="string">druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">dromara</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hmily</span> :<span class="string"></span></span><br><span class="line">      <span class="attr">serializer</span> : <span class="string">kryo</span></span><br><span class="line">      <span class="attr">recoverDelayTime</span> : <span class="string">30</span></span><br><span class="line">      <span class="attr">retryMax</span> : <span class="string">30</span></span><br><span class="line">      <span class="attr">scheduledDelay</span> : <span class="string">30</span></span><br><span class="line">      <span class="attr">scheduledThreadMax</span> :  <span class="string">10</span></span><br><span class="line">      <span class="attr">repositorySupport</span> : <span class="string">db</span></span><br><span class="line">      <span class="attr">started</span>: <span class="string">false</span></span><br><span class="line">      <span class="attr">hmilyDbConfig</span> :<span class="string"></span></span><br><span class="line">        <span class="attr">driverClassName</span>  : <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url</span> :  <span class="string">jdbc:mysql://localhost:3306/hmily?useUnicode=true</span></span><br><span class="line">        <span class="attr">username</span> : <span class="string">root</span></span><br><span class="line">        <span class="attr">password</span> : <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logging</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">level</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">root</span>: <span class="string">info</span></span><br><span class="line">    <span class="meta">org.springframework.web</span>: <span class="string">info</span></span><br><span class="line">    <span class="meta">org.apache.ibatis</span>: <span class="string">info</span></span><br><span class="line">    <span class="meta">org.dromara.hmily.bonuspoint</span>: <span class="string">debug</span></span><br><span class="line">    <span class="meta">org.dromara.hmily.lottery</span>: <span class="string">debug</span></span><br><span class="line">    <span class="meta">org.dromara.hmily</span>: <span class="string">debug</span></span><br><span class="line">    <span class="meta">io.netty</span>: <span class="string">info</span></span><br><span class="line">    <span class="meta">cn.itcast.wanxintx.seatademo.bank2</span>: <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>

<p>测试场景</p>
<ul>
<li>张三向李四转账成功</li>
<li>李四事务失败，张三事务回滚成功</li>
<li>张三事务失败，李四分支事务回滚成功</li>
<li>分支事务超时，回滚成功</li>
</ul>
<p>注意事项</p>
<p>特别强调，在使用@Hmily注解时，里面的两个属性confirmMethod和cancelMethod的值指定的是comfirm和cancel方法名，如果出现指定的方法名和定义的方法名不一致，会出现报Hmily框架生成的代理类找不到这个方法，然后一直报错，并且会被记录到hmily数据库中的 hmily_ 服务名 表中，就算代码修改正确后也会一直报找不到这个方法，所以需要到数据库的 hmily_服务名 该表删除对应的记录。如下图：</p>
<p><img src="/mdimages/image-20211125210914955.png" alt="image-20211125210914955"></p>
<p><img src="/mdimages/image-20211125210910678.png" alt="image-20211125210910678"></p>
<p>由于自己的疏忽在书写confirmMethod的值时将自己定义的confirm方法名写成comfirm，所以出现这种情况，并且事后修改回正确的名称重启后还是会报找不到这个方法，经查询发现hmily数据库中对应的表记录一直在被重试，所以需要连同该记录删除才不会报找不到该方法。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
</search>
